{
  "version": 3,
  "sources": ["../node_modules/ms/index.js", "../node_modules/debug/src/common.js", "../node_modules/debug/src/browser.js", "../node_modules/has-flag/index.js", "../node_modules/supports-color/index.js", "../node_modules/debug/src/node.js", "../node_modules/debug/src/index.js", "../node_modules/@kwsites/file-exists/src/index.ts", "../node_modules/@kwsites/file-exists/index.ts", "../node_modules/@kwsites/promise-deferred/src/index.ts", "../node_modules/delayed-stream/lib/delayed_stream.js", "../node_modules/combined-stream/lib/combined_stream.js", "../node_modules/mime-db/db.json", "../node_modules/mime-db/index.js", "../node_modules/mime-types/index.js", "../node_modules/asynckit/lib/defer.js", "../node_modules/asynckit/lib/async.js", "../node_modules/asynckit/lib/abort.js", "../node_modules/asynckit/lib/iterate.js", "../node_modules/asynckit/lib/state.js", "../node_modules/asynckit/lib/terminator.js", "../node_modules/asynckit/parallel.js", "../node_modules/asynckit/serialOrdered.js", "../node_modules/asynckit/serial.js", "../node_modules/asynckit/index.js", "../node_modules/form-data/lib/populate.js", "../node_modules/form-data/lib/form_data.js", "../node_modules/proxy-from-env/index.js", "../node_modules/follow-redirects/debug.js", "../node_modules/follow-redirects/index.js", "../node_modules/entities/lib/maps/entities.json", "../node_modules/markdown-it/lib/common/entities.js", "../node_modules/uc.micro/categories/P/regex.js", "../node_modules/mdurl/encode.js", "../node_modules/mdurl/decode.js", "../node_modules/mdurl/format.js", "../node_modules/mdurl/parse.js", "../node_modules/mdurl/index.js", "../node_modules/uc.micro/properties/Any/regex.js", "../node_modules/uc.micro/categories/Cc/regex.js", "../node_modules/uc.micro/categories/Cf/regex.js", "../node_modules/uc.micro/categories/Z/regex.js", "../node_modules/uc.micro/index.js", "../node_modules/markdown-it/lib/common/utils.js", "../node_modules/markdown-it/lib/helpers/parse_link_label.js", "../node_modules/markdown-it/lib/helpers/parse_link_destination.js", "../node_modules/markdown-it/lib/helpers/parse_link_title.js", "../node_modules/markdown-it/lib/helpers/index.js", "../node_modules/markdown-it/lib/renderer.js", "../node_modules/markdown-it/lib/ruler.js", "../node_modules/markdown-it/lib/rules_core/normalize.js", "../node_modules/markdown-it/lib/rules_core/block.js", "../node_modules/markdown-it/lib/rules_core/inline.js", "../node_modules/markdown-it/lib/rules_core/linkify.js", "../node_modules/markdown-it/lib/rules_core/replacements.js", "../node_modules/markdown-it/lib/rules_core/smartquotes.js", "../node_modules/markdown-it/lib/rules_core/text_join.js", "../node_modules/markdown-it/lib/token.js", "../node_modules/markdown-it/lib/rules_core/state_core.js", "../node_modules/markdown-it/lib/parser_core.js", "../node_modules/markdown-it/lib/rules_block/table.js", "../node_modules/markdown-it/lib/rules_block/code.js", "../node_modules/markdown-it/lib/rules_block/fence.js", "../node_modules/markdown-it/lib/rules_block/blockquote.js", "../node_modules/markdown-it/lib/rules_block/hr.js", "../node_modules/markdown-it/lib/rules_block/list.js", "../node_modules/markdown-it/lib/rules_block/reference.js", "../node_modules/markdown-it/lib/common/html_blocks.js", "../node_modules/markdown-it/lib/common/html_re.js", "../node_modules/markdown-it/lib/rules_block/html_block.js", "../node_modules/markdown-it/lib/rules_block/heading.js", "../node_modules/markdown-it/lib/rules_block/lheading.js", "../node_modules/markdown-it/lib/rules_block/paragraph.js", "../node_modules/markdown-it/lib/rules_block/state_block.js", "../node_modules/markdown-it/lib/parser_block.js", "../node_modules/markdown-it/lib/rules_inline/text.js", "../node_modules/markdown-it/lib/rules_inline/linkify.js", "../node_modules/markdown-it/lib/rules_inline/newline.js", "../node_modules/markdown-it/lib/rules_inline/escape.js", "../node_modules/markdown-it/lib/rules_inline/backticks.js", "../node_modules/markdown-it/lib/rules_inline/strikethrough.js", "../node_modules/markdown-it/lib/rules_inline/emphasis.js", "../node_modules/markdown-it/lib/rules_inline/link.js", "../node_modules/markdown-it/lib/rules_inline/image.js", "../node_modules/markdown-it/lib/rules_inline/autolink.js", "../node_modules/markdown-it/lib/rules_inline/html_inline.js", "../node_modules/markdown-it/lib/rules_inline/entity.js", "../node_modules/markdown-it/lib/rules_inline/balance_pairs.js", "../node_modules/markdown-it/lib/rules_inline/fragments_join.js", "../node_modules/markdown-it/lib/rules_inline/state_inline.js", "../node_modules/markdown-it/lib/parser_inline.js", "../node_modules/linkify-it/lib/re.js", "../node_modules/linkify-it/index.js", "../node_modules/markdown-it/lib/presets/default.js", "../node_modules/markdown-it/lib/presets/zero.js", "../node_modules/markdown-it/lib/presets/commonmark.js", "../node_modules/markdown-it/lib/index.js", "../node_modules/markdown-it/index.js", "../node_modules/vscode-oniguruma/release/main.js", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/webpack/universalModuleDefinition", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/out/debug.js", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/out/grammar.js", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/out/grammarReader.js", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/out/json.js", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/out/main.js", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/out/matcher.js", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/out/plist.js", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/out/registry.js", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/out/rule.js", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/out/theme.js", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/out/types.js", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/out/utils.js", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/webpack/bootstrap", "../node_modules/vscode-textmate/release/webpack:/vscodetextmate/webpack/startup", "../node_modules/shiki/dist/index.js", "../node_modules/websocket/node_modules/ms/index.js", "../node_modules/websocket/node_modules/debug/src/debug.js", "../node_modules/websocket/node_modules/debug/src/browser.js", "../node_modules/websocket/node_modules/debug/src/node.js", "../node_modules/websocket/node_modules/debug/src/index.js", "../node_modules/websocket/lib/utils.js", "../node_modules/node-gyp-build/node-gyp-build.js", "../node_modules/node-gyp-build/index.js", "../node_modules/bufferutil/fallback.js", "../node_modules/bufferutil/index.js", "../node_modules/websocket/lib/WebSocketFrame.js", "../node_modules/websocket/vendor/FastBufferList.js", "../node_modules/utf-8-validate/fallback.js", "../node_modules/utf-8-validate/index.js", "../node_modules/websocket/lib/WebSocketConnection.js", "../node_modules/websocket/lib/WebSocketRequest.js", "../node_modules/websocket/lib/WebSocketServer.js", "../node_modules/websocket/lib/WebSocketClient.js", "../node_modules/websocket/lib/WebSocketRouterRequest.js", "../node_modules/websocket/lib/WebSocketRouter.js", "../node_modules/is-typedarray/index.js", "../node_modules/typedarray-to-buffer/index.js", "../node_modules/yaeti/lib/EventTarget.js", "../node_modules/yaeti/lib/Event.js", "../node_modules/yaeti/index.js", "../node_modules/websocket/lib/W3CWebSocket.js", "../node_modules/websocket/lib/Deprecation.js", "../node_modules/websocket/package.json", "../node_modules/websocket/lib/version.js", "../node_modules/websocket/lib/websocket.js", "../node_modules/websocket/index.js", "../node_modules/prismjs/prism.js", "../src/extension.ts", "../src/vcs/auto-git.ts", "../node_modules/simple-git/src/lib/errors/git-error.ts", "../node_modules/simple-git/src/lib/errors/git-response-error.ts", "../node_modules/simple-git/src/lib/errors/task-configuration-error.ts", "../node_modules/simple-git/src/lib/utils/util.ts", "../node_modules/simple-git/src/lib/utils/argument-filters.ts", "../node_modules/simple-git/src/lib/utils/exit-codes.ts", "../node_modules/simple-git/src/lib/utils/git-output-streams.ts", "../node_modules/simple-git/src/lib/utils/line-parser.ts", "../node_modules/simple-git/src/lib/utils/simple-git-options.ts", "../node_modules/simple-git/src/lib/utils/task-options.ts", "../node_modules/simple-git/src/lib/utils/task-parser.ts", "../node_modules/simple-git/src/lib/utils/index.ts", "../node_modules/simple-git/src/lib/tasks/check-is-repo.ts", "../node_modules/simple-git/src/lib/responses/CleanSummary.ts", "../node_modules/simple-git/src/lib/tasks/task.ts", "../node_modules/simple-git/src/lib/tasks/clean.ts", "../node_modules/simple-git/src/lib/responses/ConfigList.ts", "../node_modules/simple-git/src/lib/tasks/config.ts", "../node_modules/simple-git/src/lib/tasks/grep.ts", "../node_modules/simple-git/src/lib/tasks/reset.ts", "../node_modules/simple-git/src/lib/git-logger.ts", "../node_modules/simple-git/src/lib/runners/tasks-pending-queue.ts", "../node_modules/simple-git/src/lib/runners/git-executor-chain.ts", "../node_modules/simple-git/src/lib/runners/git-executor.ts", "../node_modules/simple-git/src/lib/task-callback.ts", "../node_modules/simple-git/src/lib/tasks/change-working-directory.ts", "../node_modules/simple-git/src/lib/tasks/checkout.ts", "../node_modules/simple-git/src/lib/parsers/parse-commit.ts", "../node_modules/simple-git/src/lib/tasks/commit.ts", "../node_modules/simple-git/src/lib/tasks/hash-object.ts", "../node_modules/simple-git/src/lib/responses/InitSummary.ts", "../node_modules/simple-git/src/lib/tasks/init.ts", "../node_modules/simple-git/src/lib/args/log-format.ts", "../node_modules/simple-git/src/lib/responses/DiffSummary.ts", "../node_modules/simple-git/src/lib/parsers/parse-diff-summary.ts", "../node_modules/simple-git/src/lib/parsers/parse-list-log-summary.ts", "../node_modules/simple-git/src/lib/tasks/diff.ts", "../node_modules/simple-git/src/lib/tasks/log.ts", "../node_modules/simple-git/src/lib/responses/MergeSummary.ts", "../node_modules/simple-git/src/lib/responses/PullSummary.ts", "../node_modules/simple-git/src/lib/parsers/parse-remote-objects.ts", "../node_modules/simple-git/src/lib/parsers/parse-remote-messages.ts", "../node_modules/simple-git/src/lib/parsers/parse-pull.ts", "../node_modules/simple-git/src/lib/parsers/parse-merge.ts", "../node_modules/simple-git/src/lib/tasks/merge.ts", "../node_modules/simple-git/src/lib/parsers/parse-push.ts", "../node_modules/simple-git/src/lib/tasks/push.ts", "../node_modules/simple-git/src/lib/responses/FileStatusSummary.ts", "../node_modules/simple-git/src/lib/responses/StatusSummary.ts", "../node_modules/simple-git/src/lib/tasks/status.ts", "../node_modules/simple-git/src/lib/tasks/version.ts", "../node_modules/simple-git/src/lib/simple-git-api.ts", "../node_modules/simple-git/src/lib/runners/scheduler.ts", "../node_modules/simple-git/src/lib/tasks/apply-patch.ts", "../node_modules/simple-git/src/lib/responses/BranchDeleteSummary.ts", "../node_modules/simple-git/src/lib/parsers/parse-branch-delete.ts", "../node_modules/simple-git/src/lib/responses/BranchSummary.ts", "../node_modules/simple-git/src/lib/parsers/parse-branch.ts", "../node_modules/simple-git/src/lib/tasks/branch.ts", "../node_modules/simple-git/src/lib/responses/CheckIgnore.ts", "../node_modules/simple-git/src/lib/tasks/check-ignore.ts", "../node_modules/simple-git/src/lib/tasks/clone.ts", "../node_modules/simple-git/src/lib/parsers/parse-fetch.ts", "../node_modules/simple-git/src/lib/tasks/fetch.ts", "../node_modules/simple-git/src/lib/parsers/parse-move.ts", "../node_modules/simple-git/src/lib/tasks/move.ts", "../node_modules/simple-git/src/lib/tasks/pull.ts", "../node_modules/simple-git/src/lib/responses/GetRemoteSummary.ts", "../node_modules/simple-git/src/lib/tasks/remote.ts", "../node_modules/simple-git/src/lib/tasks/stash-list.ts", "../node_modules/simple-git/src/lib/tasks/sub-module.ts", "../node_modules/simple-git/src/lib/responses/TagList.ts", "../node_modules/simple-git/src/lib/tasks/tag.ts", "../node_modules/simple-git/src/git.js", "../node_modules/simple-git/src/lib/errors/git-construct-error.ts", "../node_modules/simple-git/src/lib/api.ts", "../node_modules/simple-git/src/lib/errors/git-plugin-error.ts", "../node_modules/simple-git/src/lib/plugins/abort-plugin.ts", "../node_modules/simple-git/src/lib/plugins/block-unsafe-operations-plugin.ts", "../node_modules/simple-git/src/lib/plugins/command-config-prefixing-plugin.ts", "../node_modules/simple-git/src/lib/plugins/completion-detection.plugin.ts", "../node_modules/simple-git/src/lib/plugins/error-detection.plugin.ts", "../node_modules/simple-git/src/lib/plugins/plugin-store.ts", "../node_modules/simple-git/src/lib/plugins/progress-monitor-plugin.ts", "../node_modules/simple-git/src/lib/plugins/spawn-options-plugin.ts", "../node_modules/simple-git/src/lib/plugins/timout-plugin.ts", "../node_modules/simple-git/src/lib/git-factory.ts", "../node_modules/simple-git/src/lib/runners/promise-wrapped.ts", "../node_modules/simple-git/src/esm.mjs", "../src/afk/webview.ts", "../src/session/sessionUpdate.ts", "../node_modules/axios/lib/helpers/bind.js", "../node_modules/axios/lib/utils.js", "../node_modules/axios/lib/core/AxiosError.js", "../node_modules/axios/lib/platform/node/classes/FormData.js", "../node_modules/axios/lib/helpers/toFormData.js", "../node_modules/axios/lib/helpers/AxiosURLSearchParams.js", "../node_modules/axios/lib/helpers/buildURL.js", "../node_modules/axios/lib/core/InterceptorManager.js", "../node_modules/axios/lib/defaults/transitional.js", "../node_modules/axios/lib/platform/node/classes/URLSearchParams.js", "../node_modules/axios/lib/platform/node/index.js", "../node_modules/axios/lib/helpers/toURLEncodedForm.js", "../node_modules/axios/lib/helpers/formDataToJSON.js", "../node_modules/axios/lib/defaults/index.js", "../node_modules/axios/lib/helpers/parseHeaders.js", "../node_modules/axios/lib/core/AxiosHeaders.js", "../node_modules/axios/lib/core/transformData.js", "../node_modules/axios/lib/cancel/isCancel.js", "../node_modules/axios/lib/cancel/CanceledError.js", "../node_modules/axios/lib/core/settle.js", "../node_modules/axios/lib/helpers/isAbsoluteURL.js", "../node_modules/axios/lib/helpers/combineURLs.js", "../node_modules/axios/lib/core/buildFullPath.js", "../node_modules/axios/lib/adapters/http.js", "../node_modules/axios/lib/env/data.js", "../node_modules/axios/lib/helpers/parseProtocol.js", "../node_modules/axios/lib/helpers/fromDataURI.js", "../node_modules/axios/lib/helpers/AxiosTransformStream.js", "../node_modules/axios/lib/helpers/throttle.js", "../node_modules/axios/lib/helpers/speedometer.js", "../node_modules/axios/lib/helpers/formDataToStream.js", "../node_modules/axios/lib/helpers/readBlob.js", "../node_modules/axios/lib/helpers/ZlibHeaderTransformStream.js", "../node_modules/axios/lib/helpers/cookies.js", "../node_modules/axios/lib/helpers/isURLSameOrigin.js", "../node_modules/axios/lib/adapters/xhr.js", "../node_modules/axios/lib/adapters/adapters.js", "../node_modules/axios/lib/core/dispatchRequest.js", "../node_modules/axios/lib/core/mergeConfig.js", "../node_modules/axios/lib/helpers/validator.js", "../node_modules/axios/lib/core/Axios.js", "../node_modules/axios/lib/cancel/CancelToken.js", "../node_modules/axios/lib/helpers/spread.js", "../node_modules/axios/lib/helpers/isAxiosError.js", "../node_modules/axios/lib/helpers/HttpStatusCode.js", "../node_modules/axios/lib/axios.js", "../node_modules/axios/index.js", "../src/tutorial/webview.ts", "../src/streak/webview.ts", "../src/streak/explosion.ts", "../src/teacher/webview.ts", "../src/tutorial-editor/webview.ts"],
  "sourcesContent": ["/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n", "/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n", "'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n", "'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n", "/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n", "/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = require('./browser.js');\n} else {\n\tmodule.exports = require('./node.js');\n}\n", null, null, null, "var Stream = require('stream').Stream;\nvar util = require('util');\n\nmodule.exports = DelayedStream;\nfunction DelayedStream() {\n  this.source = null;\n  this.dataSize = 0;\n  this.maxDataSize = 1024 * 1024;\n  this.pauseStream = true;\n\n  this._maxDataSizeExceeded = false;\n  this._released = false;\n  this._bufferedEvents = [];\n}\nutil.inherits(DelayedStream, Stream);\n\nDelayedStream.create = function(source, options) {\n  var delayedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    delayedStream[option] = options[option];\n  }\n\n  delayedStream.source = source;\n\n  var realEmit = source.emit;\n  source.emit = function() {\n    delayedStream._handleEmit(arguments);\n    return realEmit.apply(source, arguments);\n  };\n\n  source.on('error', function() {});\n  if (delayedStream.pauseStream) {\n    source.pause();\n  }\n\n  return delayedStream;\n};\n\nObject.defineProperty(DelayedStream.prototype, 'readable', {\n  configurable: true,\n  enumerable: true,\n  get: function() {\n    return this.source.readable;\n  }\n});\n\nDelayedStream.prototype.setEncoding = function() {\n  return this.source.setEncoding.apply(this.source, arguments);\n};\n\nDelayedStream.prototype.resume = function() {\n  if (!this._released) {\n    this.release();\n  }\n\n  this.source.resume();\n};\n\nDelayedStream.prototype.pause = function() {\n  this.source.pause();\n};\n\nDelayedStream.prototype.release = function() {\n  this._released = true;\n\n  this._bufferedEvents.forEach(function(args) {\n    this.emit.apply(this, args);\n  }.bind(this));\n  this._bufferedEvents = [];\n};\n\nDelayedStream.prototype.pipe = function() {\n  var r = Stream.prototype.pipe.apply(this, arguments);\n  this.resume();\n  return r;\n};\n\nDelayedStream.prototype._handleEmit = function(args) {\n  if (this._released) {\n    this.emit.apply(this, args);\n    return;\n  }\n\n  if (args[0] === 'data') {\n    this.dataSize += args[1].length;\n    this._checkIfMaxDataSizeExceeded();\n  }\n\n  this._bufferedEvents.push(args);\n};\n\nDelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {\n  if (this._maxDataSizeExceeded) {\n    return;\n  }\n\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  this._maxDataSizeExceeded = true;\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'\n  this.emit('error', new Error(message));\n};\n", "var util = require('util');\nvar Stream = require('stream').Stream;\nvar DelayedStream = require('delayed-stream');\n\nmodule.exports = CombinedStream;\nfunction CombinedStream() {\n  this.writable = false;\n  this.readable = true;\n  this.dataSize = 0;\n  this.maxDataSize = 2 * 1024 * 1024;\n  this.pauseStreams = true;\n\n  this._released = false;\n  this._streams = [];\n  this._currentStream = null;\n  this._insideLoop = false;\n  this._pendingNext = false;\n}\nutil.inherits(CombinedStream, Stream);\n\nCombinedStream.create = function(options) {\n  var combinedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    combinedStream[option] = options[option];\n  }\n\n  return combinedStream;\n};\n\nCombinedStream.isStreamLike = function(stream) {\n  return (typeof stream !== 'function')\n    && (typeof stream !== 'string')\n    && (typeof stream !== 'boolean')\n    && (typeof stream !== 'number')\n    && (!Buffer.isBuffer(stream));\n};\n\nCombinedStream.prototype.append = function(stream) {\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n\n  if (isStreamLike) {\n    if (!(stream instanceof DelayedStream)) {\n      var newStream = DelayedStream.create(stream, {\n        maxDataSize: Infinity,\n        pauseStream: this.pauseStreams,\n      });\n      stream.on('data', this._checkDataSize.bind(this));\n      stream = newStream;\n    }\n\n    this._handleErrors(stream);\n\n    if (this.pauseStreams) {\n      stream.pause();\n    }\n  }\n\n  this._streams.push(stream);\n  return this;\n};\n\nCombinedStream.prototype.pipe = function(dest, options) {\n  Stream.prototype.pipe.call(this, dest, options);\n  this.resume();\n  return dest;\n};\n\nCombinedStream.prototype._getNext = function() {\n  this._currentStream = null;\n\n  if (this._insideLoop) {\n    this._pendingNext = true;\n    return; // defer call\n  }\n\n  this._insideLoop = true;\n  try {\n    do {\n      this._pendingNext = false;\n      this._realGetNext();\n    } while (this._pendingNext);\n  } finally {\n    this._insideLoop = false;\n  }\n};\n\nCombinedStream.prototype._realGetNext = function() {\n  var stream = this._streams.shift();\n\n\n  if (typeof stream == 'undefined') {\n    this.end();\n    return;\n  }\n\n  if (typeof stream !== 'function') {\n    this._pipeNext(stream);\n    return;\n  }\n\n  var getStream = stream;\n  getStream(function(stream) {\n    var isStreamLike = CombinedStream.isStreamLike(stream);\n    if (isStreamLike) {\n      stream.on('data', this._checkDataSize.bind(this));\n      this._handleErrors(stream);\n    }\n\n    this._pipeNext(stream);\n  }.bind(this));\n};\n\nCombinedStream.prototype._pipeNext = function(stream) {\n  this._currentStream = stream;\n\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n  if (isStreamLike) {\n    stream.on('end', this._getNext.bind(this));\n    stream.pipe(this, {end: false});\n    return;\n  }\n\n  var value = stream;\n  this.write(value);\n  this._getNext();\n};\n\nCombinedStream.prototype._handleErrors = function(stream) {\n  var self = this;\n  stream.on('error', function(err) {\n    self._emitError(err);\n  });\n};\n\nCombinedStream.prototype.write = function(data) {\n  this.emit('data', data);\n};\n\nCombinedStream.prototype.pause = function() {\n  if (!this.pauseStreams) {\n    return;\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();\n  this.emit('pause');\n};\n\nCombinedStream.prototype.resume = function() {\n  if (!this._released) {\n    this._released = true;\n    this.writable = true;\n    this._getNext();\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();\n  this.emit('resume');\n};\n\nCombinedStream.prototype.end = function() {\n  this._reset();\n  this.emit('end');\n};\n\nCombinedStream.prototype.destroy = function() {\n  this._reset();\n  this.emit('close');\n};\n\nCombinedStream.prototype._reset = function() {\n  this.writable = false;\n  this._streams = [];\n  this._currentStream = null;\n};\n\nCombinedStream.prototype._checkDataSize = function() {\n  this._updateDataSize();\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';\n  this._emitError(new Error(message));\n};\n\nCombinedStream.prototype._updateDataSize = function() {\n  this.dataSize = 0;\n\n  var self = this;\n  this._streams.forEach(function(stream) {\n    if (!stream.dataSize) {\n      return;\n    }\n\n    self.dataSize += stream.dataSize;\n  });\n\n  if (this._currentStream && this._currentStream.dataSize) {\n    this.dataSize += this._currentStream.dataSize;\n  }\n};\n\nCombinedStream.prototype._emitError = function(err) {\n  this._reset();\n  this.emit('error', err);\n};\n", "{\n  \"application/1d-interleaved-parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"application/3gpdash-qoe-report+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/3gpp-ims+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/3gpphal+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/3gpphalforms+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/a2l\": {\n    \"source\": \"iana\"\n  },\n  \"application/ace+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/activemessage\": {\n    \"source\": \"iana\"\n  },\n  \"application/activity+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-costmap+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-costmapfilter+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-directory+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-endpointcost+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-endpointcostparams+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-endpointprop+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-endpointpropparams+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-error+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-networkmap+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-networkmapfilter+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-updatestreamcontrol+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/alto-updatestreamparams+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/aml\": {\n    \"source\": \"iana\"\n  },\n  \"application/andrew-inset\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ez\"]\n  },\n  \"application/applefile\": {\n    \"source\": \"iana\"\n  },\n  \"application/applixware\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"aw\"]\n  },\n  \"application/at+jwt\": {\n    \"source\": \"iana\"\n  },\n  \"application/atf\": {\n    \"source\": \"iana\"\n  },\n  \"application/atfx\": {\n    \"source\": \"iana\"\n  },\n  \"application/atom+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"atom\"]\n  },\n  \"application/atomcat+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"atomcat\"]\n  },\n  \"application/atomdeleted+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"atomdeleted\"]\n  },\n  \"application/atomicmail\": {\n    \"source\": \"iana\"\n  },\n  \"application/atomsvc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"atomsvc\"]\n  },\n  \"application/atsc-dwd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"dwd\"]\n  },\n  \"application/atsc-dynamic-event-message\": {\n    \"source\": \"iana\"\n  },\n  \"application/atsc-held+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"held\"]\n  },\n  \"application/atsc-rdt+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/atsc-rsat+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rsat\"]\n  },\n  \"application/atxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/auth-policy+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/bacnet-xdd+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/batch-smtp\": {\n    \"source\": \"iana\"\n  },\n  \"application/bdoc\": {\n    \"compressible\": false,\n    \"extensions\": [\"bdoc\"]\n  },\n  \"application/beep+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/calendar+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/calendar+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xcs\"]\n  },\n  \"application/call-completion\": {\n    \"source\": \"iana\"\n  },\n  \"application/cals-1840\": {\n    \"source\": \"iana\"\n  },\n  \"application/captive+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/cbor-seq\": {\n    \"source\": \"iana\"\n  },\n  \"application/cccex\": {\n    \"source\": \"iana\"\n  },\n  \"application/ccmp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/ccxml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ccxml\"]\n  },\n  \"application/cdfx+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"cdfx\"]\n  },\n  \"application/cdmi-capability\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdmia\"]\n  },\n  \"application/cdmi-container\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdmic\"]\n  },\n  \"application/cdmi-domain\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdmid\"]\n  },\n  \"application/cdmi-object\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdmio\"]\n  },\n  \"application/cdmi-queue\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdmiq\"]\n  },\n  \"application/cdni\": {\n    \"source\": \"iana\"\n  },\n  \"application/cea\": {\n    \"source\": \"iana\"\n  },\n  \"application/cea-2018+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cellml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cfw\": {\n    \"source\": \"iana\"\n  },\n  \"application/city+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/clr\": {\n    \"source\": \"iana\"\n  },\n  \"application/clue+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/clue_info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cms\": {\n    \"source\": \"iana\"\n  },\n  \"application/cnrp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/coap-group+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/coap-payload\": {\n    \"source\": \"iana\"\n  },\n  \"application/commonground\": {\n    \"source\": \"iana\"\n  },\n  \"application/conference-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cose\": {\n    \"source\": \"iana\"\n  },\n  \"application/cose-key\": {\n    \"source\": \"iana\"\n  },\n  \"application/cose-key-set\": {\n    \"source\": \"iana\"\n  },\n  \"application/cpl+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"cpl\"]\n  },\n  \"application/csrattrs\": {\n    \"source\": \"iana\"\n  },\n  \"application/csta+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cstadata+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/csvm+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/cu-seeme\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cu\"]\n  },\n  \"application/cwt\": {\n    \"source\": \"iana\"\n  },\n  \"application/cybercash\": {\n    \"source\": \"iana\"\n  },\n  \"application/dart\": {\n    \"compressible\": true\n  },\n  \"application/dash+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mpd\"]\n  },\n  \"application/dash-patch+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mpp\"]\n  },\n  \"application/dashdelta\": {\n    \"source\": \"iana\"\n  },\n  \"application/davmount+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"davmount\"]\n  },\n  \"application/dca-rft\": {\n    \"source\": \"iana\"\n  },\n  \"application/dcd\": {\n    \"source\": \"iana\"\n  },\n  \"application/dec-dx\": {\n    \"source\": \"iana\"\n  },\n  \"application/dialog-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/dicom\": {\n    \"source\": \"iana\"\n  },\n  \"application/dicom+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/dicom+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/dii\": {\n    \"source\": \"iana\"\n  },\n  \"application/dit\": {\n    \"source\": \"iana\"\n  },\n  \"application/dns\": {\n    \"source\": \"iana\"\n  },\n  \"application/dns+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/dns-message\": {\n    \"source\": \"iana\"\n  },\n  \"application/docbook+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"dbk\"]\n  },\n  \"application/dots+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/dskpp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/dssc+der\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dssc\"]\n  },\n  \"application/dssc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xdssc\"]\n  },\n  \"application/dvcs\": {\n    \"source\": \"iana\"\n  },\n  \"application/ecmascript\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"es\",\"ecma\"]\n  },\n  \"application/edi-consent\": {\n    \"source\": \"iana\"\n  },\n  \"application/edi-x12\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/edifact\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/efi\": {\n    \"source\": \"iana\"\n  },\n  \"application/elm+json\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/elm+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.cap+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.comment+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.control+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.deviceinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.ecall.msd\": {\n    \"source\": \"iana\"\n  },\n  \"application/emergencycalldata.providerinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.serviceinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.subscriberinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emergencycalldata.veds+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/emma+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"emma\"]\n  },\n  \"application/emotionml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"emotionml\"]\n  },\n  \"application/encaprtp\": {\n    \"source\": \"iana\"\n  },\n  \"application/epp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/epub+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"epub\"]\n  },\n  \"application/eshop\": {\n    \"source\": \"iana\"\n  },\n  \"application/exi\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"exi\"]\n  },\n  \"application/expect-ct-report+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/express\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"exp\"]\n  },\n  \"application/fastinfoset\": {\n    \"source\": \"iana\"\n  },\n  \"application/fastsoap\": {\n    \"source\": \"iana\"\n  },\n  \"application/fdt+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"fdt\"]\n  },\n  \"application/fhir+json\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/fhir+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/fido.trusted-apps+json\": {\n    \"compressible\": true\n  },\n  \"application/fits\": {\n    \"source\": \"iana\"\n  },\n  \"application/flexfec\": {\n    \"source\": \"iana\"\n  },\n  \"application/font-sfnt\": {\n    \"source\": \"iana\"\n  },\n  \"application/font-tdpfr\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pfr\"]\n  },\n  \"application/font-woff\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/framework-attributes+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/geo+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"geojson\"]\n  },\n  \"application/geo+json-seq\": {\n    \"source\": \"iana\"\n  },\n  \"application/geopackage+sqlite3\": {\n    \"source\": \"iana\"\n  },\n  \"application/geoxacml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/gltf-buffer\": {\n    \"source\": \"iana\"\n  },\n  \"application/gml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"gml\"]\n  },\n  \"application/gpx+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"gpx\"]\n  },\n  \"application/gxf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gxf\"]\n  },\n  \"application/gzip\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"gz\"]\n  },\n  \"application/h224\": {\n    \"source\": \"iana\"\n  },\n  \"application/held+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/hjson\": {\n    \"extensions\": [\"hjson\"]\n  },\n  \"application/http\": {\n    \"source\": \"iana\"\n  },\n  \"application/hyperstudio\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"stk\"]\n  },\n  \"application/ibe-key-request+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/ibe-pkg-reply+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/ibe-pp-data\": {\n    \"source\": \"iana\"\n  },\n  \"application/iges\": {\n    \"source\": \"iana\"\n  },\n  \"application/im-iscomposing+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/index\": {\n    \"source\": \"iana\"\n  },\n  \"application/index.cmd\": {\n    \"source\": \"iana\"\n  },\n  \"application/index.obj\": {\n    \"source\": \"iana\"\n  },\n  \"application/index.response\": {\n    \"source\": \"iana\"\n  },\n  \"application/index.vnd\": {\n    \"source\": \"iana\"\n  },\n  \"application/inkml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ink\",\"inkml\"]\n  },\n  \"application/iotp\": {\n    \"source\": \"iana\"\n  },\n  \"application/ipfix\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ipfix\"]\n  },\n  \"application/ipp\": {\n    \"source\": \"iana\"\n  },\n  \"application/isup\": {\n    \"source\": \"iana\"\n  },\n  \"application/its+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"its\"]\n  },\n  \"application/java-archive\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"jar\",\"war\",\"ear\"]\n  },\n  \"application/java-serialized-object\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"ser\"]\n  },\n  \"application/java-vm\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"class\"]\n  },\n  \"application/javascript\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"js\",\"mjs\"]\n  },\n  \"application/jf2feed+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/jose\": {\n    \"source\": \"iana\"\n  },\n  \"application/jose+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/jrd+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/jscalendar+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/json\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"json\",\"map\"]\n  },\n  \"application/json-patch+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/json-seq\": {\n    \"source\": \"iana\"\n  },\n  \"application/json5\": {\n    \"extensions\": [\"json5\"]\n  },\n  \"application/jsonml+json\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"jsonml\"]\n  },\n  \"application/jwk+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/jwk-set+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/jwt\": {\n    \"source\": \"iana\"\n  },\n  \"application/kpml-request+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/kpml-response+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/ld+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"jsonld\"]\n  },\n  \"application/lgr+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"lgr\"]\n  },\n  \"application/link-format\": {\n    \"source\": \"iana\"\n  },\n  \"application/load-control+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/lost+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"lostxml\"]\n  },\n  \"application/lostsync+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/lpf+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/lxf\": {\n    \"source\": \"iana\"\n  },\n  \"application/mac-binhex40\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hqx\"]\n  },\n  \"application/mac-compactpro\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cpt\"]\n  },\n  \"application/macwriteii\": {\n    \"source\": \"iana\"\n  },\n  \"application/mads+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mads\"]\n  },\n  \"application/manifest+json\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"webmanifest\"]\n  },\n  \"application/marc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mrc\"]\n  },\n  \"application/marcxml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mrcx\"]\n  },\n  \"application/mathematica\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ma\",\"nb\",\"mb\"]\n  },\n  \"application/mathml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mathml\"]\n  },\n  \"application/mathml-content+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mathml-presentation+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-associated-procedure-description+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-deregister+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-envelope+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-msk+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-msk-response+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-protection-description+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-reception-report+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-register+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-register-response+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-schedule+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbms-user-service-description+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mbox\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mbox\"]\n  },\n  \"application/media-policy-dataset+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mpf\"]\n  },\n  \"application/media_control+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mediaservercontrol+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mscml\"]\n  },\n  \"application/merge-patch+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/metalink+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"metalink\"]\n  },\n  \"application/metalink4+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"meta4\"]\n  },\n  \"application/mets+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mets\"]\n  },\n  \"application/mf4\": {\n    \"source\": \"iana\"\n  },\n  \"application/mikey\": {\n    \"source\": \"iana\"\n  },\n  \"application/mipc\": {\n    \"source\": \"iana\"\n  },\n  \"application/missing-blocks+cbor-seq\": {\n    \"source\": \"iana\"\n  },\n  \"application/mmt-aei+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"maei\"]\n  },\n  \"application/mmt-usd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"musd\"]\n  },\n  \"application/mods+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mods\"]\n  },\n  \"application/moss-keys\": {\n    \"source\": \"iana\"\n  },\n  \"application/moss-signature\": {\n    \"source\": \"iana\"\n  },\n  \"application/mosskey-data\": {\n    \"source\": \"iana\"\n  },\n  \"application/mosskey-request\": {\n    \"source\": \"iana\"\n  },\n  \"application/mp21\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"m21\",\"mp21\"]\n  },\n  \"application/mp4\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mp4s\",\"m4p\"]\n  },\n  \"application/mpeg4-generic\": {\n    \"source\": \"iana\"\n  },\n  \"application/mpeg4-iod\": {\n    \"source\": \"iana\"\n  },\n  \"application/mpeg4-iod-xmt\": {\n    \"source\": \"iana\"\n  },\n  \"application/mrb-consumer+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/mrb-publish+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/msc-ivr+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/msc-mixer+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/msword\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"doc\",\"dot\"]\n  },\n  \"application/mud+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/multipart-core\": {\n    \"source\": \"iana\"\n  },\n  \"application/mxf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mxf\"]\n  },\n  \"application/n-quads\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nq\"]\n  },\n  \"application/n-triples\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nt\"]\n  },\n  \"application/nasdata\": {\n    \"source\": \"iana\"\n  },\n  \"application/news-checkgroups\": {\n    \"source\": \"iana\",\n    \"charset\": \"US-ASCII\"\n  },\n  \"application/news-groupinfo\": {\n    \"source\": \"iana\",\n    \"charset\": \"US-ASCII\"\n  },\n  \"application/news-transmission\": {\n    \"source\": \"iana\"\n  },\n  \"application/nlsml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/node\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cjs\"]\n  },\n  \"application/nss\": {\n    \"source\": \"iana\"\n  },\n  \"application/oauth-authz-req+jwt\": {\n    \"source\": \"iana\"\n  },\n  \"application/oblivious-dns-message\": {\n    \"source\": \"iana\"\n  },\n  \"application/ocsp-request\": {\n    \"source\": \"iana\"\n  },\n  \"application/ocsp-response\": {\n    \"source\": \"iana\"\n  },\n  \"application/octet-stream\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"bin\",\"dms\",\"lrf\",\"mar\",\"so\",\"dist\",\"distz\",\"pkg\",\"bpk\",\"dump\",\"elc\",\"deploy\",\"exe\",\"dll\",\"deb\",\"dmg\",\"iso\",\"img\",\"msi\",\"msp\",\"msm\",\"buffer\"]\n  },\n  \"application/oda\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oda\"]\n  },\n  \"application/odm+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/odx\": {\n    \"source\": \"iana\"\n  },\n  \"application/oebps-package+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"opf\"]\n  },\n  \"application/ogg\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"ogx\"]\n  },\n  \"application/omdoc+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"omdoc\"]\n  },\n  \"application/onenote\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"onetoc\",\"onetoc2\",\"onetmp\",\"onepkg\"]\n  },\n  \"application/opc-nodeset+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/oscore\": {\n    \"source\": \"iana\"\n  },\n  \"application/oxps\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oxps\"]\n  },\n  \"application/p21\": {\n    \"source\": \"iana\"\n  },\n  \"application/p21+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/p2p-overlay+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"relo\"]\n  },\n  \"application/parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"application/passport\": {\n    \"source\": \"iana\"\n  },\n  \"application/patch-ops-error+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xer\"]\n  },\n  \"application/pdf\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"pdf\"]\n  },\n  \"application/pdx\": {\n    \"source\": \"iana\"\n  },\n  \"application/pem-certificate-chain\": {\n    \"source\": \"iana\"\n  },\n  \"application/pgp-encrypted\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"pgp\"]\n  },\n  \"application/pgp-keys\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"asc\"]\n  },\n  \"application/pgp-signature\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"asc\",\"sig\"]\n  },\n  \"application/pics-rules\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"prf\"]\n  },\n  \"application/pidf+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/pidf-diff+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/pkcs10\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"p10\"]\n  },\n  \"application/pkcs12\": {\n    \"source\": \"iana\"\n  },\n  \"application/pkcs7-mime\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"p7m\",\"p7c\"]\n  },\n  \"application/pkcs7-signature\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"p7s\"]\n  },\n  \"application/pkcs8\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"p8\"]\n  },\n  \"application/pkcs8-encrypted\": {\n    \"source\": \"iana\"\n  },\n  \"application/pkix-attr-cert\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ac\"]\n  },\n  \"application/pkix-cert\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cer\"]\n  },\n  \"application/pkix-crl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"crl\"]\n  },\n  \"application/pkix-pkipath\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pkipath\"]\n  },\n  \"application/pkixcmp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pki\"]\n  },\n  \"application/pls+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"pls\"]\n  },\n  \"application/poc-settings+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/postscript\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ai\",\"eps\",\"ps\"]\n  },\n  \"application/ppsp-tracker+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/problem+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/problem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/provenance+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"provx\"]\n  },\n  \"application/prs.alvestrand.titrax-sheet\": {\n    \"source\": \"iana\"\n  },\n  \"application/prs.cww\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cww\"]\n  },\n  \"application/prs.cyn\": {\n    \"source\": \"iana\",\n    \"charset\": \"7-BIT\"\n  },\n  \"application/prs.hpub+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/prs.nprend\": {\n    \"source\": \"iana\"\n  },\n  \"application/prs.plucker\": {\n    \"source\": \"iana\"\n  },\n  \"application/prs.rdf-xml-crypt\": {\n    \"source\": \"iana\"\n  },\n  \"application/prs.xsf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/pskc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"pskcxml\"]\n  },\n  \"application/pvd+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/qsig\": {\n    \"source\": \"iana\"\n  },\n  \"application/raml+yaml\": {\n    \"compressible\": true,\n    \"extensions\": [\"raml\"]\n  },\n  \"application/raptorfec\": {\n    \"source\": \"iana\"\n  },\n  \"application/rdap+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/rdf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rdf\",\"owl\"]\n  },\n  \"application/reginfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rif\"]\n  },\n  \"application/relax-ng-compact-syntax\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rnc\"]\n  },\n  \"application/remote-printing\": {\n    \"source\": \"iana\"\n  },\n  \"application/reputon+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/resource-lists+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rl\"]\n  },\n  \"application/resource-lists-diff+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rld\"]\n  },\n  \"application/rfc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/riscos\": {\n    \"source\": \"iana\"\n  },\n  \"application/rlmi+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/rls-services+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rs\"]\n  },\n  \"application/route-apd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rapd\"]\n  },\n  \"application/route-s-tsid+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"sls\"]\n  },\n  \"application/route-usd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rusd\"]\n  },\n  \"application/rpki-ghostbusters\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gbr\"]\n  },\n  \"application/rpki-manifest\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mft\"]\n  },\n  \"application/rpki-publication\": {\n    \"source\": \"iana\"\n  },\n  \"application/rpki-roa\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"roa\"]\n  },\n  \"application/rpki-updown\": {\n    \"source\": \"iana\"\n  },\n  \"application/rsd+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"rsd\"]\n  },\n  \"application/rss+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"rss\"]\n  },\n  \"application/rtf\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rtf\"]\n  },\n  \"application/rtploopback\": {\n    \"source\": \"iana\"\n  },\n  \"application/rtx\": {\n    \"source\": \"iana\"\n  },\n  \"application/samlassertion+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/samlmetadata+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sarif+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sarif-external-properties+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sbe\": {\n    \"source\": \"iana\"\n  },\n  \"application/sbml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"sbml\"]\n  },\n  \"application/scaip+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/scim+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/scvp-cv-request\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"scq\"]\n  },\n  \"application/scvp-cv-response\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"scs\"]\n  },\n  \"application/scvp-vp-request\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"spq\"]\n  },\n  \"application/scvp-vp-response\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"spp\"]\n  },\n  \"application/sdp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sdp\"]\n  },\n  \"application/secevent+jwt\": {\n    \"source\": \"iana\"\n  },\n  \"application/senml+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/senml+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/senml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"senmlx\"]\n  },\n  \"application/senml-etch+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/senml-etch+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/senml-exi\": {\n    \"source\": \"iana\"\n  },\n  \"application/sensml+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/sensml+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sensml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"sensmlx\"]\n  },\n  \"application/sensml-exi\": {\n    \"source\": \"iana\"\n  },\n  \"application/sep+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sep-exi\": {\n    \"source\": \"iana\"\n  },\n  \"application/session-info\": {\n    \"source\": \"iana\"\n  },\n  \"application/set-payment\": {\n    \"source\": \"iana\"\n  },\n  \"application/set-payment-initiation\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"setpay\"]\n  },\n  \"application/set-registration\": {\n    \"source\": \"iana\"\n  },\n  \"application/set-registration-initiation\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"setreg\"]\n  },\n  \"application/sgml\": {\n    \"source\": \"iana\"\n  },\n  \"application/sgml-open-catalog\": {\n    \"source\": \"iana\"\n  },\n  \"application/shf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"shf\"]\n  },\n  \"application/sieve\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"siv\",\"sieve\"]\n  },\n  \"application/simple-filter+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/simple-message-summary\": {\n    \"source\": \"iana\"\n  },\n  \"application/simplesymbolcontainer\": {\n    \"source\": \"iana\"\n  },\n  \"application/sipc\": {\n    \"source\": \"iana\"\n  },\n  \"application/slate\": {\n    \"source\": \"iana\"\n  },\n  \"application/smil\": {\n    \"source\": \"iana\"\n  },\n  \"application/smil+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"smi\",\"smil\"]\n  },\n  \"application/smpte336m\": {\n    \"source\": \"iana\"\n  },\n  \"application/soap+fastinfoset\": {\n    \"source\": \"iana\"\n  },\n  \"application/soap+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sparql-query\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rq\"]\n  },\n  \"application/sparql-results+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"srx\"]\n  },\n  \"application/spdx+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/spirits-event+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/sql\": {\n    \"source\": \"iana\"\n  },\n  \"application/srgs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gram\"]\n  },\n  \"application/srgs+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"grxml\"]\n  },\n  \"application/sru+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"sru\"]\n  },\n  \"application/ssdl+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"ssdl\"]\n  },\n  \"application/ssml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ssml\"]\n  },\n  \"application/stix+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/swid+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"swidtag\"]\n  },\n  \"application/tamp-apex-update\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-apex-update-confirm\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-community-update\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-community-update-confirm\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-error\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-sequence-adjust\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-sequence-adjust-confirm\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-status-query\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-status-response\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-update\": {\n    \"source\": \"iana\"\n  },\n  \"application/tamp-update-confirm\": {\n    \"source\": \"iana\"\n  },\n  \"application/tar\": {\n    \"compressible\": true\n  },\n  \"application/taxii+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/td+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/tei+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"tei\",\"teicorpus\"]\n  },\n  \"application/tetra_isi\": {\n    \"source\": \"iana\"\n  },\n  \"application/thraud+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"tfi\"]\n  },\n  \"application/timestamp-query\": {\n    \"source\": \"iana\"\n  },\n  \"application/timestamp-reply\": {\n    \"source\": \"iana\"\n  },\n  \"application/timestamped-data\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tsd\"]\n  },\n  \"application/tlsrpt+gzip\": {\n    \"source\": \"iana\"\n  },\n  \"application/tlsrpt+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/tnauthlist\": {\n    \"source\": \"iana\"\n  },\n  \"application/token-introspection+jwt\": {\n    \"source\": \"iana\"\n  },\n  \"application/toml\": {\n    \"compressible\": true,\n    \"extensions\": [\"toml\"]\n  },\n  \"application/trickle-ice-sdpfrag\": {\n    \"source\": \"iana\"\n  },\n  \"application/trig\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"trig\"]\n  },\n  \"application/ttml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ttml\"]\n  },\n  \"application/tve-trigger\": {\n    \"source\": \"iana\"\n  },\n  \"application/tzif\": {\n    \"source\": \"iana\"\n  },\n  \"application/tzif-leap\": {\n    \"source\": \"iana\"\n  },\n  \"application/ubjson\": {\n    \"compressible\": false,\n    \"extensions\": [\"ubj\"]\n  },\n  \"application/ulpfec\": {\n    \"source\": \"iana\"\n  },\n  \"application/urc-grpsheet+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/urc-ressheet+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rsheet\"]\n  },\n  \"application/urc-targetdesc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"td\"]\n  },\n  \"application/urc-uisocketdesc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vcard+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vcard+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vemmi\": {\n    \"source\": \"iana\"\n  },\n  \"application/vividence.scriptfile\": {\n    \"source\": \"apache\"\n  },\n  \"application/vnd.1000minds.decision-model+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"1km\"]\n  },\n  \"application/vnd.3gpp-prose+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp-prose-pc3ch+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp-v2x-local-service-information\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.5gnas\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.access-transfer-events+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.bsf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.gmop+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.gtpc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.interworking-data\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.lpp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.mc-signalling-ear\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.mcdata-affiliation-command+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcdata-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcdata-payload\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.mcdata-service-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcdata-signalling\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.mcdata-ue-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcdata-user-profile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-affiliation-command+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-floor-request+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-location-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-mbms-usage-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-service-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-signed+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-ue-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-ue-init-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcptt-user-profile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-affiliation-command+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-affiliation-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-location-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-mbms-usage-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-service-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-transmission-request+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-ue-config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mcvideo-user-profile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.mid-call+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.ngap\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.pfcp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.pic-bw-large\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"plb\"]\n  },\n  \"application/vnd.3gpp.pic-bw-small\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"psb\"]\n  },\n  \"application/vnd.3gpp.pic-bw-var\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pvb\"]\n  },\n  \"application/vnd.3gpp.s1ap\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.sms\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp.sms+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.srvcc-ext+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.srvcc-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.state-and-event-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp.ussd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp2.bcmcsinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.3gpp2.sms\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3gpp2.tcap\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tcap\"]\n  },\n  \"application/vnd.3lightssoftware.imagescal\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.3m.post-it-notes\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pwn\"]\n  },\n  \"application/vnd.accpac.simply.aso\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"aso\"]\n  },\n  \"application/vnd.accpac.simply.imp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"imp\"]\n  },\n  \"application/vnd.acucobol\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"acu\"]\n  },\n  \"application/vnd.acucorp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"atc\",\"acutc\"]\n  },\n  \"application/vnd.adobe.air-application-installer-package+zip\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"air\"]\n  },\n  \"application/vnd.adobe.flash.movie\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.adobe.formscentral.fcdt\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fcdt\"]\n  },\n  \"application/vnd.adobe.fxp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fxp\",\"fxpl\"]\n  },\n  \"application/vnd.adobe.partial-upload\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.adobe.xdp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xdp\"]\n  },\n  \"application/vnd.adobe.xfdf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xfdf\"]\n  },\n  \"application/vnd.aether.imp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.afplinedata\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.afplinedata-pagedef\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.cmoca-cmresource\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.foca-charset\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.foca-codedfont\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.foca-codepage\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca-cmtable\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca-formdef\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca-mediummap\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca-objectcontainer\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca-overlay\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.afpc.modca-pagesegment\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.age\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"age\"]\n  },\n  \"application/vnd.ah-barcode\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ahead.space\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ahead\"]\n  },\n  \"application/vnd.airzip.filesecure.azf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"azf\"]\n  },\n  \"application/vnd.airzip.filesecure.azs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"azs\"]\n  },\n  \"application/vnd.amadeus+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.amazon.ebook\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"azw\"]\n  },\n  \"application/vnd.amazon.mobi8-ebook\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.americandynamics.acc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"acc\"]\n  },\n  \"application/vnd.amiga.ami\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ami\"]\n  },\n  \"application/vnd.amundsen.maze+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.android.ota\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.android.package-archive\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"apk\"]\n  },\n  \"application/vnd.anki\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.anser-web-certificate-issue-initiation\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cii\"]\n  },\n  \"application/vnd.anser-web-funds-transfer-initiation\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"fti\"]\n  },\n  \"application/vnd.antix.game-component\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"atx\"]\n  },\n  \"application/vnd.apache.arrow.file\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.apache.arrow.stream\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.apache.thrift.binary\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.apache.thrift.compact\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.apache.thrift.json\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.api+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.aplextor.warrp+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.apothekende.reservation+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.apple.installer+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mpkg\"]\n  },\n  \"application/vnd.apple.keynote\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"key\"]\n  },\n  \"application/vnd.apple.mpegurl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"m3u8\"]\n  },\n  \"application/vnd.apple.numbers\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"numbers\"]\n  },\n  \"application/vnd.apple.pages\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pages\"]\n  },\n  \"application/vnd.apple.pkpass\": {\n    \"compressible\": false,\n    \"extensions\": [\"pkpass\"]\n  },\n  \"application/vnd.arastra.swi\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.aristanetworks.swi\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"swi\"]\n  },\n  \"application/vnd.artisan+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.artsquare\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.astraea-software.iota\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"iota\"]\n  },\n  \"application/vnd.audiograph\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"aep\"]\n  },\n  \"application/vnd.autopackage\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.avalon+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.avistar+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.balsamiq.bmml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"bmml\"]\n  },\n  \"application/vnd.balsamiq.bmpr\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.banana-accounting\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.bbf.usp.error\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.bbf.usp.msg\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.bbf.usp.msg+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.bekitzur-stech+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.bint.med-content\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.biopax.rdf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.blink-idb-value-wrapper\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.blueice.multipass\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mpm\"]\n  },\n  \"application/vnd.bluetooth.ep.oob\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.bluetooth.le.oob\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.bmi\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"bmi\"]\n  },\n  \"application/vnd.bpf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.bpf3\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.businessobjects\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rep\"]\n  },\n  \"application/vnd.byu.uapi+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.cab-jscript\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.canon-cpdl\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.canon-lips\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.capasystems-pg+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.cendio.thinlinc.clientconf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.century-systems.tcp_stream\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.chemdraw+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"cdxml\"]\n  },\n  \"application/vnd.chess-pgn\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.chipnuts.karaoke-mmd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mmd\"]\n  },\n  \"application/vnd.ciedi\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cinderella\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdy\"]\n  },\n  \"application/vnd.cirpack.isdn-ext\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.citationstyles.style+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"csl\"]\n  },\n  \"application/vnd.claymore\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cla\"]\n  },\n  \"application/vnd.cloanto.rp9\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rp9\"]\n  },\n  \"application/vnd.clonk.c4group\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"c4g\",\"c4d\",\"c4f\",\"c4p\",\"c4u\"]\n  },\n  \"application/vnd.cluetrust.cartomobile-config\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"c11amc\"]\n  },\n  \"application/vnd.cluetrust.cartomobile-config-pkg\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"c11amz\"]\n  },\n  \"application/vnd.coffeescript\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collabio.xodocuments.document\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collabio.xodocuments.document-template\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collabio.xodocuments.presentation\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collabio.xodocuments.presentation-template\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collabio.xodocuments.spreadsheet\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collabio.xodocuments.spreadsheet-template\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.collection+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.collection.doc+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.collection.next+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.comicbook+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.comicbook-rar\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.commerce-battelle\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.commonspace\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"csp\"]\n  },\n  \"application/vnd.contact.cmsg\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdbcmsg\"]\n  },\n  \"application/vnd.coreos.ignition+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.cosmocaller\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cmc\"]\n  },\n  \"application/vnd.crick.clicker\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"clkx\"]\n  },\n  \"application/vnd.crick.clicker.keyboard\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"clkk\"]\n  },\n  \"application/vnd.crick.clicker.palette\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"clkp\"]\n  },\n  \"application/vnd.crick.clicker.template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"clkt\"]\n  },\n  \"application/vnd.crick.clicker.wordbank\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"clkw\"]\n  },\n  \"application/vnd.criticaltools.wbs+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"wbs\"]\n  },\n  \"application/vnd.cryptii.pipe+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.crypto-shade-file\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cryptomator.encrypted\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cryptomator.vault\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ctc-posml\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pml\"]\n  },\n  \"application/vnd.ctct.ws+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.cups-pdf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cups-postscript\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cups-ppd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ppd\"]\n  },\n  \"application/vnd.cups-raster\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cups-raw\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.curl\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.curl.car\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"car\"]\n  },\n  \"application/vnd.curl.pcurl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pcurl\"]\n  },\n  \"application/vnd.cyan.dean.root+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.cybank\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.cyclonedx+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.cyclonedx+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.d2l.coursepackage1p0+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.d3m-dataset\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.d3m-problem\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dart\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"dart\"]\n  },\n  \"application/vnd.data-vision.rdz\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rdz\"]\n  },\n  \"application/vnd.datapackage+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dataresource+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dbf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dbf\"]\n  },\n  \"application/vnd.debian.binary-package\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dece.data\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvf\",\"uvvf\",\"uvd\",\"uvvd\"]\n  },\n  \"application/vnd.dece.ttml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"uvt\",\"uvvt\"]\n  },\n  \"application/vnd.dece.unspecified\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvx\",\"uvvx\"]\n  },\n  \"application/vnd.dece.zip\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvz\",\"uvvz\"]\n  },\n  \"application/vnd.denovo.fcselayout-link\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fe_launch\"]\n  },\n  \"application/vnd.desmume.movie\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dir-bi.plate-dl-nosuffix\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dm.delegation+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dna\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dna\"]\n  },\n  \"application/vnd.document+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dolby.mlp\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mlp\"]\n  },\n  \"application/vnd.dolby.mobile.1\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dolby.mobile.2\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.doremir.scorecloud-binary-document\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dpgraph\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dpg\"]\n  },\n  \"application/vnd.dreamfactory\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dfac\"]\n  },\n  \"application/vnd.drive+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ds-keypoint\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"kpxx\"]\n  },\n  \"application/vnd.dtg.local\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dtg.local.flash\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dtg.local.html\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.ait\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ait\"]\n  },\n  \"application/vnd.dvb.dvbisl+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.dvbj\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.esgcontainer\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.ipdcdftnotifaccess\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.ipdcesgaccess\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.ipdcesgaccess2\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.ipdcesgpdd\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.ipdcroaming\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.iptv.alfec-base\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.iptv.alfec-enhancement\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.notif-aggregate-root+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.notif-container+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.notif-generic+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.notif-ia-msglist+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.notif-ia-registration-request+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.notif-ia-registration-response+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.notif-init+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.dvb.pfr\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dvb.service\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"svc\"]\n  },\n  \"application/vnd.dxr\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.dynageo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"geo\"]\n  },\n  \"application/vnd.dzr\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.easykaraoke.cdgdownload\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ecdis-update\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ecip.rlp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.eclipse.ditto+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ecowin.chart\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mag\"]\n  },\n  \"application/vnd.ecowin.filerequest\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ecowin.fileupdate\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ecowin.series\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ecowin.seriesrequest\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ecowin.seriesupdate\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.efi.img\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.efi.iso\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.emclient.accessrequest+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.enliven\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nml\"]\n  },\n  \"application/vnd.enphase.envoy\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.eprints.data+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.epson.esf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"esf\"]\n  },\n  \"application/vnd.epson.msf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"msf\"]\n  },\n  \"application/vnd.epson.quickanime\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"qam\"]\n  },\n  \"application/vnd.epson.salt\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"slt\"]\n  },\n  \"application/vnd.epson.ssf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ssf\"]\n  },\n  \"application/vnd.ericsson.quickcall\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.espass-espass+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.eszigno3+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"es3\",\"et3\"]\n  },\n  \"application/vnd.etsi.aoc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.asic-e+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.etsi.asic-s+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.etsi.cug+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvcommand+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvdiscovery+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvprofile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvsad-bc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvsad-cod+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvsad-npvr+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvservice+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvsync+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.iptvueprofile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.mcid+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.mheg5\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.etsi.overload-control-policy-dataset+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.pstn+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.sci+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.simservs+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.timestamp-token\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.etsi.tsl+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.etsi.tsl.der\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.eu.kasparian.car+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.eudora.data\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.evolv.ecig.profile\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.evolv.ecig.settings\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.evolv.ecig.theme\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.exstream-empower+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.exstream-package\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ezpix-album\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ez2\"]\n  },\n  \"application/vnd.ezpix-package\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ez3\"]\n  },\n  \"application/vnd.f-secure.mobile\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.familysearch.gedcom+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.fastcopy-disk-image\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fdf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fdf\"]\n  },\n  \"application/vnd.fdsn.mseed\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mseed\"]\n  },\n  \"application/vnd.fdsn.seed\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"seed\",\"dataless\"]\n  },\n  \"application/vnd.ffsns\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ficlab.flb+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.filmit.zfc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fints\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.firemonkeys.cloudcell\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.flographit\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gph\"]\n  },\n  \"application/vnd.fluxtime.clip\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ftc\"]\n  },\n  \"application/vnd.font-fontforge-sfd\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.framemaker\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fm\",\"frame\",\"maker\",\"book\"]\n  },\n  \"application/vnd.frogans.fnc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fnc\"]\n  },\n  \"application/vnd.frogans.ltf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ltf\"]\n  },\n  \"application/vnd.fsc.weblaunch\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fsc\"]\n  },\n  \"application/vnd.fujifilm.fb.docuworks\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fujifilm.fb.docuworks.binder\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fujifilm.fb.docuworks.container\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fujifilm.fb.jfi+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.fujitsu.oasys\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oas\"]\n  },\n  \"application/vnd.fujitsu.oasys2\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oa2\"]\n  },\n  \"application/vnd.fujitsu.oasys3\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oa3\"]\n  },\n  \"application/vnd.fujitsu.oasysgp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fg5\"]\n  },\n  \"application/vnd.fujitsu.oasysprs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"bh2\"]\n  },\n  \"application/vnd.fujixerox.art-ex\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fujixerox.art4\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fujixerox.ddd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ddd\"]\n  },\n  \"application/vnd.fujixerox.docuworks\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xdw\"]\n  },\n  \"application/vnd.fujixerox.docuworks.binder\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xbd\"]\n  },\n  \"application/vnd.fujixerox.docuworks.container\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fujixerox.hbpl\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.fut-misnet\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.futoin+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.futoin+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.fuzzysheet\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fzs\"]\n  },\n  \"application/vnd.genomatix.tuxedo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"txd\"]\n  },\n  \"application/vnd.gentics.grd+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.geo+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.geocube+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.geogebra.file\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ggb\"]\n  },\n  \"application/vnd.geogebra.slides\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.geogebra.tool\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ggt\"]\n  },\n  \"application/vnd.geometry-explorer\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gex\",\"gre\"]\n  },\n  \"application/vnd.geonext\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gxt\"]\n  },\n  \"application/vnd.geoplan\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"g2w\"]\n  },\n  \"application/vnd.geospace\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"g3w\"]\n  },\n  \"application/vnd.gerber\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.globalplatform.card-content-mgt\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.globalplatform.card-content-mgt-response\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.gmx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gmx\"]\n  },\n  \"application/vnd.google-apps.document\": {\n    \"compressible\": false,\n    \"extensions\": [\"gdoc\"]\n  },\n  \"application/vnd.google-apps.presentation\": {\n    \"compressible\": false,\n    \"extensions\": [\"gslides\"]\n  },\n  \"application/vnd.google-apps.spreadsheet\": {\n    \"compressible\": false,\n    \"extensions\": [\"gsheet\"]\n  },\n  \"application/vnd.google-earth.kml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"kml\"]\n  },\n  \"application/vnd.google-earth.kmz\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"kmz\"]\n  },\n  \"application/vnd.gov.sk.e-form+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.gov.sk.e-form+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.gov.sk.xmldatacontainer+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.grafeq\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gqf\",\"gqs\"]\n  },\n  \"application/vnd.gridmp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.groove-account\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gac\"]\n  },\n  \"application/vnd.groove-help\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ghf\"]\n  },\n  \"application/vnd.groove-identity-message\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gim\"]\n  },\n  \"application/vnd.groove-injector\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"grv\"]\n  },\n  \"application/vnd.groove-tool-message\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gtm\"]\n  },\n  \"application/vnd.groove-tool-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tpl\"]\n  },\n  \"application/vnd.groove-vcard\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vcg\"]\n  },\n  \"application/vnd.hal+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.hal+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"hal\"]\n  },\n  \"application/vnd.handheld-entertainment+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"zmm\"]\n  },\n  \"application/vnd.hbci\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hbci\"]\n  },\n  \"application/vnd.hc+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.hcl-bireports\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.hdt\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.heroku+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.hhe.lesson-player\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"les\"]\n  },\n  \"application/vnd.hl7cda+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/vnd.hl7v2+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/vnd.hp-hpgl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hpgl\"]\n  },\n  \"application/vnd.hp-hpid\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hpid\"]\n  },\n  \"application/vnd.hp-hps\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hps\"]\n  },\n  \"application/vnd.hp-jlyt\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jlt\"]\n  },\n  \"application/vnd.hp-pcl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pcl\"]\n  },\n  \"application/vnd.hp-pclxl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pclxl\"]\n  },\n  \"application/vnd.httphone\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.hydrostatix.sof-data\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sfd-hdstx\"]\n  },\n  \"application/vnd.hyper+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.hyper-item+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.hyperdrive+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.hzn-3d-crossword\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ibm.afplinedata\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ibm.electronic-media\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ibm.minipay\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mpy\"]\n  },\n  \"application/vnd.ibm.modcap\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"afp\",\"listafp\",\"list3820\"]\n  },\n  \"application/vnd.ibm.rights-management\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"irm\"]\n  },\n  \"application/vnd.ibm.secure-container\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sc\"]\n  },\n  \"application/vnd.iccprofile\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"icc\",\"icm\"]\n  },\n  \"application/vnd.ieee.1905\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.igloader\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"igl\"]\n  },\n  \"application/vnd.imagemeter.folder+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.imagemeter.image+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.immervision-ivp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ivp\"]\n  },\n  \"application/vnd.immervision-ivu\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ivu\"]\n  },\n  \"application/vnd.ims.imsccv1p1\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ims.imsccv1p2\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ims.imsccv1p3\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ims.lis.v2.result+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ims.lti.v2.toolconsumerprofile+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ims.lti.v2.toolproxy+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ims.lti.v2.toolproxy.id+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ims.lti.v2.toolsettings+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ims.lti.v2.toolsettings.simple+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.informedcontrol.rms+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.informix-visionary\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.infotech.project\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.infotech.project+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.innopath.wamp.notification\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.insors.igm\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"igm\"]\n  },\n  \"application/vnd.intercon.formnet\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xpw\",\"xpx\"]\n  },\n  \"application/vnd.intergeo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"i2g\"]\n  },\n  \"application/vnd.intertrust.digibox\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.intertrust.nncp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.intu.qbo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"qbo\"]\n  },\n  \"application/vnd.intu.qfx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"qfx\"]\n  },\n  \"application/vnd.iptc.g2.catalogitem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.iptc.g2.conceptitem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.iptc.g2.knowledgeitem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.iptc.g2.newsitem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.iptc.g2.newsmessage+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.iptc.g2.packageitem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.iptc.g2.planningitem+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ipunplugged.rcprofile\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rcprofile\"]\n  },\n  \"application/vnd.irepository.package+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"irp\"]\n  },\n  \"application/vnd.is-xpr\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xpr\"]\n  },\n  \"application/vnd.isac.fcs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fcs\"]\n  },\n  \"application/vnd.iso11783-10+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.jam\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jam\"]\n  },\n  \"application/vnd.japannet-directory-service\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-jpnstore-wakeup\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-payment-wakeup\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-registration\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-registration-wakeup\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-setstore-wakeup\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-verification\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.japannet-verification-wakeup\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.jcp.javame.midlet-rms\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rms\"]\n  },\n  \"application/vnd.jisp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jisp\"]\n  },\n  \"application/vnd.joost.joda-archive\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"joda\"]\n  },\n  \"application/vnd.jsk.isdn-ngn\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.kahootz\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ktz\",\"ktr\"]\n  },\n  \"application/vnd.kde.karbon\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"karbon\"]\n  },\n  \"application/vnd.kde.kchart\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"chrt\"]\n  },\n  \"application/vnd.kde.kformula\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"kfo\"]\n  },\n  \"application/vnd.kde.kivio\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"flw\"]\n  },\n  \"application/vnd.kde.kontour\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"kon\"]\n  },\n  \"application/vnd.kde.kpresenter\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"kpr\",\"kpt\"]\n  },\n  \"application/vnd.kde.kspread\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ksp\"]\n  },\n  \"application/vnd.kde.kword\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"kwd\",\"kwt\"]\n  },\n  \"application/vnd.kenameaapp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"htke\"]\n  },\n  \"application/vnd.kidspiration\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"kia\"]\n  },\n  \"application/vnd.kinar\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"kne\",\"knp\"]\n  },\n  \"application/vnd.koan\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"skp\",\"skd\",\"skt\",\"skm\"]\n  },\n  \"application/vnd.kodak-descriptor\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sse\"]\n  },\n  \"application/vnd.las\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.las.las+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.las.las+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"lasxml\"]\n  },\n  \"application/vnd.laszip\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.leap+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.liberty-request+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.llamagraphics.life-balance.desktop\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"lbd\"]\n  },\n  \"application/vnd.llamagraphics.life-balance.exchange+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"lbe\"]\n  },\n  \"application/vnd.logipipe.circuit+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.loom\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.lotus-1-2-3\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"123\"]\n  },\n  \"application/vnd.lotus-approach\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"apr\"]\n  },\n  \"application/vnd.lotus-freelance\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pre\"]\n  },\n  \"application/vnd.lotus-notes\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nsf\"]\n  },\n  \"application/vnd.lotus-organizer\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"org\"]\n  },\n  \"application/vnd.lotus-screencam\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"scm\"]\n  },\n  \"application/vnd.lotus-wordpro\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"lwp\"]\n  },\n  \"application/vnd.macports.portpkg\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"portpkg\"]\n  },\n  \"application/vnd.mapbox-vector-tile\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mvt\"]\n  },\n  \"application/vnd.marlin.drm.actiontoken+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.marlin.drm.conftoken+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.marlin.drm.license+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.marlin.drm.mdcf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mason+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.maxar.archive.3tz+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"application/vnd.maxmind.maxmind-db\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mcd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mcd\"]\n  },\n  \"application/vnd.medcalcdata\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mc1\"]\n  },\n  \"application/vnd.mediastation.cdkey\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cdkey\"]\n  },\n  \"application/vnd.meridian-slingshot\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mfer\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mwf\"]\n  },\n  \"application/vnd.mfmp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mfm\"]\n  },\n  \"application/vnd.micro+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.micrografx.flo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"flo\"]\n  },\n  \"application/vnd.micrografx.igx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"igx\"]\n  },\n  \"application/vnd.microsoft.portable-executable\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.microsoft.windows.thumbnail-cache\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.miele+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.mif\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mif\"]\n  },\n  \"application/vnd.minisoft-hp3000-save\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mitsubishi.misty-guard.trustweb\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mobius.daf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"daf\"]\n  },\n  \"application/vnd.mobius.dis\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dis\"]\n  },\n  \"application/vnd.mobius.mbk\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mbk\"]\n  },\n  \"application/vnd.mobius.mqy\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mqy\"]\n  },\n  \"application/vnd.mobius.msl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"msl\"]\n  },\n  \"application/vnd.mobius.plc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"plc\"]\n  },\n  \"application/vnd.mobius.txf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"txf\"]\n  },\n  \"application/vnd.mophun.application\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mpn\"]\n  },\n  \"application/vnd.mophun.certificate\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mpc\"]\n  },\n  \"application/vnd.motorola.flexsuite\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.flexsuite.adsi\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.flexsuite.fis\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.flexsuite.gotap\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.flexsuite.kmr\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.flexsuite.ttc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.flexsuite.wem\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.motorola.iprm\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mozilla.xul+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xul\"]\n  },\n  \"application/vnd.ms-3mfdocument\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-artgalry\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cil\"]\n  },\n  \"application/vnd.ms-asf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-cab-compressed\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cab\"]\n  },\n  \"application/vnd.ms-color.iccprofile\": {\n    \"source\": \"apache\"\n  },\n  \"application/vnd.ms-excel\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"xls\",\"xlm\",\"xla\",\"xlc\",\"xlt\",\"xlw\"]\n  },\n  \"application/vnd.ms-excel.addin.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xlam\"]\n  },\n  \"application/vnd.ms-excel.sheet.binary.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xlsb\"]\n  },\n  \"application/vnd.ms-excel.sheet.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xlsm\"]\n  },\n  \"application/vnd.ms-excel.template.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xltm\"]\n  },\n  \"application/vnd.ms-fontobject\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"eot\"]\n  },\n  \"application/vnd.ms-htmlhelp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"chm\"]\n  },\n  \"application/vnd.ms-ims\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ims\"]\n  },\n  \"application/vnd.ms-lrm\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"lrm\"]\n  },\n  \"application/vnd.ms-office.activex+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ms-officetheme\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"thmx\"]\n  },\n  \"application/vnd.ms-opentype\": {\n    \"source\": \"apache\",\n    \"compressible\": true\n  },\n  \"application/vnd.ms-outlook\": {\n    \"compressible\": false,\n    \"extensions\": [\"msg\"]\n  },\n  \"application/vnd.ms-package.obfuscated-opentype\": {\n    \"source\": \"apache\"\n  },\n  \"application/vnd.ms-pki.seccat\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cat\"]\n  },\n  \"application/vnd.ms-pki.stl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"stl\"]\n  },\n  \"application/vnd.ms-playready.initiator+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ms-powerpoint\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"ppt\",\"pps\",\"pot\"]\n  },\n  \"application/vnd.ms-powerpoint.addin.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ppam\"]\n  },\n  \"application/vnd.ms-powerpoint.presentation.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pptm\"]\n  },\n  \"application/vnd.ms-powerpoint.slide.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sldm\"]\n  },\n  \"application/vnd.ms-powerpoint.slideshow.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ppsm\"]\n  },\n  \"application/vnd.ms-powerpoint.template.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"potm\"]\n  },\n  \"application/vnd.ms-printdevicecapabilities+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ms-printing.printticket+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true\n  },\n  \"application/vnd.ms-printschematicket+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ms-project\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mpp\",\"mpt\"]\n  },\n  \"application/vnd.ms-tnef\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-windows.devicepairing\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-windows.nwprinting.oob\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-windows.printerpairing\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-windows.wsd.oob\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-wmdrm.lic-chlg-req\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-wmdrm.lic-resp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-wmdrm.meter-chlg-req\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-wmdrm.meter-resp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ms-word.document.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"docm\"]\n  },\n  \"application/vnd.ms-word.template.macroenabled.12\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dotm\"]\n  },\n  \"application/vnd.ms-works\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wps\",\"wks\",\"wcm\",\"wdb\"]\n  },\n  \"application/vnd.ms-wpl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wpl\"]\n  },\n  \"application/vnd.ms-xpsdocument\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"xps\"]\n  },\n  \"application/vnd.msa-disk-image\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.mseq\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mseq\"]\n  },\n  \"application/vnd.msign\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.multiad.creator\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.multiad.creator.cif\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.music-niff\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.musician\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mus\"]\n  },\n  \"application/vnd.muvee.style\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"msty\"]\n  },\n  \"application/vnd.mynfc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"taglet\"]\n  },\n  \"application/vnd.nacamar.ybrid+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.ncd.control\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ncd.reference\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nearst.inv+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.nebumind.line\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nervana\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.netfpx\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.neurolanguage.nlu\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nlu\"]\n  },\n  \"application/vnd.nimn\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nintendo.nitro.rom\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nintendo.snes.rom\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nitf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ntf\",\"nitf\"]\n  },\n  \"application/vnd.noblenet-directory\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nnd\"]\n  },\n  \"application/vnd.noblenet-sealer\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nns\"]\n  },\n  \"application/vnd.noblenet-web\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nnw\"]\n  },\n  \"application/vnd.nokia.catalogs\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nokia.conml+wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nokia.conml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.nokia.iptv.config+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.nokia.isds-radio-presets\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nokia.landmark+wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nokia.landmark+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.nokia.landmarkcollection+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.nokia.n-gage.ac+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ac\"]\n  },\n  \"application/vnd.nokia.n-gage.data\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ngdat\"]\n  },\n  \"application/vnd.nokia.n-gage.symbian.install\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"n-gage\"]\n  },\n  \"application/vnd.nokia.ncd\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nokia.pcd+wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.nokia.pcd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.nokia.radio-preset\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rpst\"]\n  },\n  \"application/vnd.nokia.radio-presets\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rpss\"]\n  },\n  \"application/vnd.novadigm.edm\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"edm\"]\n  },\n  \"application/vnd.novadigm.edx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"edx\"]\n  },\n  \"application/vnd.novadigm.ext\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ext\"]\n  },\n  \"application/vnd.ntt-local.content-share\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ntt-local.file-transfer\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ntt-local.ogw_remote-access\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ntt-local.sip-ta_remote\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ntt-local.sip-ta_tcp_stream\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oasis.opendocument.chart\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"odc\"]\n  },\n  \"application/vnd.oasis.opendocument.chart-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"otc\"]\n  },\n  \"application/vnd.oasis.opendocument.database\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"odb\"]\n  },\n  \"application/vnd.oasis.opendocument.formula\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"odf\"]\n  },\n  \"application/vnd.oasis.opendocument.formula-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"odft\"]\n  },\n  \"application/vnd.oasis.opendocument.graphics\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"odg\"]\n  },\n  \"application/vnd.oasis.opendocument.graphics-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"otg\"]\n  },\n  \"application/vnd.oasis.opendocument.image\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"odi\"]\n  },\n  \"application/vnd.oasis.opendocument.image-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oti\"]\n  },\n  \"application/vnd.oasis.opendocument.presentation\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"odp\"]\n  },\n  \"application/vnd.oasis.opendocument.presentation-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"otp\"]\n  },\n  \"application/vnd.oasis.opendocument.spreadsheet\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"ods\"]\n  },\n  \"application/vnd.oasis.opendocument.spreadsheet-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ots\"]\n  },\n  \"application/vnd.oasis.opendocument.text\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"odt\"]\n  },\n  \"application/vnd.oasis.opendocument.text-master\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"odm\"]\n  },\n  \"application/vnd.oasis.opendocument.text-template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ott\"]\n  },\n  \"application/vnd.oasis.opendocument.text-web\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"oth\"]\n  },\n  \"application/vnd.obn\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ocf+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oci.image.manifest.v1+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oftn.l10n+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.contentaccessdownload+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.contentaccessstreaming+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.cspg-hexbinary\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oipf.dae.svg+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.dae.xhtml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.mippvcontrolmessage+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.pae.gem\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oipf.spdiscovery+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.spdlist+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.ueprofile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oipf.userprofile+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.olpc-sugar\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xo\"]\n  },\n  \"application/vnd.oma-scws-config\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma-scws-http-request\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma-scws-http-response\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.bcast.associated-procedure-parameter+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.drm-trigger+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.imd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.ltkm\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.bcast.notification+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.provisioningtrigger\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.bcast.sgboot\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.bcast.sgdd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.sgdu\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.bcast.simple-symbol-container\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.bcast.smartcard-trigger+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.sprov+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.bcast.stkm\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.cab-address-book+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.cab-feature-handler+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.cab-pcc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.cab-subs-invite+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.cab-user-prefs+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.dcd\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.dcdc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.dd2+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"dd2\"]\n  },\n  \"application/vnd.oma.drm.risd+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.group-usage-list+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.lwm2m+cbor\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.lwm2m+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.lwm2m+tlv\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.pal+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.poc.detailed-progress-report+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.poc.final-report+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.poc.groups+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.poc.invocation-descriptor+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.poc.optimized-progress-report+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.push\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.oma.scidm.messages+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oma.xcap-directory+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.omads-email+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/vnd.omads-file+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/vnd.omads-folder+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/vnd.omaloc-supl-init\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.onepager\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.onepagertamp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.onepagertamx\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.onepagertat\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.onepagertatp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.onepagertatx\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.openblox.game+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"obgx\"]\n  },\n  \"application/vnd.openblox.game-binary\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.openeye.oeb\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.openofficeorg.extension\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"oxt\"]\n  },\n  \"application/vnd.openstreetmap.data+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"osm\"]\n  },\n  \"application/vnd.opentimestamps.ots\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.openxmlformats-officedocument.custom-properties+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.customxmlproperties+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawing+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.extended-properties+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.comments+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"pptx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slide\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sldx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slideshow\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ppsx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.tags+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"potx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"xlsx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xltx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.theme+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.themeoverride+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.vmldrawing\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"docx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.template\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dotx\"]\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-package.core-properties+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.openxmlformats-package.relationships+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oracle.resource+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.orange.indata\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.osa.netdeploy\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.osgeo.mapguide.package\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mgp\"]\n  },\n  \"application/vnd.osgi.bundle\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.osgi.dp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dp\"]\n  },\n  \"application/vnd.osgi.subsystem\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"esa\"]\n  },\n  \"application/vnd.otps.ct-kip+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.oxli.countgraph\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.pagerduty+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.palm\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pdb\",\"pqa\",\"oprc\"]\n  },\n  \"application/vnd.panoply\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.paos.xml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.patentdive\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.patientecommsdoc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.pawaafile\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"paw\"]\n  },\n  \"application/vnd.pcos\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.pg.format\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"str\"]\n  },\n  \"application/vnd.pg.osasli\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ei6\"]\n  },\n  \"application/vnd.piaccess.application-licence\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.picsel\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"efif\"]\n  },\n  \"application/vnd.pmi.widget\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wg\"]\n  },\n  \"application/vnd.poc.group-advertisement+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.pocketlearn\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"plf\"]\n  },\n  \"application/vnd.powerbuilder6\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pbd\"]\n  },\n  \"application/vnd.powerbuilder6-s\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.powerbuilder7\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.powerbuilder7-s\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.powerbuilder75\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.powerbuilder75-s\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.preminet\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.previewsystems.box\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"box\"]\n  },\n  \"application/vnd.proteus.magazine\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mgz\"]\n  },\n  \"application/vnd.psfs\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.publishare-delta-tree\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"qps\"]\n  },\n  \"application/vnd.pvi.ptid1\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ptid\"]\n  },\n  \"application/vnd.pwg-multiplexed\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.pwg-xhtml-print+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.qualcomm.brew-app-res\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.quarantainenet\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.quark.quarkxpress\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"qxd\",\"qxt\",\"qwd\",\"qwt\",\"qxl\",\"qxb\"]\n  },\n  \"application/vnd.quobject-quoxdocument\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.radisys.moml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-audit+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-audit-conf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-audit-conn+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-audit-dialog+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-audit-stream+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-conf+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog-base+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog-fax-detect+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog-fax-sendrecv+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog-group+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog-speech+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.radisys.msml-dialog-transform+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.rainstor.data\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.rapid\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.rar\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rar\"]\n  },\n  \"application/vnd.realvnc.bed\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"bed\"]\n  },\n  \"application/vnd.recordare.musicxml\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mxl\"]\n  },\n  \"application/vnd.recordare.musicxml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"musicxml\"]\n  },\n  \"application/vnd.renlearn.rlprint\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.resilient.logic\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.restful+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.rig.cryptonote\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cryptonote\"]\n  },\n  \"application/vnd.rim.cod\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cod\"]\n  },\n  \"application/vnd.rn-realmedia\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"rm\"]\n  },\n  \"application/vnd.rn-realmedia-vbr\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"rmvb\"]\n  },\n  \"application/vnd.route66.link66+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"link66\"]\n  },\n  \"application/vnd.rs-274x\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ruckus.download\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.s3sms\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sailingtracker.track\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"st\"]\n  },\n  \"application/vnd.sar\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sbm.cid\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sbm.mid2\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.scribus\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.3df\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.csf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.doc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.eml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.mht\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.net\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.ppt\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.tiff\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealed.xls\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealedmedia.softseal.html\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sealedmedia.softseal.pdf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.seemail\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"see\"]\n  },\n  \"application/vnd.seis+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.sema\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sema\"]\n  },\n  \"application/vnd.semd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"semd\"]\n  },\n  \"application/vnd.semf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"semf\"]\n  },\n  \"application/vnd.shade-save-file\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.shana.informed.formdata\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ifm\"]\n  },\n  \"application/vnd.shana.informed.formtemplate\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"itp\"]\n  },\n  \"application/vnd.shana.informed.interchange\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"iif\"]\n  },\n  \"application/vnd.shana.informed.package\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ipk\"]\n  },\n  \"application/vnd.shootproof+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.shopkick+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.shp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.shx\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sigrok.session\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.simtech-mindmapper\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"twd\",\"twds\"]\n  },\n  \"application/vnd.siren+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.smaf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mmf\"]\n  },\n  \"application/vnd.smart.notebook\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.smart.teacher\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"teacher\"]\n  },\n  \"application/vnd.snesdev-page-table\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.software602.filler.form+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"fo\"]\n  },\n  \"application/vnd.software602.filler.form-xml-zip\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.solent.sdkm+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"sdkm\",\"sdkd\"]\n  },\n  \"application/vnd.spotfire.dxp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dxp\"]\n  },\n  \"application/vnd.spotfire.sfs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sfs\"]\n  },\n  \"application/vnd.sqlite3\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sss-cod\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sss-dtf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sss-ntf\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.stardivision.calc\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sdc\"]\n  },\n  \"application/vnd.stardivision.draw\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sda\"]\n  },\n  \"application/vnd.stardivision.impress\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sdd\"]\n  },\n  \"application/vnd.stardivision.math\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"smf\"]\n  },\n  \"application/vnd.stardivision.writer\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sdw\",\"vor\"]\n  },\n  \"application/vnd.stardivision.writer-global\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sgl\"]\n  },\n  \"application/vnd.stepmania.package\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"smzip\"]\n  },\n  \"application/vnd.stepmania.stepchart\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sm\"]\n  },\n  \"application/vnd.street-stream\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sun.wadl+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"wadl\"]\n  },\n  \"application/vnd.sun.xml.calc\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sxc\"]\n  },\n  \"application/vnd.sun.xml.calc.template\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"stc\"]\n  },\n  \"application/vnd.sun.xml.draw\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sxd\"]\n  },\n  \"application/vnd.sun.xml.draw.template\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"std\"]\n  },\n  \"application/vnd.sun.xml.impress\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sxi\"]\n  },\n  \"application/vnd.sun.xml.impress.template\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sti\"]\n  },\n  \"application/vnd.sun.xml.math\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sxm\"]\n  },\n  \"application/vnd.sun.xml.writer\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sxw\"]\n  },\n  \"application/vnd.sun.xml.writer.global\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sxg\"]\n  },\n  \"application/vnd.sun.xml.writer.template\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"stw\"]\n  },\n  \"application/vnd.sus-calendar\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sus\",\"susp\"]\n  },\n  \"application/vnd.svd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"svd\"]\n  },\n  \"application/vnd.swiftview-ics\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.sycle+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.syft+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.symbian.install\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sis\",\"sisx\"]\n  },\n  \"application/vnd.syncml+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"xsm\"]\n  },\n  \"application/vnd.syncml.dm+wbxml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"extensions\": [\"bdm\"]\n  },\n  \"application/vnd.syncml.dm+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"xdm\"]\n  },\n  \"application/vnd.syncml.dm.notification\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.syncml.dmddf+wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.syncml.dmddf+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"ddf\"]\n  },\n  \"application/vnd.syncml.dmtnds+wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.syncml.dmtnds+xml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true\n  },\n  \"application/vnd.syncml.ds.notification\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.tableschema+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.tao.intent-module-archive\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tao\"]\n  },\n  \"application/vnd.tcpdump.pcap\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pcap\",\"cap\",\"dmp\"]\n  },\n  \"application/vnd.think-cell.ppttc+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.tmd.mediaflex.api+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.tml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.tmobile-livetv\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tmo\"]\n  },\n  \"application/vnd.tri.onesource\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.trid.tpt\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tpt\"]\n  },\n  \"application/vnd.triscape.mxs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mxs\"]\n  },\n  \"application/vnd.trueapp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tra\"]\n  },\n  \"application/vnd.truedoc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ubisoft.webplayer\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ufdl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ufd\",\"ufdl\"]\n  },\n  \"application/vnd.uiq.theme\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"utz\"]\n  },\n  \"application/vnd.umajin\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"umj\"]\n  },\n  \"application/vnd.unity\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"unityweb\"]\n  },\n  \"application/vnd.uoml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"uoml\"]\n  },\n  \"application/vnd.uplanet.alert\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.alert-wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.bearer-choice\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.bearer-choice-wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.cacheop\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.cacheop-wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.channel\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.channel-wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.list\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.list-wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.listcmd\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.listcmd-wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uplanet.signal\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.uri-map\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.valve.source.material\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.vcx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vcx\"]\n  },\n  \"application/vnd.vd-study\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.vectorworks\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.vel+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.verimatrix.vcas\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.veritone.aion+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.veryant.thin\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.ves.encrypted\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.vidsoft.vidconference\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.visio\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vsd\",\"vst\",\"vss\",\"vsw\"]\n  },\n  \"application/vnd.visionary\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vis\"]\n  },\n  \"application/vnd.vividence.scriptfile\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.vsf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vsf\"]\n  },\n  \"application/vnd.wap.sic\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wap.slc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wap.wbxml\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"extensions\": [\"wbxml\"]\n  },\n  \"application/vnd.wap.wmlc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wmlc\"]\n  },\n  \"application/vnd.wap.wmlscriptc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wmlsc\"]\n  },\n  \"application/vnd.webturbo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wtb\"]\n  },\n  \"application/vnd.wfa.dpp\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wfa.p2p\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wfa.wsc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.windows.devicepairing\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wmc\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wmf.bootstrap\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wolfram.mathematica\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wolfram.mathematica.package\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wolfram.player\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"nbp\"]\n  },\n  \"application/vnd.wordperfect\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wpd\"]\n  },\n  \"application/vnd.wqd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wqd\"]\n  },\n  \"application/vnd.wrq-hp3000-labelled\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wt.stf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"stf\"]\n  },\n  \"application/vnd.wv.csp+wbxml\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.wv.csp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.wv.ssp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.xacml+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.xara\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xar\"]\n  },\n  \"application/vnd.xfdl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xfdl\"]\n  },\n  \"application/vnd.xfdl.webform\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.xmi+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vnd.xmpie.cpkg\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.xmpie.dpkg\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.xmpie.plan\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.xmpie.ppkg\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.xmpie.xlim\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.yamaha.hv-dic\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hvd\"]\n  },\n  \"application/vnd.yamaha.hv-script\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hvs\"]\n  },\n  \"application/vnd.yamaha.hv-voice\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hvp\"]\n  },\n  \"application/vnd.yamaha.openscoreformat\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"osf\"]\n  },\n  \"application/vnd.yamaha.openscoreformat.osfpvg+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"osfpvg\"]\n  },\n  \"application/vnd.yamaha.remote-setup\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.yamaha.smaf-audio\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"saf\"]\n  },\n  \"application/vnd.yamaha.smaf-phrase\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"spf\"]\n  },\n  \"application/vnd.yamaha.through-ngn\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.yamaha.tunnel-udpencap\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.yaoweme\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.yellowriver-custom-menu\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cmp\"]\n  },\n  \"application/vnd.youtube.yt\": {\n    \"source\": \"iana\"\n  },\n  \"application/vnd.zul\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"zir\",\"zirz\"]\n  },\n  \"application/vnd.zzazz.deck+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"zaz\"]\n  },\n  \"application/voicexml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"vxml\"]\n  },\n  \"application/voucher-cms+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/vq-rtcpxr\": {\n    \"source\": \"iana\"\n  },\n  \"application/wasm\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"wasm\"]\n  },\n  \"application/watcherinfo+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"wif\"]\n  },\n  \"application/webpush-options+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/whoispp-query\": {\n    \"source\": \"iana\"\n  },\n  \"application/whoispp-response\": {\n    \"source\": \"iana\"\n  },\n  \"application/widget\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wgt\"]\n  },\n  \"application/winhlp\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"hlp\"]\n  },\n  \"application/wita\": {\n    \"source\": \"iana\"\n  },\n  \"application/wordperfect5.1\": {\n    \"source\": \"iana\"\n  },\n  \"application/wsdl+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"wsdl\"]\n  },\n  \"application/wspolicy+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"wspolicy\"]\n  },\n  \"application/x-7z-compressed\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"7z\"]\n  },\n  \"application/x-abiword\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"abw\"]\n  },\n  \"application/x-ace-compressed\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ace\"]\n  },\n  \"application/x-amf\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-apple-diskimage\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"dmg\"]\n  },\n  \"application/x-arj\": {\n    \"compressible\": false,\n    \"extensions\": [\"arj\"]\n  },\n  \"application/x-authorware-bin\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"aab\",\"x32\",\"u32\",\"vox\"]\n  },\n  \"application/x-authorware-map\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"aam\"]\n  },\n  \"application/x-authorware-seg\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"aas\"]\n  },\n  \"application/x-bcpio\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"bcpio\"]\n  },\n  \"application/x-bdoc\": {\n    \"compressible\": false,\n    \"extensions\": [\"bdoc\"]\n  },\n  \"application/x-bittorrent\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"torrent\"]\n  },\n  \"application/x-blorb\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"blb\",\"blorb\"]\n  },\n  \"application/x-bzip\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"bz\"]\n  },\n  \"application/x-bzip2\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"bz2\",\"boz\"]\n  },\n  \"application/x-cbr\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cbr\",\"cba\",\"cbt\",\"cbz\",\"cb7\"]\n  },\n  \"application/x-cdlink\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"vcd\"]\n  },\n  \"application/x-cfs-compressed\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cfs\"]\n  },\n  \"application/x-chat\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"chat\"]\n  },\n  \"application/x-chess-pgn\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pgn\"]\n  },\n  \"application/x-chrome-extension\": {\n    \"extensions\": [\"crx\"]\n  },\n  \"application/x-cocoa\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"cco\"]\n  },\n  \"application/x-compress\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-conference\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"nsc\"]\n  },\n  \"application/x-cpio\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cpio\"]\n  },\n  \"application/x-csh\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"csh\"]\n  },\n  \"application/x-deb\": {\n    \"compressible\": false\n  },\n  \"application/x-debian-package\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"deb\",\"udeb\"]\n  },\n  \"application/x-dgc-compressed\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"dgc\"]\n  },\n  \"application/x-director\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"dir\",\"dcr\",\"dxr\",\"cst\",\"cct\",\"cxt\",\"w3d\",\"fgd\",\"swa\"]\n  },\n  \"application/x-doom\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wad\"]\n  },\n  \"application/x-dtbncx+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"ncx\"]\n  },\n  \"application/x-dtbook+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"dtb\"]\n  },\n  \"application/x-dtbresource+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"res\"]\n  },\n  \"application/x-dvi\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"dvi\"]\n  },\n  \"application/x-envoy\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"evy\"]\n  },\n  \"application/x-eva\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"eva\"]\n  },\n  \"application/x-font-bdf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"bdf\"]\n  },\n  \"application/x-font-dos\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-font-framemaker\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-font-ghostscript\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gsf\"]\n  },\n  \"application/x-font-libgrx\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-font-linux-psf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"psf\"]\n  },\n  \"application/x-font-pcf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pcf\"]\n  },\n  \"application/x-font-snf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"snf\"]\n  },\n  \"application/x-font-speedo\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-font-sunos-news\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-font-type1\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pfa\",\"pfb\",\"pfm\",\"afm\"]\n  },\n  \"application/x-font-vfont\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-freearc\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"arc\"]\n  },\n  \"application/x-futuresplash\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"spl\"]\n  },\n  \"application/x-gca-compressed\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gca\"]\n  },\n  \"application/x-glulx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ulx\"]\n  },\n  \"application/x-gnumeric\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gnumeric\"]\n  },\n  \"application/x-gramps-xml\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gramps\"]\n  },\n  \"application/x-gtar\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gtar\"]\n  },\n  \"application/x-gzip\": {\n    \"source\": \"apache\"\n  },\n  \"application/x-hdf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"hdf\"]\n  },\n  \"application/x-httpd-php\": {\n    \"compressible\": true,\n    \"extensions\": [\"php\"]\n  },\n  \"application/x-install-instructions\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"install\"]\n  },\n  \"application/x-iso9660-image\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"iso\"]\n  },\n  \"application/x-iwork-keynote-sffkey\": {\n    \"extensions\": [\"key\"]\n  },\n  \"application/x-iwork-numbers-sffnumbers\": {\n    \"extensions\": [\"numbers\"]\n  },\n  \"application/x-iwork-pages-sffpages\": {\n    \"extensions\": [\"pages\"]\n  },\n  \"application/x-java-archive-diff\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"jardiff\"]\n  },\n  \"application/x-java-jnlp-file\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"jnlp\"]\n  },\n  \"application/x-javascript\": {\n    \"compressible\": true\n  },\n  \"application/x-keepass2\": {\n    \"extensions\": [\"kdbx\"]\n  },\n  \"application/x-latex\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"latex\"]\n  },\n  \"application/x-lua-bytecode\": {\n    \"extensions\": [\"luac\"]\n  },\n  \"application/x-lzh-compressed\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"lzh\",\"lha\"]\n  },\n  \"application/x-makeself\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"run\"]\n  },\n  \"application/x-mie\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mie\"]\n  },\n  \"application/x-mobipocket-ebook\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"prc\",\"mobi\"]\n  },\n  \"application/x-mpegurl\": {\n    \"compressible\": false\n  },\n  \"application/x-ms-application\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"application\"]\n  },\n  \"application/x-ms-shortcut\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"lnk\"]\n  },\n  \"application/x-ms-wmd\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wmd\"]\n  },\n  \"application/x-ms-wmz\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wmz\"]\n  },\n  \"application/x-ms-xbap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xbap\"]\n  },\n  \"application/x-msaccess\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mdb\"]\n  },\n  \"application/x-msbinder\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"obd\"]\n  },\n  \"application/x-mscardfile\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"crd\"]\n  },\n  \"application/x-msclip\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"clp\"]\n  },\n  \"application/x-msdos-program\": {\n    \"extensions\": [\"exe\"]\n  },\n  \"application/x-msdownload\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"exe\",\"dll\",\"com\",\"bat\",\"msi\"]\n  },\n  \"application/x-msmediaview\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mvb\",\"m13\",\"m14\"]\n  },\n  \"application/x-msmetafile\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wmf\",\"wmz\",\"emf\",\"emz\"]\n  },\n  \"application/x-msmoney\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mny\"]\n  },\n  \"application/x-mspublisher\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pub\"]\n  },\n  \"application/x-msschedule\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"scd\"]\n  },\n  \"application/x-msterminal\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"trm\"]\n  },\n  \"application/x-mswrite\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wri\"]\n  },\n  \"application/x-netcdf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"nc\",\"cdf\"]\n  },\n  \"application/x-ns-proxy-autoconfig\": {\n    \"compressible\": true,\n    \"extensions\": [\"pac\"]\n  },\n  \"application/x-nzb\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"nzb\"]\n  },\n  \"application/x-perl\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"pl\",\"pm\"]\n  },\n  \"application/x-pilot\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"prc\",\"pdb\"]\n  },\n  \"application/x-pkcs12\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"p12\",\"pfx\"]\n  },\n  \"application/x-pkcs7-certificates\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"p7b\",\"spc\"]\n  },\n  \"application/x-pkcs7-certreqresp\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"p7r\"]\n  },\n  \"application/x-pki-message\": {\n    \"source\": \"iana\"\n  },\n  \"application/x-rar-compressed\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"rar\"]\n  },\n  \"application/x-redhat-package-manager\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"rpm\"]\n  },\n  \"application/x-research-info-systems\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ris\"]\n  },\n  \"application/x-sea\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"sea\"]\n  },\n  \"application/x-sh\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"sh\"]\n  },\n  \"application/x-shar\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"shar\"]\n  },\n  \"application/x-shockwave-flash\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"swf\"]\n  },\n  \"application/x-silverlight-app\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xap\"]\n  },\n  \"application/x-sql\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sql\"]\n  },\n  \"application/x-stuffit\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"sit\"]\n  },\n  \"application/x-stuffitx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sitx\"]\n  },\n  \"application/x-subrip\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"srt\"]\n  },\n  \"application/x-sv4cpio\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sv4cpio\"]\n  },\n  \"application/x-sv4crc\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sv4crc\"]\n  },\n  \"application/x-t3vm-image\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"t3\"]\n  },\n  \"application/x-tads\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"gam\"]\n  },\n  \"application/x-tar\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"tar\"]\n  },\n  \"application/x-tcl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"tcl\",\"tk\"]\n  },\n  \"application/x-tex\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"tex\"]\n  },\n  \"application/x-tex-tfm\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"tfm\"]\n  },\n  \"application/x-texinfo\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"texinfo\",\"texi\"]\n  },\n  \"application/x-tgif\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"obj\"]\n  },\n  \"application/x-ustar\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ustar\"]\n  },\n  \"application/x-virtualbox-hdd\": {\n    \"compressible\": true,\n    \"extensions\": [\"hdd\"]\n  },\n  \"application/x-virtualbox-ova\": {\n    \"compressible\": true,\n    \"extensions\": [\"ova\"]\n  },\n  \"application/x-virtualbox-ovf\": {\n    \"compressible\": true,\n    \"extensions\": [\"ovf\"]\n  },\n  \"application/x-virtualbox-vbox\": {\n    \"compressible\": true,\n    \"extensions\": [\"vbox\"]\n  },\n  \"application/x-virtualbox-vbox-extpack\": {\n    \"compressible\": false,\n    \"extensions\": [\"vbox-extpack\"]\n  },\n  \"application/x-virtualbox-vdi\": {\n    \"compressible\": true,\n    \"extensions\": [\"vdi\"]\n  },\n  \"application/x-virtualbox-vhd\": {\n    \"compressible\": true,\n    \"extensions\": [\"vhd\"]\n  },\n  \"application/x-virtualbox-vmdk\": {\n    \"compressible\": true,\n    \"extensions\": [\"vmdk\"]\n  },\n  \"application/x-wais-source\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"src\"]\n  },\n  \"application/x-web-app-manifest+json\": {\n    \"compressible\": true,\n    \"extensions\": [\"webapp\"]\n  },\n  \"application/x-www-form-urlencoded\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/x-x509-ca-cert\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"der\",\"crt\",\"pem\"]\n  },\n  \"application/x-x509-ca-ra-cert\": {\n    \"source\": \"iana\"\n  },\n  \"application/x-x509-next-ca-cert\": {\n    \"source\": \"iana\"\n  },\n  \"application/x-xfig\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"fig\"]\n  },\n  \"application/x-xliff+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"xlf\"]\n  },\n  \"application/x-xpinstall\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"xpi\"]\n  },\n  \"application/x-xz\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xz\"]\n  },\n  \"application/x-zmachine\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"z1\",\"z2\",\"z3\",\"z4\",\"z5\",\"z6\",\"z7\",\"z8\"]\n  },\n  \"application/x400-bp\": {\n    \"source\": \"iana\"\n  },\n  \"application/xacml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/xaml+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"xaml\"]\n  },\n  \"application/xcap-att+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xav\"]\n  },\n  \"application/xcap-caps+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xca\"]\n  },\n  \"application/xcap-diff+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xdf\"]\n  },\n  \"application/xcap-el+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xel\"]\n  },\n  \"application/xcap-error+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/xcap-ns+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xns\"]\n  },\n  \"application/xcon-conference-info+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/xcon-conference-info-diff+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/xenc+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xenc\"]\n  },\n  \"application/xhtml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xhtml\",\"xht\"]\n  },\n  \"application/xhtml-voice+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true\n  },\n  \"application/xliff+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xlf\"]\n  },\n  \"application/xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xml\",\"xsl\",\"xsd\",\"rng\"]\n  },\n  \"application/xml-dtd\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"dtd\"]\n  },\n  \"application/xml-external-parsed-entity\": {\n    \"source\": \"iana\"\n  },\n  \"application/xml-patch+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/xmpp+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/xop+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xop\"]\n  },\n  \"application/xproc+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"xpl\"]\n  },\n  \"application/xslt+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xsl\",\"xslt\"]\n  },\n  \"application/xspf+xml\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"xspf\"]\n  },\n  \"application/xv+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"mxml\",\"xhvml\",\"xvml\",\"xvm\"]\n  },\n  \"application/yang\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"yang\"]\n  },\n  \"application/yang-data+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/yang-data+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/yang-patch+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/yang-patch+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"application/yin+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"yin\"]\n  },\n  \"application/zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"zip\"]\n  },\n  \"application/zlib\": {\n    \"source\": \"iana\"\n  },\n  \"application/zstd\": {\n    \"source\": \"iana\"\n  },\n  \"audio/1d-interleaved-parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"audio/32kadpcm\": {\n    \"source\": \"iana\"\n  },\n  \"audio/3gpp\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"3gpp\"]\n  },\n  \"audio/3gpp2\": {\n    \"source\": \"iana\"\n  },\n  \"audio/aac\": {\n    \"source\": \"iana\"\n  },\n  \"audio/ac3\": {\n    \"source\": \"iana\"\n  },\n  \"audio/adpcm\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"adp\"]\n  },\n  \"audio/amr\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"amr\"]\n  },\n  \"audio/amr-wb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/amr-wb+\": {\n    \"source\": \"iana\"\n  },\n  \"audio/aptx\": {\n    \"source\": \"iana\"\n  },\n  \"audio/asc\": {\n    \"source\": \"iana\"\n  },\n  \"audio/atrac-advanced-lossless\": {\n    \"source\": \"iana\"\n  },\n  \"audio/atrac-x\": {\n    \"source\": \"iana\"\n  },\n  \"audio/atrac3\": {\n    \"source\": \"iana\"\n  },\n  \"audio/basic\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"au\",\"snd\"]\n  },\n  \"audio/bv16\": {\n    \"source\": \"iana\"\n  },\n  \"audio/bv32\": {\n    \"source\": \"iana\"\n  },\n  \"audio/clearmode\": {\n    \"source\": \"iana\"\n  },\n  \"audio/cn\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dat12\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dls\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dsr-es201108\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dsr-es202050\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dsr-es202211\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dsr-es202212\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dv\": {\n    \"source\": \"iana\"\n  },\n  \"audio/dvi4\": {\n    \"source\": \"iana\"\n  },\n  \"audio/eac3\": {\n    \"source\": \"iana\"\n  },\n  \"audio/encaprtp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrc\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrc-qcp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrc0\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrc1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcb0\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcb1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcnw\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcnw0\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcnw1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcwb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcwb0\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evrcwb1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/evs\": {\n    \"source\": \"iana\"\n  },\n  \"audio/flexfec\": {\n    \"source\": \"iana\"\n  },\n  \"audio/fwdred\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g711-0\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g719\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g722\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g7221\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g723\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g726-16\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g726-24\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g726-32\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g726-40\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g728\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g729\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g7291\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g729d\": {\n    \"source\": \"iana\"\n  },\n  \"audio/g729e\": {\n    \"source\": \"iana\"\n  },\n  \"audio/gsm\": {\n    \"source\": \"iana\"\n  },\n  \"audio/gsm-efr\": {\n    \"source\": \"iana\"\n  },\n  \"audio/gsm-hr-08\": {\n    \"source\": \"iana\"\n  },\n  \"audio/ilbc\": {\n    \"source\": \"iana\"\n  },\n  \"audio/ip-mr_v2.5\": {\n    \"source\": \"iana\"\n  },\n  \"audio/isac\": {\n    \"source\": \"apache\"\n  },\n  \"audio/l16\": {\n    \"source\": \"iana\"\n  },\n  \"audio/l20\": {\n    \"source\": \"iana\"\n  },\n  \"audio/l24\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"audio/l8\": {\n    \"source\": \"iana\"\n  },\n  \"audio/lpc\": {\n    \"source\": \"iana\"\n  },\n  \"audio/melp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/melp1200\": {\n    \"source\": \"iana\"\n  },\n  \"audio/melp2400\": {\n    \"source\": \"iana\"\n  },\n  \"audio/melp600\": {\n    \"source\": \"iana\"\n  },\n  \"audio/mhas\": {\n    \"source\": \"iana\"\n  },\n  \"audio/midi\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mid\",\"midi\",\"kar\",\"rmi\"]\n  },\n  \"audio/mobile-xmf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mxmf\"]\n  },\n  \"audio/mp3\": {\n    \"compressible\": false,\n    \"extensions\": [\"mp3\"]\n  },\n  \"audio/mp4\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"m4a\",\"mp4a\"]\n  },\n  \"audio/mp4a-latm\": {\n    \"source\": \"iana\"\n  },\n  \"audio/mpa\": {\n    \"source\": \"iana\"\n  },\n  \"audio/mpa-robust\": {\n    \"source\": \"iana\"\n  },\n  \"audio/mpeg\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"mpga\",\"mp2\",\"mp2a\",\"mp3\",\"m2a\",\"m3a\"]\n  },\n  \"audio/mpeg4-generic\": {\n    \"source\": \"iana\"\n  },\n  \"audio/musepack\": {\n    \"source\": \"apache\"\n  },\n  \"audio/ogg\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"oga\",\"ogg\",\"spx\",\"opus\"]\n  },\n  \"audio/opus\": {\n    \"source\": \"iana\"\n  },\n  \"audio/parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"audio/pcma\": {\n    \"source\": \"iana\"\n  },\n  \"audio/pcma-wb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/pcmu\": {\n    \"source\": \"iana\"\n  },\n  \"audio/pcmu-wb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/prs.sid\": {\n    \"source\": \"iana\"\n  },\n  \"audio/qcelp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/raptorfec\": {\n    \"source\": \"iana\"\n  },\n  \"audio/red\": {\n    \"source\": \"iana\"\n  },\n  \"audio/rtp-enc-aescm128\": {\n    \"source\": \"iana\"\n  },\n  \"audio/rtp-midi\": {\n    \"source\": \"iana\"\n  },\n  \"audio/rtploopback\": {\n    \"source\": \"iana\"\n  },\n  \"audio/rtx\": {\n    \"source\": \"iana\"\n  },\n  \"audio/s3m\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"s3m\"]\n  },\n  \"audio/scip\": {\n    \"source\": \"iana\"\n  },\n  \"audio/silk\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sil\"]\n  },\n  \"audio/smv\": {\n    \"source\": \"iana\"\n  },\n  \"audio/smv-qcp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/smv0\": {\n    \"source\": \"iana\"\n  },\n  \"audio/sofa\": {\n    \"source\": \"iana\"\n  },\n  \"audio/sp-midi\": {\n    \"source\": \"iana\"\n  },\n  \"audio/speex\": {\n    \"source\": \"iana\"\n  },\n  \"audio/t140c\": {\n    \"source\": \"iana\"\n  },\n  \"audio/t38\": {\n    \"source\": \"iana\"\n  },\n  \"audio/telephone-event\": {\n    \"source\": \"iana\"\n  },\n  \"audio/tetra_acelp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/tetra_acelp_bb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/tone\": {\n    \"source\": \"iana\"\n  },\n  \"audio/tsvcis\": {\n    \"source\": \"iana\"\n  },\n  \"audio/uemclip\": {\n    \"source\": \"iana\"\n  },\n  \"audio/ulpfec\": {\n    \"source\": \"iana\"\n  },\n  \"audio/usac\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vdvi\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vmr-wb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.3gpp.iufp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.4sb\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.audiokoz\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.celp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.cisco.nse\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.cmles.radio-events\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.cns.anp1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.cns.inf1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dece.audio\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uva\",\"uvva\"]\n  },\n  \"audio/vnd.digital-winds\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"eol\"]\n  },\n  \"audio/vnd.dlna.adts\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.heaac.1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.heaac.2\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.mlp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.mps\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.pl2\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.pl2x\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.pl2z\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dolby.pulse.1\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dra\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dra\"]\n  },\n  \"audio/vnd.dts\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dts\"]\n  },\n  \"audio/vnd.dts.hd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dtshd\"]\n  },\n  \"audio/vnd.dts.uhd\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.dvb.file\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.everad.plj\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.hns.audio\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.lucent.voice\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"lvp\"]\n  },\n  \"audio/vnd.ms-playready.media.pya\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pya\"]\n  },\n  \"audio/vnd.nokia.mobile-xmf\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.nortel.vbk\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.nuera.ecelp4800\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ecelp4800\"]\n  },\n  \"audio/vnd.nuera.ecelp7470\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ecelp7470\"]\n  },\n  \"audio/vnd.nuera.ecelp9600\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ecelp9600\"]\n  },\n  \"audio/vnd.octel.sbc\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.presonus.multitrack\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.qcelp\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.rhetorex.32kadpcm\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.rip\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rip\"]\n  },\n  \"audio/vnd.rn-realaudio\": {\n    \"compressible\": false\n  },\n  \"audio/vnd.sealedmedia.softseal.mpeg\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.vmx.cvsd\": {\n    \"source\": \"iana\"\n  },\n  \"audio/vnd.wave\": {\n    \"compressible\": false\n  },\n  \"audio/vorbis\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"audio/vorbis-config\": {\n    \"source\": \"iana\"\n  },\n  \"audio/wav\": {\n    \"compressible\": false,\n    \"extensions\": [\"wav\"]\n  },\n  \"audio/wave\": {\n    \"compressible\": false,\n    \"extensions\": [\"wav\"]\n  },\n  \"audio/webm\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"weba\"]\n  },\n  \"audio/x-aac\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"aac\"]\n  },\n  \"audio/x-aiff\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"aif\",\"aiff\",\"aifc\"]\n  },\n  \"audio/x-caf\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"caf\"]\n  },\n  \"audio/x-flac\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"flac\"]\n  },\n  \"audio/x-m4a\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"m4a\"]\n  },\n  \"audio/x-matroska\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mka\"]\n  },\n  \"audio/x-mpegurl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"m3u\"]\n  },\n  \"audio/x-ms-wax\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wax\"]\n  },\n  \"audio/x-ms-wma\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wma\"]\n  },\n  \"audio/x-pn-realaudio\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ram\",\"ra\"]\n  },\n  \"audio/x-pn-realaudio-plugin\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"rmp\"]\n  },\n  \"audio/x-realaudio\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"ra\"]\n  },\n  \"audio/x-tta\": {\n    \"source\": \"apache\"\n  },\n  \"audio/x-wav\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wav\"]\n  },\n  \"audio/xm\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xm\"]\n  },\n  \"chemical/x-cdx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cdx\"]\n  },\n  \"chemical/x-cif\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cif\"]\n  },\n  \"chemical/x-cmdf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cmdf\"]\n  },\n  \"chemical/x-cml\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cml\"]\n  },\n  \"chemical/x-csml\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"csml\"]\n  },\n  \"chemical/x-pdb\": {\n    \"source\": \"apache\"\n  },\n  \"chemical/x-xyz\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xyz\"]\n  },\n  \"font/collection\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ttc\"]\n  },\n  \"font/otf\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"otf\"]\n  },\n  \"font/sfnt\": {\n    \"source\": \"iana\"\n  },\n  \"font/ttf\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ttf\"]\n  },\n  \"font/woff\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"woff\"]\n  },\n  \"font/woff2\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"woff2\"]\n  },\n  \"image/aces\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"exr\"]\n  },\n  \"image/apng\": {\n    \"compressible\": false,\n    \"extensions\": [\"apng\"]\n  },\n  \"image/avci\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"avci\"]\n  },\n  \"image/avcs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"avcs\"]\n  },\n  \"image/avif\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"avif\"]\n  },\n  \"image/bmp\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"bmp\"]\n  },\n  \"image/cgm\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"cgm\"]\n  },\n  \"image/dicom-rle\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"drle\"]\n  },\n  \"image/emf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"emf\"]\n  },\n  \"image/fits\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fits\"]\n  },\n  \"image/g3fax\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"g3\"]\n  },\n  \"image/gif\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"gif\"]\n  },\n  \"image/heic\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"heic\"]\n  },\n  \"image/heic-sequence\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"heics\"]\n  },\n  \"image/heif\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"heif\"]\n  },\n  \"image/heif-sequence\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"heifs\"]\n  },\n  \"image/hej2k\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hej2\"]\n  },\n  \"image/hsj2\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"hsj2\"]\n  },\n  \"image/ief\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ief\"]\n  },\n  \"image/jls\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jls\"]\n  },\n  \"image/jp2\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"jp2\",\"jpg2\"]\n  },\n  \"image/jpeg\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"jpeg\",\"jpg\",\"jpe\"]\n  },\n  \"image/jph\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jph\"]\n  },\n  \"image/jphc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jhc\"]\n  },\n  \"image/jpm\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"jpm\"]\n  },\n  \"image/jpx\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"jpx\",\"jpf\"]\n  },\n  \"image/jxr\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxr\"]\n  },\n  \"image/jxra\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxra\"]\n  },\n  \"image/jxrs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxrs\"]\n  },\n  \"image/jxs\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxs\"]\n  },\n  \"image/jxsc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxsc\"]\n  },\n  \"image/jxsi\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxsi\"]\n  },\n  \"image/jxss\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jxss\"]\n  },\n  \"image/ktx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ktx\"]\n  },\n  \"image/ktx2\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ktx2\"]\n  },\n  \"image/naplps\": {\n    \"source\": \"iana\"\n  },\n  \"image/pjpeg\": {\n    \"compressible\": false\n  },\n  \"image/png\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"png\"]\n  },\n  \"image/prs.btif\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"btif\"]\n  },\n  \"image/prs.pti\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pti\"]\n  },\n  \"image/pwg-raster\": {\n    \"source\": \"iana\"\n  },\n  \"image/sgi\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sgi\"]\n  },\n  \"image/svg+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"svg\",\"svgz\"]\n  },\n  \"image/t38\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"t38\"]\n  },\n  \"image/tiff\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"tif\",\"tiff\"]\n  },\n  \"image/tiff-fx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tfx\"]\n  },\n  \"image/vnd.adobe.photoshop\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"psd\"]\n  },\n  \"image/vnd.airzip.accelerator.azv\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"azv\"]\n  },\n  \"image/vnd.cns.inf2\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.dece.graphic\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvi\",\"uvvi\",\"uvg\",\"uvvg\"]\n  },\n  \"image/vnd.djvu\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"djvu\",\"djv\"]\n  },\n  \"image/vnd.dvb.subtitle\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sub\"]\n  },\n  \"image/vnd.dwg\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dwg\"]\n  },\n  \"image/vnd.dxf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dxf\"]\n  },\n  \"image/vnd.fastbidsheet\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fbs\"]\n  },\n  \"image/vnd.fpx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fpx\"]\n  },\n  \"image/vnd.fst\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fst\"]\n  },\n  \"image/vnd.fujixerox.edmics-mmr\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mmr\"]\n  },\n  \"image/vnd.fujixerox.edmics-rlc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"rlc\"]\n  },\n  \"image/vnd.globalgraphics.pgb\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.microsoft.icon\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"ico\"]\n  },\n  \"image/vnd.mix\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.mozilla.apng\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.ms-dds\": {\n    \"compressible\": true,\n    \"extensions\": [\"dds\"]\n  },\n  \"image/vnd.ms-modi\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mdi\"]\n  },\n  \"image/vnd.ms-photo\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wdp\"]\n  },\n  \"image/vnd.net-fpx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"npx\"]\n  },\n  \"image/vnd.pco.b16\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"b16\"]\n  },\n  \"image/vnd.radiance\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.sealed.png\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.sealedmedia.softseal.gif\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.sealedmedia.softseal.jpg\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.svf\": {\n    \"source\": \"iana\"\n  },\n  \"image/vnd.tencent.tap\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"tap\"]\n  },\n  \"image/vnd.valve.source.texture\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vtf\"]\n  },\n  \"image/vnd.wap.wbmp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wbmp\"]\n  },\n  \"image/vnd.xiff\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"xif\"]\n  },\n  \"image/vnd.zbrush.pcx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pcx\"]\n  },\n  \"image/webp\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"webp\"]\n  },\n  \"image/wmf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wmf\"]\n  },\n  \"image/x-3ds\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"3ds\"]\n  },\n  \"image/x-cmu-raster\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ras\"]\n  },\n  \"image/x-cmx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"cmx\"]\n  },\n  \"image/x-freehand\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"fh\",\"fhc\",\"fh4\",\"fh5\",\"fh7\"]\n  },\n  \"image/x-icon\": {\n    \"source\": \"apache\",\n    \"compressible\": true,\n    \"extensions\": [\"ico\"]\n  },\n  \"image/x-jng\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"jng\"]\n  },\n  \"image/x-mrsid-image\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sid\"]\n  },\n  \"image/x-ms-bmp\": {\n    \"source\": \"nginx\",\n    \"compressible\": true,\n    \"extensions\": [\"bmp\"]\n  },\n  \"image/x-pcx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pcx\"]\n  },\n  \"image/x-pict\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pic\",\"pct\"]\n  },\n  \"image/x-portable-anymap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pnm\"]\n  },\n  \"image/x-portable-bitmap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pbm\"]\n  },\n  \"image/x-portable-graymap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"pgm\"]\n  },\n  \"image/x-portable-pixmap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ppm\"]\n  },\n  \"image/x-rgb\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"rgb\"]\n  },\n  \"image/x-tga\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"tga\"]\n  },\n  \"image/x-xbitmap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xbm\"]\n  },\n  \"image/x-xcf\": {\n    \"compressible\": false\n  },\n  \"image/x-xpixmap\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xpm\"]\n  },\n  \"image/x-xwindowdump\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"xwd\"]\n  },\n  \"message/cpim\": {\n    \"source\": \"iana\"\n  },\n  \"message/delivery-status\": {\n    \"source\": \"iana\"\n  },\n  \"message/disposition-notification\": {\n    \"source\": \"iana\",\n    \"extensions\": [\n      \"disposition-notification\"\n    ]\n  },\n  \"message/external-body\": {\n    \"source\": \"iana\"\n  },\n  \"message/feedback-report\": {\n    \"source\": \"iana\"\n  },\n  \"message/global\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"u8msg\"]\n  },\n  \"message/global-delivery-status\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"u8dsn\"]\n  },\n  \"message/global-disposition-notification\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"u8mdn\"]\n  },\n  \"message/global-headers\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"u8hdr\"]\n  },\n  \"message/http\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"message/imdn+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"message/news\": {\n    \"source\": \"iana\"\n  },\n  \"message/partial\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"message/rfc822\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"eml\",\"mime\"]\n  },\n  \"message/s-http\": {\n    \"source\": \"iana\"\n  },\n  \"message/sip\": {\n    \"source\": \"iana\"\n  },\n  \"message/sipfrag\": {\n    \"source\": \"iana\"\n  },\n  \"message/tracking-status\": {\n    \"source\": \"iana\"\n  },\n  \"message/vnd.si.simp\": {\n    \"source\": \"iana\"\n  },\n  \"message/vnd.wfa.wsc\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wsc\"]\n  },\n  \"model/3mf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"3mf\"]\n  },\n  \"model/e57\": {\n    \"source\": \"iana\"\n  },\n  \"model/gltf+json\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"gltf\"]\n  },\n  \"model/gltf-binary\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"glb\"]\n  },\n  \"model/iges\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"igs\",\"iges\"]\n  },\n  \"model/mesh\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"msh\",\"mesh\",\"silo\"]\n  },\n  \"model/mtl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mtl\"]\n  },\n  \"model/obj\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"obj\"]\n  },\n  \"model/step\": {\n    \"source\": \"iana\"\n  },\n  \"model/step+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"stpx\"]\n  },\n  \"model/step+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"stpz\"]\n  },\n  \"model/step-xml+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"stpxz\"]\n  },\n  \"model/stl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"stl\"]\n  },\n  \"model/vnd.collada+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"dae\"]\n  },\n  \"model/vnd.dwf\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dwf\"]\n  },\n  \"model/vnd.flatland.3dml\": {\n    \"source\": \"iana\"\n  },\n  \"model/vnd.gdl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gdl\"]\n  },\n  \"model/vnd.gs-gdl\": {\n    \"source\": \"apache\"\n  },\n  \"model/vnd.gs.gdl\": {\n    \"source\": \"iana\"\n  },\n  \"model/vnd.gtw\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gtw\"]\n  },\n  \"model/vnd.moml+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"model/vnd.mts\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mts\"]\n  },\n  \"model/vnd.opengex\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ogex\"]\n  },\n  \"model/vnd.parasolid.transmit.binary\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"x_b\"]\n  },\n  \"model/vnd.parasolid.transmit.text\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"x_t\"]\n  },\n  \"model/vnd.pytha.pyox\": {\n    \"source\": \"iana\"\n  },\n  \"model/vnd.rosette.annotated-data-model\": {\n    \"source\": \"iana\"\n  },\n  \"model/vnd.sap.vds\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vds\"]\n  },\n  \"model/vnd.usdz+zip\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"usdz\"]\n  },\n  \"model/vnd.valve.source.compiled-map\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"bsp\"]\n  },\n  \"model/vnd.vtu\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"vtu\"]\n  },\n  \"model/vrml\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"wrl\",\"vrml\"]\n  },\n  \"model/x3d+binary\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"x3db\",\"x3dbz\"]\n  },\n  \"model/x3d+fastinfoset\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"x3db\"]\n  },\n  \"model/x3d+vrml\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"x3dv\",\"x3dvz\"]\n  },\n  \"model/x3d+xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"x3d\",\"x3dz\"]\n  },\n  \"model/x3d-vrml\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"x3dv\"]\n  },\n  \"multipart/alternative\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"multipart/appledouble\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/byteranges\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/digest\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/encrypted\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"multipart/form-data\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"multipart/header-set\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/mixed\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/multilingual\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/parallel\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/related\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"multipart/report\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/signed\": {\n    \"source\": \"iana\",\n    \"compressible\": false\n  },\n  \"multipart/vnd.bint.med-plus\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/voice-message\": {\n    \"source\": \"iana\"\n  },\n  \"multipart/x-mixed-replace\": {\n    \"source\": \"iana\"\n  },\n  \"text/1d-interleaved-parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"text/cache-manifest\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"appcache\",\"manifest\"]\n  },\n  \"text/calendar\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ics\",\"ifb\"]\n  },\n  \"text/calender\": {\n    \"compressible\": true\n  },\n  \"text/cmd\": {\n    \"compressible\": true\n  },\n  \"text/coffeescript\": {\n    \"extensions\": [\"coffee\",\"litcoffee\"]\n  },\n  \"text/cql\": {\n    \"source\": \"iana\"\n  },\n  \"text/cql-expression\": {\n    \"source\": \"iana\"\n  },\n  \"text/cql-identifier\": {\n    \"source\": \"iana\"\n  },\n  \"text/css\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"css\"]\n  },\n  \"text/csv\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"csv\"]\n  },\n  \"text/csv-schema\": {\n    \"source\": \"iana\"\n  },\n  \"text/directory\": {\n    \"source\": \"iana\"\n  },\n  \"text/dns\": {\n    \"source\": \"iana\"\n  },\n  \"text/ecmascript\": {\n    \"source\": \"iana\"\n  },\n  \"text/encaprtp\": {\n    \"source\": \"iana\"\n  },\n  \"text/enriched\": {\n    \"source\": \"iana\"\n  },\n  \"text/fhirpath\": {\n    \"source\": \"iana\"\n  },\n  \"text/flexfec\": {\n    \"source\": \"iana\"\n  },\n  \"text/fwdred\": {\n    \"source\": \"iana\"\n  },\n  \"text/gff3\": {\n    \"source\": \"iana\"\n  },\n  \"text/grammar-ref-list\": {\n    \"source\": \"iana\"\n  },\n  \"text/html\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"html\",\"htm\",\"shtml\"]\n  },\n  \"text/jade\": {\n    \"extensions\": [\"jade\"]\n  },\n  \"text/javascript\": {\n    \"source\": \"iana\",\n    \"compressible\": true\n  },\n  \"text/jcr-cnd\": {\n    \"source\": \"iana\"\n  },\n  \"text/jsx\": {\n    \"compressible\": true,\n    \"extensions\": [\"jsx\"]\n  },\n  \"text/less\": {\n    \"compressible\": true,\n    \"extensions\": [\"less\"]\n  },\n  \"text/markdown\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"markdown\",\"md\"]\n  },\n  \"text/mathml\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"mml\"]\n  },\n  \"text/mdx\": {\n    \"compressible\": true,\n    \"extensions\": [\"mdx\"]\n  },\n  \"text/mizar\": {\n    \"source\": \"iana\"\n  },\n  \"text/n3\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"n3\"]\n  },\n  \"text/parameters\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\"\n  },\n  \"text/parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"text/plain\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"txt\",\"text\",\"conf\",\"def\",\"list\",\"log\",\"in\",\"ini\"]\n  },\n  \"text/provenance-notation\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\"\n  },\n  \"text/prs.fallenstein.rst\": {\n    \"source\": \"iana\"\n  },\n  \"text/prs.lines.tag\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dsc\"]\n  },\n  \"text/prs.prop.logic\": {\n    \"source\": \"iana\"\n  },\n  \"text/raptorfec\": {\n    \"source\": \"iana\"\n  },\n  \"text/red\": {\n    \"source\": \"iana\"\n  },\n  \"text/rfc822-headers\": {\n    \"source\": \"iana\"\n  },\n  \"text/richtext\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rtx\"]\n  },\n  \"text/rtf\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"rtf\"]\n  },\n  \"text/rtp-enc-aescm128\": {\n    \"source\": \"iana\"\n  },\n  \"text/rtploopback\": {\n    \"source\": \"iana\"\n  },\n  \"text/rtx\": {\n    \"source\": \"iana\"\n  },\n  \"text/sgml\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sgml\",\"sgm\"]\n  },\n  \"text/shaclc\": {\n    \"source\": \"iana\"\n  },\n  \"text/shex\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"shex\"]\n  },\n  \"text/slim\": {\n    \"extensions\": [\"slim\",\"slm\"]\n  },\n  \"text/spdx\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"spdx\"]\n  },\n  \"text/strings\": {\n    \"source\": \"iana\"\n  },\n  \"text/stylus\": {\n    \"extensions\": [\"stylus\",\"styl\"]\n  },\n  \"text/t140\": {\n    \"source\": \"iana\"\n  },\n  \"text/tab-separated-values\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"tsv\"]\n  },\n  \"text/troff\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"t\",\"tr\",\"roff\",\"man\",\"me\",\"ms\"]\n  },\n  \"text/turtle\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"extensions\": [\"ttl\"]\n  },\n  \"text/ulpfec\": {\n    \"source\": \"iana\"\n  },\n  \"text/uri-list\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"uri\",\"uris\",\"urls\"]\n  },\n  \"text/vcard\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"vcard\"]\n  },\n  \"text/vnd.a\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.abc\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.ascii-art\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.curl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"curl\"]\n  },\n  \"text/vnd.curl.dcurl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"dcurl\"]\n  },\n  \"text/vnd.curl.mcurl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mcurl\"]\n  },\n  \"text/vnd.curl.scurl\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"scurl\"]\n  },\n  \"text/vnd.debian.copyright\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\"\n  },\n  \"text/vnd.dmclientscript\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.dvb.subtitle\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"sub\"]\n  },\n  \"text/vnd.esmertec.theme-descriptor\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\"\n  },\n  \"text/vnd.familysearch.gedcom\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ged\"]\n  },\n  \"text/vnd.ficlab.flt\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.fly\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fly\"]\n  },\n  \"text/vnd.fmi.flexstor\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"flx\"]\n  },\n  \"text/vnd.gml\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.graphviz\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"gv\"]\n  },\n  \"text/vnd.hans\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.hgl\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.in3d.3dml\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"3dml\"]\n  },\n  \"text/vnd.in3d.spot\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"spot\"]\n  },\n  \"text/vnd.iptc.newsml\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.iptc.nitf\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.latex-z\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.motorola.reflex\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.ms-mediapackage\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.net2phone.commcenter.command\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.radisys.msml-basic-layout\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.senx.warpscript\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.si.uricatalogue\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.sosi\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.sun.j2me.app-descriptor\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"extensions\": [\"jad\"]\n  },\n  \"text/vnd.trolltech.linguist\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\"\n  },\n  \"text/vnd.wap.si\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.wap.sl\": {\n    \"source\": \"iana\"\n  },\n  \"text/vnd.wap.wml\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wml\"]\n  },\n  \"text/vnd.wap.wmlscript\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"wmls\"]\n  },\n  \"text/vtt\": {\n    \"source\": \"iana\",\n    \"charset\": \"UTF-8\",\n    \"compressible\": true,\n    \"extensions\": [\"vtt\"]\n  },\n  \"text/x-asm\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"s\",\"asm\"]\n  },\n  \"text/x-c\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"c\",\"cc\",\"cxx\",\"cpp\",\"h\",\"hh\",\"dic\"]\n  },\n  \"text/x-component\": {\n    \"source\": \"nginx\",\n    \"extensions\": [\"htc\"]\n  },\n  \"text/x-fortran\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"f\",\"for\",\"f77\",\"f90\"]\n  },\n  \"text/x-gwt-rpc\": {\n    \"compressible\": true\n  },\n  \"text/x-handlebars-template\": {\n    \"extensions\": [\"hbs\"]\n  },\n  \"text/x-java-source\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"java\"]\n  },\n  \"text/x-jquery-tmpl\": {\n    \"compressible\": true\n  },\n  \"text/x-lua\": {\n    \"extensions\": [\"lua\"]\n  },\n  \"text/x-markdown\": {\n    \"compressible\": true,\n    \"extensions\": [\"mkd\"]\n  },\n  \"text/x-nfo\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"nfo\"]\n  },\n  \"text/x-opml\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"opml\"]\n  },\n  \"text/x-org\": {\n    \"compressible\": true,\n    \"extensions\": [\"org\"]\n  },\n  \"text/x-pascal\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"p\",\"pas\"]\n  },\n  \"text/x-processing\": {\n    \"compressible\": true,\n    \"extensions\": [\"pde\"]\n  },\n  \"text/x-sass\": {\n    \"extensions\": [\"sass\"]\n  },\n  \"text/x-scss\": {\n    \"extensions\": [\"scss\"]\n  },\n  \"text/x-setext\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"etx\"]\n  },\n  \"text/x-sfv\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"sfv\"]\n  },\n  \"text/x-suse-ymp\": {\n    \"compressible\": true,\n    \"extensions\": [\"ymp\"]\n  },\n  \"text/x-uuencode\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"uu\"]\n  },\n  \"text/x-vcalendar\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"vcs\"]\n  },\n  \"text/x-vcard\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"vcf\"]\n  },\n  \"text/xml\": {\n    \"source\": \"iana\",\n    \"compressible\": true,\n    \"extensions\": [\"xml\"]\n  },\n  \"text/xml-external-parsed-entity\": {\n    \"source\": \"iana\"\n  },\n  \"text/yaml\": {\n    \"compressible\": true,\n    \"extensions\": [\"yaml\",\"yml\"]\n  },\n  \"video/1d-interleaved-parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"video/3gpp\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"3gp\",\"3gpp\"]\n  },\n  \"video/3gpp-tt\": {\n    \"source\": \"iana\"\n  },\n  \"video/3gpp2\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"3g2\"]\n  },\n  \"video/av1\": {\n    \"source\": \"iana\"\n  },\n  \"video/bmpeg\": {\n    \"source\": \"iana\"\n  },\n  \"video/bt656\": {\n    \"source\": \"iana\"\n  },\n  \"video/celb\": {\n    \"source\": \"iana\"\n  },\n  \"video/dv\": {\n    \"source\": \"iana\"\n  },\n  \"video/encaprtp\": {\n    \"source\": \"iana\"\n  },\n  \"video/ffv1\": {\n    \"source\": \"iana\"\n  },\n  \"video/flexfec\": {\n    \"source\": \"iana\"\n  },\n  \"video/h261\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"h261\"]\n  },\n  \"video/h263\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"h263\"]\n  },\n  \"video/h263-1998\": {\n    \"source\": \"iana\"\n  },\n  \"video/h263-2000\": {\n    \"source\": \"iana\"\n  },\n  \"video/h264\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"h264\"]\n  },\n  \"video/h264-rcdo\": {\n    \"source\": \"iana\"\n  },\n  \"video/h264-svc\": {\n    \"source\": \"iana\"\n  },\n  \"video/h265\": {\n    \"source\": \"iana\"\n  },\n  \"video/iso.segment\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"m4s\"]\n  },\n  \"video/jpeg\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"jpgv\"]\n  },\n  \"video/jpeg2000\": {\n    \"source\": \"iana\"\n  },\n  \"video/jpm\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"jpm\",\"jpgm\"]\n  },\n  \"video/jxsv\": {\n    \"source\": \"iana\"\n  },\n  \"video/mj2\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mj2\",\"mjp2\"]\n  },\n  \"video/mp1s\": {\n    \"source\": \"iana\"\n  },\n  \"video/mp2p\": {\n    \"source\": \"iana\"\n  },\n  \"video/mp2t\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"ts\"]\n  },\n  \"video/mp4\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"mp4\",\"mp4v\",\"mpg4\"]\n  },\n  \"video/mp4v-es\": {\n    \"source\": \"iana\"\n  },\n  \"video/mpeg\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"mpeg\",\"mpg\",\"mpe\",\"m1v\",\"m2v\"]\n  },\n  \"video/mpeg4-generic\": {\n    \"source\": \"iana\"\n  },\n  \"video/mpv\": {\n    \"source\": \"iana\"\n  },\n  \"video/nv\": {\n    \"source\": \"iana\"\n  },\n  \"video/ogg\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"ogv\"]\n  },\n  \"video/parityfec\": {\n    \"source\": \"iana\"\n  },\n  \"video/pointer\": {\n    \"source\": \"iana\"\n  },\n  \"video/quicktime\": {\n    \"source\": \"iana\",\n    \"compressible\": false,\n    \"extensions\": [\"qt\",\"mov\"]\n  },\n  \"video/raptorfec\": {\n    \"source\": \"iana\"\n  },\n  \"video/raw\": {\n    \"source\": \"iana\"\n  },\n  \"video/rtp-enc-aescm128\": {\n    \"source\": \"iana\"\n  },\n  \"video/rtploopback\": {\n    \"source\": \"iana\"\n  },\n  \"video/rtx\": {\n    \"source\": \"iana\"\n  },\n  \"video/scip\": {\n    \"source\": \"iana\"\n  },\n  \"video/smpte291\": {\n    \"source\": \"iana\"\n  },\n  \"video/smpte292m\": {\n    \"source\": \"iana\"\n  },\n  \"video/ulpfec\": {\n    \"source\": \"iana\"\n  },\n  \"video/vc1\": {\n    \"source\": \"iana\"\n  },\n  \"video/vc2\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.cctv\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.dece.hd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvh\",\"uvvh\"]\n  },\n  \"video/vnd.dece.mobile\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvm\",\"uvvm\"]\n  },\n  \"video/vnd.dece.mp4\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.dece.pd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvp\",\"uvvp\"]\n  },\n  \"video/vnd.dece.sd\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvs\",\"uvvs\"]\n  },\n  \"video/vnd.dece.video\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvv\",\"uvvv\"]\n  },\n  \"video/vnd.directv.mpeg\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.directv.mpeg-tts\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.dlna.mpeg-tts\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.dvb.file\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"dvb\"]\n  },\n  \"video/vnd.fvt\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"fvt\"]\n  },\n  \"video/vnd.hns.video\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.iptvforum.1dparityfec-1010\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.iptvforum.1dparityfec-2005\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.iptvforum.2dparityfec-1010\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.iptvforum.2dparityfec-2005\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.iptvforum.ttsavc\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.iptvforum.ttsmpeg2\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.motorola.video\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.motorola.videop\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.mpegurl\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"mxu\",\"m4u\"]\n  },\n  \"video/vnd.ms-playready.media.pyv\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"pyv\"]\n  },\n  \"video/vnd.nokia.interleaved-multimedia\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.nokia.mp4vr\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.nokia.videovoip\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.objectvideo\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.radgamettools.bink\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.radgamettools.smacker\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.sealed.mpeg1\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.sealed.mpeg4\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.sealed.swf\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.sealedmedia.softseal.mov\": {\n    \"source\": \"iana\"\n  },\n  \"video/vnd.uvvu.mp4\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"uvu\",\"uvvu\"]\n  },\n  \"video/vnd.vivo\": {\n    \"source\": \"iana\",\n    \"extensions\": [\"viv\"]\n  },\n  \"video/vnd.youtube.yt\": {\n    \"source\": \"iana\"\n  },\n  \"video/vp8\": {\n    \"source\": \"iana\"\n  },\n  \"video/vp9\": {\n    \"source\": \"iana\"\n  },\n  \"video/webm\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"webm\"]\n  },\n  \"video/x-f4v\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"f4v\"]\n  },\n  \"video/x-fli\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"fli\"]\n  },\n  \"video/x-flv\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"flv\"]\n  },\n  \"video/x-m4v\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"m4v\"]\n  },\n  \"video/x-matroska\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"mkv\",\"mk3d\",\"mks\"]\n  },\n  \"video/x-mng\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"mng\"]\n  },\n  \"video/x-ms-asf\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"asf\",\"asx\"]\n  },\n  \"video/x-ms-vob\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"vob\"]\n  },\n  \"video/x-ms-wm\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wm\"]\n  },\n  \"video/x-ms-wmv\": {\n    \"source\": \"apache\",\n    \"compressible\": false,\n    \"extensions\": [\"wmv\"]\n  },\n  \"video/x-ms-wmx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wmx\"]\n  },\n  \"video/x-ms-wvx\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"wvx\"]\n  },\n  \"video/x-msvideo\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"avi\"]\n  },\n  \"video/x-sgi-movie\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"movie\"]\n  },\n  \"video/x-smv\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"smv\"]\n  },\n  \"x-conference/x-cooltalk\": {\n    \"source\": \"apache\",\n    \"extensions\": [\"ice\"]\n  },\n  \"x-shader/x-fragment\": {\n    \"compressible\": true\n  },\n  \"x-shader/x-vertex\": {\n    \"compressible\": true\n  }\n}\n", "/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n", "/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n", "module.exports = defer;\n\n/**\n * Runs provided function on next iteration of the event loop\n *\n * @param {function} fn - function to run\n */\nfunction defer(fn)\n{\n  var nextTick = typeof setImmediate == 'function'\n    ? setImmediate\n    : (\n      typeof process == 'object' && typeof process.nextTick == 'function'\n      ? process.nextTick\n      : null\n    );\n\n  if (nextTick)\n  {\n    nextTick(fn);\n  }\n  else\n  {\n    setTimeout(fn, 0);\n  }\n}\n", "var defer = require('./defer.js');\n\n// API\nmodule.exports = async;\n\n/**\n * Runs provided callback asynchronously\n * even if callback itself is not\n *\n * @param   {function} callback - callback to invoke\n * @returns {function} - augmented callback\n */\nfunction async(callback)\n{\n  var isAsync = false;\n\n  // check if async happened\n  defer(function() { isAsync = true; });\n\n  return function async_callback(err, result)\n  {\n    if (isAsync)\n    {\n      callback(err, result);\n    }\n    else\n    {\n      defer(function nextTick_callback()\n      {\n        callback(err, result);\n      });\n    }\n  };\n}\n", "// API\nmodule.exports = abort;\n\n/**\n * Aborts leftover active jobs\n *\n * @param {object} state - current state object\n */\nfunction abort(state)\n{\n  Object.keys(state.jobs).forEach(clean.bind(state));\n\n  // reset leftover jobs\n  state.jobs = {};\n}\n\n/**\n * Cleans up leftover job by invoking abort function for the provided job id\n *\n * @this  state\n * @param {string|number} key - job id to abort\n */\nfunction clean(key)\n{\n  if (typeof this.jobs[key] == 'function')\n  {\n    this.jobs[key]();\n  }\n}\n", "var async = require('./async.js')\n  , abort = require('./abort.js')\n  ;\n\n// API\nmodule.exports = iterate;\n\n/**\n * Iterates over each job object\n *\n * @param {array|object} list - array or object (named list) to iterate over\n * @param {function} iterator - iterator to run\n * @param {object} state - current job status\n * @param {function} callback - invoked when all elements processed\n */\nfunction iterate(list, iterator, state, callback)\n{\n  // store current index\n  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;\n\n  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)\n  {\n    // don't repeat yourself\n    // skip secondary callbacks\n    if (!(key in state.jobs))\n    {\n      return;\n    }\n\n    // clean up jobs\n    delete state.jobs[key];\n\n    if (error)\n    {\n      // don't process rest of the results\n      // stop still active jobs\n      // and reset the list\n      abort(state);\n    }\n    else\n    {\n      state.results[key] = output;\n    }\n\n    // return salvaged results\n    callback(error, state.results);\n  });\n}\n\n/**\n * Runs iterator over provided job element\n *\n * @param   {function} iterator - iterator to invoke\n * @param   {string|number} key - key/index of the element in the list of jobs\n * @param   {mixed} item - job description\n * @param   {function} callback - invoked after iterator is done with the job\n * @returns {function|mixed} - job abort function or something else\n */\nfunction runJob(iterator, key, item, callback)\n{\n  var aborter;\n\n  // allow shortcut if iterator expects only two arguments\n  if (iterator.length == 2)\n  {\n    aborter = iterator(item, async(callback));\n  }\n  // otherwise go with full three arguments\n  else\n  {\n    aborter = iterator(item, key, async(callback));\n  }\n\n  return aborter;\n}\n", "// API\nmodule.exports = state;\n\n/**\n * Creates initial state object\n * for iteration over list\n *\n * @param   {array|object} list - list to iterate over\n * @param   {function|null} sortMethod - function to use for keys sort,\n *                                     or `null` to keep them as is\n * @returns {object} - initial state object\n */\nfunction state(list, sortMethod)\n{\n  var isNamedList = !Array.isArray(list)\n    , initState =\n    {\n      index    : 0,\n      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,\n      jobs     : {},\n      results  : isNamedList ? {} : [],\n      size     : isNamedList ? Object.keys(list).length : list.length\n    }\n    ;\n\n  if (sortMethod)\n  {\n    // sort array keys based on it's values\n    // sort object's keys just on own merit\n    initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)\n    {\n      return sortMethod(list[a], list[b]);\n    });\n  }\n\n  return initState;\n}\n", "var abort = require('./abort.js')\n  , async = require('./async.js')\n  ;\n\n// API\nmodule.exports = terminator;\n\n/**\n * Terminates jobs in the attached state context\n *\n * @this  AsyncKitState#\n * @param {function} callback - final callback to invoke after termination\n */\nfunction terminator(callback)\n{\n  if (!Object.keys(this.jobs).length)\n  {\n    return;\n  }\n\n  // fast forward iteration index\n  this.index = this.size;\n\n  // abort jobs\n  abort(this);\n\n  // send back results we have so far\n  async(callback)(null, this.results);\n}\n", "var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = parallel;\n\n/**\n * Runs iterator over provided array elements in parallel\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction parallel(list, iterator, callback)\n{\n  var state = initState(list);\n\n  while (state.index < (state['keyedList'] || list).length)\n  {\n    iterate(list, iterator, state, function(error, result)\n    {\n      if (error)\n      {\n        callback(error, result);\n        return;\n      }\n\n      // looks like it's the last one\n      if (Object.keys(state.jobs).length === 0)\n      {\n        callback(null, state.results);\n        return;\n      }\n    });\n\n    state.index++;\n  }\n\n  return terminator.bind(state, callback);\n}\n", "var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = serialOrdered;\n// sorting helpers\nmodule.exports.ascending  = ascending;\nmodule.exports.descending = descending;\n\n/**\n * Runs iterator over provided sorted array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} sortMethod - custom sort function\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serialOrdered(list, iterator, sortMethod, callback)\n{\n  var state = initState(list, sortMethod);\n\n  iterate(list, iterator, state, function iteratorHandler(error, result)\n  {\n    if (error)\n    {\n      callback(error, result);\n      return;\n    }\n\n    state.index++;\n\n    // are we there yet?\n    if (state.index < (state['keyedList'] || list).length)\n    {\n      iterate(list, iterator, state, iteratorHandler);\n      return;\n    }\n\n    // done here\n    callback(null, state.results);\n  });\n\n  return terminator.bind(state, callback);\n}\n\n/*\n * -- Sort methods\n */\n\n/**\n * sort helper to sort array elements in ascending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction ascending(a, b)\n{\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\n * sort helper to sort array elements in descending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction descending(a, b)\n{\n  return -1 * ascending(a, b);\n}\n", "var serialOrdered = require('./serialOrdered.js');\n\n// Public API\nmodule.exports = serial;\n\n/**\n * Runs iterator over provided array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serial(list, iterator, callback)\n{\n  return serialOrdered(list, iterator, null, callback);\n}\n", "module.exports =\n{\n  parallel      : require('./parallel.js'),\n  serial        : require('./serial.js'),\n  serialOrdered : require('./serialOrdered.js')\n};\n", "// populates missing values\nmodule.exports = function(dst, src) {\n\n  Object.keys(src).forEach(function(prop)\n  {\n    dst[prop] = dst[prop] || src[prop];\n  });\n\n  return dst;\n};\n", "var CombinedStream = require('combined-stream');\nvar util = require('util');\nvar path = require('path');\nvar http = require('http');\nvar https = require('https');\nvar parseUrl = require('url').parse;\nvar fs = require('fs');\nvar Stream = require('stream').Stream;\nvar mime = require('mime-types');\nvar asynckit = require('asynckit');\nvar populate = require('./populate.js');\n\n// Public API\nmodule.exports = FormData;\n\n// make it a Stream\nutil.inherits(FormData, CombinedStream);\n\n/**\n * Create readable \"multipart/form-data\" streams.\n * Can be used to submit forms\n * and file uploads to other web applications.\n *\n * @constructor\n * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream\n */\nfunction FormData(options) {\n  if (!(this instanceof FormData)) {\n    return new FormData(options);\n  }\n\n  this._overheadLength = 0;\n  this._valueLength = 0;\n  this._valuesToMeasure = [];\n\n  CombinedStream.call(this);\n\n  options = options || {};\n  for (var option in options) {\n    this[option] = options[option];\n  }\n}\n\nFormData.LINE_BREAK = '\\r\\n';\nFormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';\n\nFormData.prototype.append = function(field, value, options) {\n\n  options = options || {};\n\n  // allow filename as single option\n  if (typeof options == 'string') {\n    options = {filename: options};\n  }\n\n  var append = CombinedStream.prototype.append.bind(this);\n\n  // all that streamy business can't handle numbers\n  if (typeof value == 'number') {\n    value = '' + value;\n  }\n\n  // https://github.com/felixge/node-form-data/issues/38\n  if (util.isArray(value)) {\n    // Please convert your array into string\n    // the way web server expects it\n    this._error(new Error('Arrays are not supported.'));\n    return;\n  }\n\n  var header = this._multiPartHeader(field, value, options);\n  var footer = this._multiPartFooter();\n\n  append(header);\n  append(value);\n  append(footer);\n\n  // pass along options.knownLength\n  this._trackLength(header, value, options);\n};\n\nFormData.prototype._trackLength = function(header, value, options) {\n  var valueLength = 0;\n\n  // used w/ getLengthSync(), when length is known.\n  // e.g. for streaming directly from a remote server,\n  // w/ a known file a size, and not wanting to wait for\n  // incoming file to finish to get its size.\n  if (options.knownLength != null) {\n    valueLength += +options.knownLength;\n  } else if (Buffer.isBuffer(value)) {\n    valueLength = value.length;\n  } else if (typeof value === 'string') {\n    valueLength = Buffer.byteLength(value);\n  }\n\n  this._valueLength += valueLength;\n\n  // @check why add CRLF? does this account for custom/multiple CRLFs?\n  this._overheadLength +=\n    Buffer.byteLength(header) +\n    FormData.LINE_BREAK.length;\n\n  // empty or either doesn't have path or not an http response or not a stream\n  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream))) {\n    return;\n  }\n\n  // no need to bother with the length\n  if (!options.knownLength) {\n    this._valuesToMeasure.push(value);\n  }\n};\n\nFormData.prototype._lengthRetriever = function(value, callback) {\n\n  if (value.hasOwnProperty('fd')) {\n\n    // take read range into a account\n    // `end` = Infinity \u2013> read file till the end\n    //\n    // TODO: Looks like there is bug in Node fs.createReadStream\n    // it doesn't respect `end` options without `start` options\n    // Fix it when node fixes it.\n    // https://github.com/joyent/node/issues/7819\n    if (value.end != undefined && value.end != Infinity && value.start != undefined) {\n\n      // when end specified\n      // no need to calculate range\n      // inclusive, starts with 0\n      callback(null, value.end + 1 - (value.start ? value.start : 0));\n\n    // not that fast snoopy\n    } else {\n      // still need to fetch file size from fs\n      fs.stat(value.path, function(err, stat) {\n\n        var fileSize;\n\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        // update final size based on the range options\n        fileSize = stat.size - (value.start ? value.start : 0);\n        callback(null, fileSize);\n      });\n    }\n\n  // or http response\n  } else if (value.hasOwnProperty('httpVersion')) {\n    callback(null, +value.headers['content-length']);\n\n  // or request stream http://github.com/mikeal/request\n  } else if (value.hasOwnProperty('httpModule')) {\n    // wait till response come back\n    value.on('response', function(response) {\n      value.pause();\n      callback(null, +response.headers['content-length']);\n    });\n    value.resume();\n\n  // something else\n  } else {\n    callback('Unknown stream');\n  }\n};\n\nFormData.prototype._multiPartHeader = function(field, value, options) {\n  // custom header specified (as string)?\n  // it becomes responsible for boundary\n  // (e.g. to handle extra CRLFs on .NET servers)\n  if (typeof options.header == 'string') {\n    return options.header;\n  }\n\n  var contentDisposition = this._getContentDisposition(value, options);\n  var contentType = this._getContentType(value, options);\n\n  var contents = '';\n  var headers  = {\n    // add custom disposition as third element or keep it two elements if not\n    'Content-Disposition': ['form-data', 'name=\"' + field + '\"'].concat(contentDisposition || []),\n    // if no content type. allow it to be empty array\n    'Content-Type': [].concat(contentType || [])\n  };\n\n  // allow custom headers.\n  if (typeof options.header == 'object') {\n    populate(headers, options.header);\n  }\n\n  var header;\n  for (var prop in headers) {\n    if (!headers.hasOwnProperty(prop)) continue;\n    header = headers[prop];\n\n    // skip nullish headers.\n    if (header == null) {\n      continue;\n    }\n\n    // convert all headers to arrays.\n    if (!Array.isArray(header)) {\n      header = [header];\n    }\n\n    // add non-empty headers.\n    if (header.length) {\n      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;\n    }\n  }\n\n  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;\n};\n\nFormData.prototype._getContentDisposition = function(value, options) {\n\n  var filename\n    , contentDisposition\n    ;\n\n  if (typeof options.filepath === 'string') {\n    // custom filepath for relative paths\n    filename = path.normalize(options.filepath).replace(/\\\\/g, '/');\n  } else if (options.filename || value.name || value.path) {\n    // custom filename take precedence\n    // formidable and the browser add a name property\n    // fs- and request- streams have path property\n    filename = path.basename(options.filename || value.name || value.path);\n  } else if (value.readable && value.hasOwnProperty('httpVersion')) {\n    // or try http response\n    filename = path.basename(value.client._httpMessage.path || '');\n  }\n\n  if (filename) {\n    contentDisposition = 'filename=\"' + filename + '\"';\n  }\n\n  return contentDisposition;\n};\n\nFormData.prototype._getContentType = function(value, options) {\n\n  // use custom content-type above all\n  var contentType = options.contentType;\n\n  // or try `name` from formidable, browser\n  if (!contentType && value.name) {\n    contentType = mime.lookup(value.name);\n  }\n\n  // or try `path` from fs-, request- streams\n  if (!contentType && value.path) {\n    contentType = mime.lookup(value.path);\n  }\n\n  // or if it's http-reponse\n  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {\n    contentType = value.headers['content-type'];\n  }\n\n  // or guess it from the filepath or filename\n  if (!contentType && (options.filepath || options.filename)) {\n    contentType = mime.lookup(options.filepath || options.filename);\n  }\n\n  // fallback to the default content type if `value` is not simple value\n  if (!contentType && typeof value == 'object') {\n    contentType = FormData.DEFAULT_CONTENT_TYPE;\n  }\n\n  return contentType;\n};\n\nFormData.prototype._multiPartFooter = function() {\n  return function(next) {\n    var footer = FormData.LINE_BREAK;\n\n    var lastPart = (this._streams.length === 0);\n    if (lastPart) {\n      footer += this._lastBoundary();\n    }\n\n    next(footer);\n  }.bind(this);\n};\n\nFormData.prototype._lastBoundary = function() {\n  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;\n};\n\nFormData.prototype.getHeaders = function(userHeaders) {\n  var header;\n  var formHeaders = {\n    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()\n  };\n\n  for (header in userHeaders) {\n    if (userHeaders.hasOwnProperty(header)) {\n      formHeaders[header.toLowerCase()] = userHeaders[header];\n    }\n  }\n\n  return formHeaders;\n};\n\nFormData.prototype.setBoundary = function(boundary) {\n  this._boundary = boundary;\n};\n\nFormData.prototype.getBoundary = function() {\n  if (!this._boundary) {\n    this._generateBoundary();\n  }\n\n  return this._boundary;\n};\n\nFormData.prototype.getBuffer = function() {\n  var dataBuffer = new Buffer.alloc( 0 );\n  var boundary = this.getBoundary();\n\n  // Create the form content. Add Line breaks to the end of data.\n  for (var i = 0, len = this._streams.length; i < len; i++) {\n    if (typeof this._streams[i] !== 'function') {\n\n      // Add content to the buffer.\n      if(Buffer.isBuffer(this._streams[i])) {\n        dataBuffer = Buffer.concat( [dataBuffer, this._streams[i]]);\n      }else {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(this._streams[i])]);\n      }\n\n      // Add break after content.\n      if (typeof this._streams[i] !== 'string' || this._streams[i].substring( 2, boundary.length + 2 ) !== boundary) {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(FormData.LINE_BREAK)] );\n      }\n    }\n  }\n\n  // Add the footer and return the Buffer object.\n  return Buffer.concat( [dataBuffer, Buffer.from(this._lastBoundary())] );\n};\n\nFormData.prototype._generateBoundary = function() {\n  // This generates a 50 character boundary similar to those used by Firefox.\n  // They are optimized for boyer-moore parsing.\n  var boundary = '--------------------------';\n  for (var i = 0; i < 24; i++) {\n    boundary += Math.floor(Math.random() * 10).toString(16);\n  }\n\n  this._boundary = boundary;\n};\n\n// Note: getLengthSync DOESN'T calculate streams length\n// As workaround one can calculate file size manually\n// and add it as knownLength option\nFormData.prototype.getLengthSync = function() {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  // Don't get confused, there are 3 \"internal\" streams for each keyval pair\n  // so it basically checks if there is any value added to the form\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  // https://github.com/form-data/form-data/issues/40\n  if (!this.hasKnownLength()) {\n    // Some async length retrievers are present\n    // therefore synchronous length calculation is false.\n    // Please use getLength(callback) to get proper length\n    this._error(new Error('Cannot calculate proper length in synchronous way.'));\n  }\n\n  return knownLength;\n};\n\n// Public API to check if length of added values is known\n// https://github.com/form-data/form-data/issues/196\n// https://github.com/form-data/form-data/issues/262\nFormData.prototype.hasKnownLength = function() {\n  var hasKnownLength = true;\n\n  if (this._valuesToMeasure.length) {\n    hasKnownLength = false;\n  }\n\n  return hasKnownLength;\n};\n\nFormData.prototype.getLength = function(cb) {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  if (!this._valuesToMeasure.length) {\n    process.nextTick(cb.bind(this, null, knownLength));\n    return;\n  }\n\n  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    values.forEach(function(length) {\n      knownLength += length;\n    });\n\n    cb(null, knownLength);\n  });\n};\n\nFormData.prototype.submit = function(params, cb) {\n  var request\n    , options\n    , defaults = {method: 'post'}\n    ;\n\n  // parse provided url if it's string\n  // or treat it as options object\n  if (typeof params == 'string') {\n\n    params = parseUrl(params);\n    options = populate({\n      port: params.port,\n      path: params.pathname,\n      host: params.hostname,\n      protocol: params.protocol\n    }, defaults);\n\n  // use custom params\n  } else {\n\n    options = populate(params, defaults);\n    // if no port provided use default one\n    if (!options.port) {\n      options.port = options.protocol == 'https:' ? 443 : 80;\n    }\n  }\n\n  // put that good code in getHeaders to some use\n  options.headers = this.getHeaders(params.headers);\n\n  // https if specified, fallback to http in any other case\n  if (options.protocol == 'https:') {\n    request = https.request(options);\n  } else {\n    request = http.request(options);\n  }\n\n  // get content length and fire away\n  this.getLength(function(err, length) {\n    if (err && err !== 'Unknown stream') {\n      this._error(err);\n      return;\n    }\n\n    // add content length\n    if (length) {\n      request.setHeader('Content-Length', length);\n    }\n\n    this.pipe(request);\n    if (cb) {\n      var onResponse;\n\n      var callback = function (error, responce) {\n        request.removeListener('error', callback);\n        request.removeListener('response', onResponse);\n\n        return cb.call(this, error, responce);\n      };\n\n      onResponse = callback.bind(this, null);\n\n      request.on('error', callback);\n      request.on('response', onResponse);\n    }\n  }.bind(this));\n\n  return request;\n};\n\nFormData.prototype._error = function(err) {\n  if (!this.error) {\n    this.error = err;\n    this.pause();\n    this.emit('error', err);\n  }\n};\n\nFormData.prototype.toString = function () {\n  return '[object FormData]';\n};\n", "'use strict';\n\nvar parseUrl = require('url').parse;\n\nvar DEFAULT_PORTS = {\n  ftp: 21,\n  gopher: 70,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443,\n};\n\nvar stringEndsWith = String.prototype.endsWith || function(s) {\n  return s.length <= this.length &&\n    this.indexOf(s, this.length - s.length) !== -1;\n};\n\n/**\n * @param {string|object} url - The URL, or the result from url.parse.\n * @return {string} The URL of the proxy that should handle the request to the\n *  given URL. If no proxy is set, this will be an empty string.\n */\nfunction getProxyForUrl(url) {\n  var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};\n  var proto = parsedUrl.protocol;\n  var hostname = parsedUrl.host;\n  var port = parsedUrl.port;\n  if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {\n    return '';  // Don't proxy URLs without a valid scheme or host.\n  }\n\n  proto = proto.split(':', 1)[0];\n  // Stripping ports in this way instead of using parsedUrl.hostname to make\n  // sure that the brackets around IPv6 addresses are kept.\n  hostname = hostname.replace(/:\\d*$/, '');\n  port = parseInt(port) || DEFAULT_PORTS[proto] || 0;\n  if (!shouldProxy(hostname, port)) {\n    return '';  // Don't proxy URLs that match NO_PROXY.\n  }\n\n  var proxy =\n    getEnv('npm_config_' + proto + '_proxy') ||\n    getEnv(proto + '_proxy') ||\n    getEnv('npm_config_proxy') ||\n    getEnv('all_proxy');\n  if (proxy && proxy.indexOf('://') === -1) {\n    // Missing scheme in proxy, default to the requested URL's scheme.\n    proxy = proto + '://' + proxy;\n  }\n  return proxy;\n}\n\n/**\n * Determines whether a given URL should be proxied.\n *\n * @param {string} hostname - The host name of the URL.\n * @param {number} port - The effective port of the URL.\n * @returns {boolean} Whether the given URL should be proxied.\n * @private\n */\nfunction shouldProxy(hostname, port) {\n  var NO_PROXY =\n    (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();\n  if (!NO_PROXY) {\n    return true;  // Always proxy if NO_PROXY is not set.\n  }\n  if (NO_PROXY === '*') {\n    return false;  // Never proxy if wildcard is set.\n  }\n\n  return NO_PROXY.split(/[,\\s]/).every(function(proxy) {\n    if (!proxy) {\n      return true;  // Skip zero-length hosts.\n    }\n    var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\n    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\n    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\n    if (parsedProxyPort && parsedProxyPort !== port) {\n      return true;  // Skip if ports don't match.\n    }\n\n    if (!/^[.*]/.test(parsedProxyHostname)) {\n      // No wildcards, so stop proxying if there is an exact match.\n      return hostname !== parsedProxyHostname;\n    }\n\n    if (parsedProxyHostname.charAt(0) === '*') {\n      // Remove leading wildcard.\n      parsedProxyHostname = parsedProxyHostname.slice(1);\n    }\n    // Stop proxying if the hostname ends with the no_proxy host.\n    return !stringEndsWith.call(hostname, parsedProxyHostname);\n  });\n}\n\n/**\n * Get the value for an environment variable.\n *\n * @param {string} key - The name of the environment variable.\n * @return {string} The value of the environment variable.\n * @private\n */\nfunction getEnv(key) {\n  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\n}\n\nexports.getProxyForUrl = getProxyForUrl;\n", "var debug;\n\nmodule.exports = function () {\n  if (!debug) {\n    try {\n      /* eslint global-require: off */\n      debug = require(\"debug\")(\"follow-redirects\");\n    }\n    catch (error) { /* */ }\n    if (typeof debug !== \"function\") {\n      debug = function () { /* */ };\n    }\n  }\n  debug.apply(null, arguments);\n};\n", "var url = require(\"url\");\nvar URL = url.URL;\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar Writable = require(\"stream\").Writable;\nvar assert = require(\"assert\");\nvar debug = require(\"./debug\");\n\n// Create handlers that pass events from native requests\nvar events = [\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"];\nvar eventHandlers = Object.create(null);\nevents.forEach(function (event) {\n  eventHandlers[event] = function (arg1, arg2, arg3) {\n    this._redirectable.emit(event, arg1, arg2, arg3);\n  };\n});\n\nvar InvalidUrlError = createErrorType(\n  \"ERR_INVALID_URL\",\n  \"Invalid URL\",\n  TypeError\n);\n// Error types with codes\nvar RedirectionError = createErrorType(\n  \"ERR_FR_REDIRECTION_FAILURE\",\n  \"Redirected request failed\"\n);\nvar TooManyRedirectsError = createErrorType(\n  \"ERR_FR_TOO_MANY_REDIRECTS\",\n  \"Maximum number of redirects exceeded\"\n);\nvar MaxBodyLengthExceededError = createErrorType(\n  \"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\",\n  \"Request body larger than maxBodyLength limit\"\n);\nvar WriteAfterEndError = createErrorType(\n  \"ERR_STREAM_WRITE_AFTER_END\",\n  \"write after end\"\n);\n\n// An HTTP(S) request that can be redirected\nfunction RedirectableRequest(options, responseCallback) {\n  // Initialize the request\n  Writable.call(this);\n  this._sanitizeOptions(options);\n  this._options = options;\n  this._ended = false;\n  this._ending = false;\n  this._redirectCount = 0;\n  this._redirects = [];\n  this._requestBodyLength = 0;\n  this._requestBodyBuffers = [];\n\n  // Attach a callback if passed\n  if (responseCallback) {\n    this.on(\"response\", responseCallback);\n  }\n\n  // React to responses of native requests\n  var self = this;\n  this._onNativeResponse = function (response) {\n    self._processResponse(response);\n  };\n\n  // Perform the first request\n  this._performRequest();\n}\nRedirectableRequest.prototype = Object.create(Writable.prototype);\n\nRedirectableRequest.prototype.abort = function () {\n  abortRequest(this._currentRequest);\n  this.emit(\"abort\");\n};\n\n// Writes buffered data to the current native request\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\n  // Writing is not allowed if end has been called\n  if (this._ending) {\n    throw new WriteAfterEndError();\n  }\n\n  // Validate input and shift parameters if necessary\n  if (!isString(data) && !isBuffer(data)) {\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\n  }\n  if (isFunction(encoding)) {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Ignore empty buffers, since writing them doesn't invoke the callback\n  // https://github.com/nodejs/node/issues/22066\n  if (data.length === 0) {\n    if (callback) {\n      callback();\n    }\n    return;\n  }\n  // Only write when we don't exceed the maximum body length\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n    this._requestBodyBuffers.push({ data: data, encoding: encoding });\n    this._currentRequest.write(data, encoding, callback);\n  }\n  // Error when we exceed the maximum body length\n  else {\n    this.emit(\"error\", new MaxBodyLengthExceededError());\n    this.abort();\n  }\n};\n\n// Ends the current native request\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\n  // Shift parameters if necessary\n  if (isFunction(data)) {\n    callback = data;\n    data = encoding = null;\n  }\n  else if (isFunction(encoding)) {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Write data if needed and end\n  if (!data) {\n    this._ended = this._ending = true;\n    this._currentRequest.end(null, null, callback);\n  }\n  else {\n    var self = this;\n    var currentRequest = this._currentRequest;\n    this.write(data, encoding, function () {\n      self._ended = true;\n      currentRequest.end(null, null, callback);\n    });\n    this._ending = true;\n  }\n};\n\n// Sets a header value on the current native request\nRedirectableRequest.prototype.setHeader = function (name, value) {\n  this._options.headers[name] = value;\n  this._currentRequest.setHeader(name, value);\n};\n\n// Clears a header value on the current native request\nRedirectableRequest.prototype.removeHeader = function (name) {\n  delete this._options.headers[name];\n  this._currentRequest.removeHeader(name);\n};\n\n// Global timeout for all underlying requests\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\n  var self = this;\n\n  // Destroys the socket on timeout\n  function destroyOnTimeout(socket) {\n    socket.setTimeout(msecs);\n    socket.removeListener(\"timeout\", socket.destroy);\n    socket.addListener(\"timeout\", socket.destroy);\n  }\n\n  // Sets up a timer to trigger a timeout event\n  function startTimer(socket) {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n    }\n    self._timeout = setTimeout(function () {\n      self.emit(\"timeout\");\n      clearTimer();\n    }, msecs);\n    destroyOnTimeout(socket);\n  }\n\n  // Stops a timeout from triggering\n  function clearTimer() {\n    // Clear the timeout\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n      self._timeout = null;\n    }\n\n    // Clean up all attached listeners\n    self.removeListener(\"abort\", clearTimer);\n    self.removeListener(\"error\", clearTimer);\n    self.removeListener(\"response\", clearTimer);\n    if (callback) {\n      self.removeListener(\"timeout\", callback);\n    }\n    if (!self.socket) {\n      self._currentRequest.removeListener(\"socket\", startTimer);\n    }\n  }\n\n  // Attach callback if passed\n  if (callback) {\n    this.on(\"timeout\", callback);\n  }\n\n  // Start the timer if or when the socket is opened\n  if (this.socket) {\n    startTimer(this.socket);\n  }\n  else {\n    this._currentRequest.once(\"socket\", startTimer);\n  }\n\n  // Clean up on events\n  this.on(\"socket\", destroyOnTimeout);\n  this.on(\"abort\", clearTimer);\n  this.on(\"error\", clearTimer);\n  this.on(\"response\", clearTimer);\n\n  return this;\n};\n\n// Proxy all other public ClientRequest methods\n[\n  \"flushHeaders\", \"getHeader\",\n  \"setNoDelay\", \"setSocketKeepAlive\",\n].forEach(function (method) {\n  RedirectableRequest.prototype[method] = function (a, b) {\n    return this._currentRequest[method](a, b);\n  };\n});\n\n// Proxy all public ClientRequest properties\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\n  Object.defineProperty(RedirectableRequest.prototype, property, {\n    get: function () { return this._currentRequest[property]; },\n  });\n});\n\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\n  // Ensure headers are always present\n  if (!options.headers) {\n    options.headers = {};\n  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n  }\n\n  // Complete the URL object when necessary\n  if (!options.pathname && options.path) {\n    var searchPos = options.path.indexOf(\"?\");\n    if (searchPos < 0) {\n      options.pathname = options.path;\n    }\n    else {\n      options.pathname = options.path.substring(0, searchPos);\n      options.search = options.path.substring(searchPos);\n    }\n  }\n};\n\n\n// Executes the next native request (initial or redirect)\nRedirectableRequest.prototype._performRequest = function () {\n  // Load the native protocol\n  var protocol = this._options.protocol;\n  var nativeProtocol = this._options.nativeProtocols[protocol];\n  if (!nativeProtocol) {\n    this.emit(\"error\", new TypeError(\"Unsupported protocol \" + protocol));\n    return;\n  }\n\n  // If specified, use the agent corresponding to the protocol\n  // (HTTP and HTTPS use different types of agents)\n  if (this._options.agents) {\n    var scheme = protocol.slice(0, -1);\n    this._options.agent = this._options.agents[scheme];\n  }\n\n  // Create the native request and set up its event handlers\n  var request = this._currentRequest =\n        nativeProtocol.request(this._options, this._onNativeResponse);\n  request._redirectable = this;\n  for (var event of events) {\n    request.on(event, eventHandlers[event]);\n  }\n\n  // RFC7230\u00A75.3.1: When making a request directly to an origin server, [\u2026]\n  // a client MUST send only the absolute path [\u2026] as the request-target.\n  this._currentUrl = /^\\//.test(this._options.path) ?\n    url.format(this._options) :\n    // When making a request to a proxy, [\u2026]\n    // a client MUST send the target URI in absolute-form [\u2026].\n    this._options.path;\n\n  // End a redirected request\n  // (The first request must be ended explicitly with RedirectableRequest#end)\n  if (this._isRedirect) {\n    // Write the request entity and end\n    var i = 0;\n    var self = this;\n    var buffers = this._requestBodyBuffers;\n    (function writeNext(error) {\n      // Only write if this request has not been redirected yet\n      /* istanbul ignore else */\n      if (request === self._currentRequest) {\n        // Report any write errors\n        /* istanbul ignore if */\n        if (error) {\n          self.emit(\"error\", error);\n        }\n        // Write the next buffer if there are still left\n        else if (i < buffers.length) {\n          var buffer = buffers[i++];\n          /* istanbul ignore else */\n          if (!request.finished) {\n            request.write(buffer.data, buffer.encoding, writeNext);\n          }\n        }\n        // End the request if `end` has been called on us\n        else if (self._ended) {\n          request.end();\n        }\n      }\n    }());\n  }\n};\n\n// Processes a response from the current native request\nRedirectableRequest.prototype._processResponse = function (response) {\n  // Store the redirected response\n  var statusCode = response.statusCode;\n  if (this._options.trackRedirects) {\n    this._redirects.push({\n      url: this._currentUrl,\n      headers: response.headers,\n      statusCode: statusCode,\n    });\n  }\n\n  // RFC7231\u00A76.4: The 3xx (Redirection) class of status code indicates\n  // that further action needs to be taken by the user agent in order to\n  // fulfill the request. If a Location header field is provided,\n  // the user agent MAY automatically redirect its request to the URI\n  // referenced by the Location field value,\n  // even if the specific status code is not understood.\n\n  // If the response is not a redirect; return it as-is\n  var location = response.headers.location;\n  if (!location || this._options.followRedirects === false ||\n      statusCode < 300 || statusCode >= 400) {\n    response.responseUrl = this._currentUrl;\n    response.redirects = this._redirects;\n    this.emit(\"response\", response);\n\n    // Clean up\n    this._requestBodyBuffers = [];\n    return;\n  }\n\n  // The response is a redirect, so abort the current request\n  abortRequest(this._currentRequest);\n  // Discard the remainder of the response to avoid waiting for data\n  response.destroy();\n\n  // RFC7231\u00A76.4: A client SHOULD detect and intervene\n  // in cyclical redirections (i.e., \"infinite\" redirection loops).\n  if (++this._redirectCount > this._options.maxRedirects) {\n    this.emit(\"error\", new TooManyRedirectsError());\n    return;\n  }\n\n  // Store the request headers if applicable\n  var requestHeaders;\n  var beforeRedirect = this._options.beforeRedirect;\n  if (beforeRedirect) {\n    requestHeaders = Object.assign({\n      // The Host header was set by nativeProtocol.request\n      Host: response.req.getHeader(\"host\"),\n    }, this._options.headers);\n  }\n\n  // RFC7231\u00A76.4: Automatic redirection needs to done with\n  // care for methods not known to be safe, [\u2026]\n  // RFC7231\u00A76.4.2\u20133: For historical reasons, a user agent MAY change\n  // the request method from POST to GET for the subsequent request.\n  var method = this._options.method;\n  if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" ||\n      // RFC7231\u00A76.4.4: The 303 (See Other) status code indicates that\n      // the server is redirecting the user agent to a different resource [\u2026]\n      // A user agent can perform a retrieval request targeting that URI\n      // (a GET or HEAD request if using HTTP) [\u2026]\n      (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {\n    this._options.method = \"GET\";\n    // Drop a possible entity and headers related to it\n    this._requestBodyBuffers = [];\n    removeMatchingHeaders(/^content-/i, this._options.headers);\n  }\n\n  // Drop the Host header, as the redirect might lead to a different host\n  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);\n\n  // If the redirect is relative, carry over the host of the last request\n  var currentUrlParts = url.parse(this._currentUrl);\n  var currentHost = currentHostHeader || currentUrlParts.host;\n  var currentUrl = /^\\w+:/.test(location) ? this._currentUrl :\n    url.format(Object.assign(currentUrlParts, { host: currentHost }));\n\n  // Determine the URL of the redirection\n  var redirectUrl;\n  try {\n    redirectUrl = url.resolve(currentUrl, location);\n  }\n  catch (cause) {\n    this.emit(\"error\", new RedirectionError({ cause: cause }));\n    return;\n  }\n\n  // Create the redirected request\n  debug(\"redirecting to\", redirectUrl);\n  this._isRedirect = true;\n  var redirectUrlParts = url.parse(redirectUrl);\n  Object.assign(this._options, redirectUrlParts);\n\n  // Drop confidential headers when redirecting to a less secure protocol\n  // or to a different domain that is not a superdomain\n  if (redirectUrlParts.protocol !== currentUrlParts.protocol &&\n     redirectUrlParts.protocol !== \"https:\" ||\n     redirectUrlParts.host !== currentHost &&\n     !isSubdomain(redirectUrlParts.host, currentHost)) {\n    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);\n  }\n\n  // Evaluate the beforeRedirect callback\n  if (isFunction(beforeRedirect)) {\n    var responseDetails = {\n      headers: response.headers,\n      statusCode: statusCode,\n    };\n    var requestDetails = {\n      url: currentUrl,\n      method: method,\n      headers: requestHeaders,\n    };\n    try {\n      beforeRedirect(this._options, responseDetails, requestDetails);\n    }\n    catch (err) {\n      this.emit(\"error\", err);\n      return;\n    }\n    this._sanitizeOptions(this._options);\n  }\n\n  // Perform the redirected request\n  try {\n    this._performRequest();\n  }\n  catch (cause) {\n    this.emit(\"error\", new RedirectionError({ cause: cause }));\n  }\n};\n\n// Wraps the key/value object of protocols with redirect functionality\nfunction wrap(protocols) {\n  // Default settings\n  var exports = {\n    maxRedirects: 21,\n    maxBodyLength: 10 * 1024 * 1024,\n  };\n\n  // Wrap each protocol\n  var nativeProtocols = {};\n  Object.keys(protocols).forEach(function (scheme) {\n    var protocol = scheme + \":\";\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);\n\n    // Executes a request, following redirects\n    function request(input, options, callback) {\n      // Parse parameters\n      if (isString(input)) {\n        var parsed;\n        try {\n          parsed = urlToOptions(new URL(input));\n        }\n        catch (err) {\n          /* istanbul ignore next */\n          parsed = url.parse(input);\n        }\n        if (!isString(parsed.protocol)) {\n          throw new InvalidUrlError({ input });\n        }\n        input = parsed;\n      }\n      else if (URL && (input instanceof URL)) {\n        input = urlToOptions(input);\n      }\n      else {\n        callback = options;\n        options = input;\n        input = { protocol: protocol };\n      }\n      if (isFunction(options)) {\n        callback = options;\n        options = null;\n      }\n\n      // Set defaults\n      options = Object.assign({\n        maxRedirects: exports.maxRedirects,\n        maxBodyLength: exports.maxBodyLength,\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      if (!isString(options.host) && !isString(options.hostname)) {\n        options.hostname = \"::1\";\n      }\n\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n      debug(\"options\", options);\n      return new RedirectableRequest(options, callback);\n    }\n\n    // Executes a GET request, following redirects\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    }\n\n    // Expose the properties on the wrapped protocol\n    Object.defineProperties(wrappedProtocol, {\n      request: { value: request, configurable: true, enumerable: true, writable: true },\n      get: { value: get, configurable: true, enumerable: true, writable: true },\n    });\n  });\n  return exports;\n}\n\n/* istanbul ignore next */\nfunction noop() { /* empty */ }\n\n// from https://github.com/nodejs/node/blob/master/lib/internal/url.js\nfunction urlToOptions(urlObject) {\n  var options = {\n    protocol: urlObject.protocol,\n    hostname: urlObject.hostname.startsWith(\"[\") ?\n      /* istanbul ignore next */\n      urlObject.hostname.slice(1, -1) :\n      urlObject.hostname,\n    hash: urlObject.hash,\n    search: urlObject.search,\n    pathname: urlObject.pathname,\n    path: urlObject.pathname + urlObject.search,\n    href: urlObject.href,\n  };\n  if (urlObject.port !== \"\") {\n    options.port = Number(urlObject.port);\n  }\n  return options;\n}\n\nfunction removeMatchingHeaders(regex, headers) {\n  var lastValue;\n  for (var header in headers) {\n    if (regex.test(header)) {\n      lastValue = headers[header];\n      delete headers[header];\n    }\n  }\n  return (lastValue === null || typeof lastValue === \"undefined\") ?\n    undefined : String(lastValue).trim();\n}\n\nfunction createErrorType(code, message, baseClass) {\n  // Create constructor\n  function CustomError(properties) {\n    Error.captureStackTrace(this, this.constructor);\n    Object.assign(this, properties || {});\n    this.code = code;\n    this.message = this.cause ? message + \": \" + this.cause.message : message;\n  }\n\n  // Attach constructor and set default properties\n  CustomError.prototype = new (baseClass || Error)();\n  CustomError.prototype.constructor = CustomError;\n  CustomError.prototype.name = \"Error [\" + code + \"]\";\n  return CustomError;\n}\n\nfunction abortRequest(request) {\n  for (var event of events) {\n    request.removeListener(event, eventHandlers[event]);\n  }\n  request.on(\"error\", noop);\n  request.abort();\n}\n\nfunction isSubdomain(subdomain, domain) {\n  assert(isString(subdomain) && isString(domain));\n  var dot = subdomain.length - domain.length - 1;\n  return dot > 0 && subdomain[dot] === \".\" && subdomain.endsWith(domain);\n}\n\nfunction isString(value) {\n  return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\n\nfunction isBuffer(value) {\n  return typeof value === \"object\" && (\"length\" in value);\n}\n\n// Exports\nmodule.exports = wrap({ http: http, https: https });\nmodule.exports.wrap = wrap;\n", "{\"Aacute\":\"\u00C1\",\"aacute\":\"\u00E1\",\"Abreve\":\"\u0102\",\"abreve\":\"\u0103\",\"ac\":\"\u223E\",\"acd\":\"\u223F\",\"acE\":\"\u223E\u0333\",\"Acirc\":\"\u00C2\",\"acirc\":\"\u00E2\",\"acute\":\"\u00B4\",\"Acy\":\"\u0410\",\"acy\":\"\u0430\",\"AElig\":\"\u00C6\",\"aelig\":\"\u00E6\",\"af\":\"\u2061\",\"Afr\":\"\uD835\uDD04\",\"afr\":\"\uD835\uDD1E\",\"Agrave\":\"\u00C0\",\"agrave\":\"\u00E0\",\"alefsym\":\"\u2135\",\"aleph\":\"\u2135\",\"Alpha\":\"\u0391\",\"alpha\":\"\u03B1\",\"Amacr\":\"\u0100\",\"amacr\":\"\u0101\",\"amalg\":\"\u2A3F\",\"amp\":\"&\",\"AMP\":\"&\",\"andand\":\"\u2A55\",\"And\":\"\u2A53\",\"and\":\"\u2227\",\"andd\":\"\u2A5C\",\"andslope\":\"\u2A58\",\"andv\":\"\u2A5A\",\"ang\":\"\u2220\",\"ange\":\"\u29A4\",\"angle\":\"\u2220\",\"angmsdaa\":\"\u29A8\",\"angmsdab\":\"\u29A9\",\"angmsdac\":\"\u29AA\",\"angmsdad\":\"\u29AB\",\"angmsdae\":\"\u29AC\",\"angmsdaf\":\"\u29AD\",\"angmsdag\":\"\u29AE\",\"angmsdah\":\"\u29AF\",\"angmsd\":\"\u2221\",\"angrt\":\"\u221F\",\"angrtvb\":\"\u22BE\",\"angrtvbd\":\"\u299D\",\"angsph\":\"\u2222\",\"angst\":\"\u00C5\",\"angzarr\":\"\u237C\",\"Aogon\":\"\u0104\",\"aogon\":\"\u0105\",\"Aopf\":\"\uD835\uDD38\",\"aopf\":\"\uD835\uDD52\",\"apacir\":\"\u2A6F\",\"ap\":\"\u2248\",\"apE\":\"\u2A70\",\"ape\":\"\u224A\",\"apid\":\"\u224B\",\"apos\":\"'\",\"ApplyFunction\":\"\u2061\",\"approx\":\"\u2248\",\"approxeq\":\"\u224A\",\"Aring\":\"\u00C5\",\"aring\":\"\u00E5\",\"Ascr\":\"\uD835\uDC9C\",\"ascr\":\"\uD835\uDCB6\",\"Assign\":\"\u2254\",\"ast\":\"*\",\"asymp\":\"\u2248\",\"asympeq\":\"\u224D\",\"Atilde\":\"\u00C3\",\"atilde\":\"\u00E3\",\"Auml\":\"\u00C4\",\"auml\":\"\u00E4\",\"awconint\":\"\u2233\",\"awint\":\"\u2A11\",\"backcong\":\"\u224C\",\"backepsilon\":\"\u03F6\",\"backprime\":\"\u2035\",\"backsim\":\"\u223D\",\"backsimeq\":\"\u22CD\",\"Backslash\":\"\u2216\",\"Barv\":\"\u2AE7\",\"barvee\":\"\u22BD\",\"barwed\":\"\u2305\",\"Barwed\":\"\u2306\",\"barwedge\":\"\u2305\",\"bbrk\":\"\u23B5\",\"bbrktbrk\":\"\u23B6\",\"bcong\":\"\u224C\",\"Bcy\":\"\u0411\",\"bcy\":\"\u0431\",\"bdquo\":\"\u201E\",\"becaus\":\"\u2235\",\"because\":\"\u2235\",\"Because\":\"\u2235\",\"bemptyv\":\"\u29B0\",\"bepsi\":\"\u03F6\",\"bernou\":\"\u212C\",\"Bernoullis\":\"\u212C\",\"Beta\":\"\u0392\",\"beta\":\"\u03B2\",\"beth\":\"\u2136\",\"between\":\"\u226C\",\"Bfr\":\"\uD835\uDD05\",\"bfr\":\"\uD835\uDD1F\",\"bigcap\":\"\u22C2\",\"bigcirc\":\"\u25EF\",\"bigcup\":\"\u22C3\",\"bigodot\":\"\u2A00\",\"bigoplus\":\"\u2A01\",\"bigotimes\":\"\u2A02\",\"bigsqcup\":\"\u2A06\",\"bigstar\":\"\u2605\",\"bigtriangledown\":\"\u25BD\",\"bigtriangleup\":\"\u25B3\",\"biguplus\":\"\u2A04\",\"bigvee\":\"\u22C1\",\"bigwedge\":\"\u22C0\",\"bkarow\":\"\u290D\",\"blacklozenge\":\"\u29EB\",\"blacksquare\":\"\u25AA\",\"blacktriangle\":\"\u25B4\",\"blacktriangledown\":\"\u25BE\",\"blacktriangleleft\":\"\u25C2\",\"blacktriangleright\":\"\u25B8\",\"blank\":\"\u2423\",\"blk12\":\"\u2592\",\"blk14\":\"\u2591\",\"blk34\":\"\u2593\",\"block\":\"\u2588\",\"bne\":\"=\u20E5\",\"bnequiv\":\"\u2261\u20E5\",\"bNot\":\"\u2AED\",\"bnot\":\"\u2310\",\"Bopf\":\"\uD835\uDD39\",\"bopf\":\"\uD835\uDD53\",\"bot\":\"\u22A5\",\"bottom\":\"\u22A5\",\"bowtie\":\"\u22C8\",\"boxbox\":\"\u29C9\",\"boxdl\":\"\u2510\",\"boxdL\":\"\u2555\",\"boxDl\":\"\u2556\",\"boxDL\":\"\u2557\",\"boxdr\":\"\u250C\",\"boxdR\":\"\u2552\",\"boxDr\":\"\u2553\",\"boxDR\":\"\u2554\",\"boxh\":\"\u2500\",\"boxH\":\"\u2550\",\"boxhd\":\"\u252C\",\"boxHd\":\"\u2564\",\"boxhD\":\"\u2565\",\"boxHD\":\"\u2566\",\"boxhu\":\"\u2534\",\"boxHu\":\"\u2567\",\"boxhU\":\"\u2568\",\"boxHU\":\"\u2569\",\"boxminus\":\"\u229F\",\"boxplus\":\"\u229E\",\"boxtimes\":\"\u22A0\",\"boxul\":\"\u2518\",\"boxuL\":\"\u255B\",\"boxUl\":\"\u255C\",\"boxUL\":\"\u255D\",\"boxur\":\"\u2514\",\"boxuR\":\"\u2558\",\"boxUr\":\"\u2559\",\"boxUR\":\"\u255A\",\"boxv\":\"\u2502\",\"boxV\":\"\u2551\",\"boxvh\":\"\u253C\",\"boxvH\":\"\u256A\",\"boxVh\":\"\u256B\",\"boxVH\":\"\u256C\",\"boxvl\":\"\u2524\",\"boxvL\":\"\u2561\",\"boxVl\":\"\u2562\",\"boxVL\":\"\u2563\",\"boxvr\":\"\u251C\",\"boxvR\":\"\u255E\",\"boxVr\":\"\u255F\",\"boxVR\":\"\u2560\",\"bprime\":\"\u2035\",\"breve\":\"\u02D8\",\"Breve\":\"\u02D8\",\"brvbar\":\"\u00A6\",\"bscr\":\"\uD835\uDCB7\",\"Bscr\":\"\u212C\",\"bsemi\":\"\u204F\",\"bsim\":\"\u223D\",\"bsime\":\"\u22CD\",\"bsolb\":\"\u29C5\",\"bsol\":\"\\\\\",\"bsolhsub\":\"\u27C8\",\"bull\":\"\u2022\",\"bullet\":\"\u2022\",\"bump\":\"\u224E\",\"bumpE\":\"\u2AAE\",\"bumpe\":\"\u224F\",\"Bumpeq\":\"\u224E\",\"bumpeq\":\"\u224F\",\"Cacute\":\"\u0106\",\"cacute\":\"\u0107\",\"capand\":\"\u2A44\",\"capbrcup\":\"\u2A49\",\"capcap\":\"\u2A4B\",\"cap\":\"\u2229\",\"Cap\":\"\u22D2\",\"capcup\":\"\u2A47\",\"capdot\":\"\u2A40\",\"CapitalDifferentialD\":\"\u2145\",\"caps\":\"\u2229\uFE00\",\"caret\":\"\u2041\",\"caron\":\"\u02C7\",\"Cayleys\":\"\u212D\",\"ccaps\":\"\u2A4D\",\"Ccaron\":\"\u010C\",\"ccaron\":\"\u010D\",\"Ccedil\":\"\u00C7\",\"ccedil\":\"\u00E7\",\"Ccirc\":\"\u0108\",\"ccirc\":\"\u0109\",\"Cconint\":\"\u2230\",\"ccups\":\"\u2A4C\",\"ccupssm\":\"\u2A50\",\"Cdot\":\"\u010A\",\"cdot\":\"\u010B\",\"cedil\":\"\u00B8\",\"Cedilla\":\"\u00B8\",\"cemptyv\":\"\u29B2\",\"cent\":\"\u00A2\",\"centerdot\":\"\u00B7\",\"CenterDot\":\"\u00B7\",\"cfr\":\"\uD835\uDD20\",\"Cfr\":\"\u212D\",\"CHcy\":\"\u0427\",\"chcy\":\"\u0447\",\"check\":\"\u2713\",\"checkmark\":\"\u2713\",\"Chi\":\"\u03A7\",\"chi\":\"\u03C7\",\"circ\":\"\u02C6\",\"circeq\":\"\u2257\",\"circlearrowleft\":\"\u21BA\",\"circlearrowright\":\"\u21BB\",\"circledast\":\"\u229B\",\"circledcirc\":\"\u229A\",\"circleddash\":\"\u229D\",\"CircleDot\":\"\u2299\",\"circledR\":\"\u00AE\",\"circledS\":\"\u24C8\",\"CircleMinus\":\"\u2296\",\"CirclePlus\":\"\u2295\",\"CircleTimes\":\"\u2297\",\"cir\":\"\u25CB\",\"cirE\":\"\u29C3\",\"cire\":\"\u2257\",\"cirfnint\":\"\u2A10\",\"cirmid\":\"\u2AEF\",\"cirscir\":\"\u29C2\",\"ClockwiseContourIntegral\":\"\u2232\",\"CloseCurlyDoubleQuote\":\"\u201D\",\"CloseCurlyQuote\":\"\u2019\",\"clubs\":\"\u2663\",\"clubsuit\":\"\u2663\",\"colon\":\":\",\"Colon\":\"\u2237\",\"Colone\":\"\u2A74\",\"colone\":\"\u2254\",\"coloneq\":\"\u2254\",\"comma\":\",\",\"commat\":\"@\",\"comp\":\"\u2201\",\"compfn\":\"\u2218\",\"complement\":\"\u2201\",\"complexes\":\"\u2102\",\"cong\":\"\u2245\",\"congdot\":\"\u2A6D\",\"Congruent\":\"\u2261\",\"conint\":\"\u222E\",\"Conint\":\"\u222F\",\"ContourIntegral\":\"\u222E\",\"copf\":\"\uD835\uDD54\",\"Copf\":\"\u2102\",\"coprod\":\"\u2210\",\"Coproduct\":\"\u2210\",\"copy\":\"\u00A9\",\"COPY\":\"\u00A9\",\"copysr\":\"\u2117\",\"CounterClockwiseContourIntegral\":\"\u2233\",\"crarr\":\"\u21B5\",\"cross\":\"\u2717\",\"Cross\":\"\u2A2F\",\"Cscr\":\"\uD835\uDC9E\",\"cscr\":\"\uD835\uDCB8\",\"csub\":\"\u2ACF\",\"csube\":\"\u2AD1\",\"csup\":\"\u2AD0\",\"csupe\":\"\u2AD2\",\"ctdot\":\"\u22EF\",\"cudarrl\":\"\u2938\",\"cudarrr\":\"\u2935\",\"cuepr\":\"\u22DE\",\"cuesc\":\"\u22DF\",\"cularr\":\"\u21B6\",\"cularrp\":\"\u293D\",\"cupbrcap\":\"\u2A48\",\"cupcap\":\"\u2A46\",\"CupCap\":\"\u224D\",\"cup\":\"\u222A\",\"Cup\":\"\u22D3\",\"cupcup\":\"\u2A4A\",\"cupdot\":\"\u228D\",\"cupor\":\"\u2A45\",\"cups\":\"\u222A\uFE00\",\"curarr\":\"\u21B7\",\"curarrm\":\"\u293C\",\"curlyeqprec\":\"\u22DE\",\"curlyeqsucc\":\"\u22DF\",\"curlyvee\":\"\u22CE\",\"curlywedge\":\"\u22CF\",\"curren\":\"\u00A4\",\"curvearrowleft\":\"\u21B6\",\"curvearrowright\":\"\u21B7\",\"cuvee\":\"\u22CE\",\"cuwed\":\"\u22CF\",\"cwconint\":\"\u2232\",\"cwint\":\"\u2231\",\"cylcty\":\"\u232D\",\"dagger\":\"\u2020\",\"Dagger\":\"\u2021\",\"daleth\":\"\u2138\",\"darr\":\"\u2193\",\"Darr\":\"\u21A1\",\"dArr\":\"\u21D3\",\"dash\":\"\u2010\",\"Dashv\":\"\u2AE4\",\"dashv\":\"\u22A3\",\"dbkarow\":\"\u290F\",\"dblac\":\"\u02DD\",\"Dcaron\":\"\u010E\",\"dcaron\":\"\u010F\",\"Dcy\":\"\u0414\",\"dcy\":\"\u0434\",\"ddagger\":\"\u2021\",\"ddarr\":\"\u21CA\",\"DD\":\"\u2145\",\"dd\":\"\u2146\",\"DDotrahd\":\"\u2911\",\"ddotseq\":\"\u2A77\",\"deg\":\"\u00B0\",\"Del\":\"\u2207\",\"Delta\":\"\u0394\",\"delta\":\"\u03B4\",\"demptyv\":\"\u29B1\",\"dfisht\":\"\u297F\",\"Dfr\":\"\uD835\uDD07\",\"dfr\":\"\uD835\uDD21\",\"dHar\":\"\u2965\",\"dharl\":\"\u21C3\",\"dharr\":\"\u21C2\",\"DiacriticalAcute\":\"\u00B4\",\"DiacriticalDot\":\"\u02D9\",\"DiacriticalDoubleAcute\":\"\u02DD\",\"DiacriticalGrave\":\"`\",\"DiacriticalTilde\":\"\u02DC\",\"diam\":\"\u22C4\",\"diamond\":\"\u22C4\",\"Diamond\":\"\u22C4\",\"diamondsuit\":\"\u2666\",\"diams\":\"\u2666\",\"die\":\"\u00A8\",\"DifferentialD\":\"\u2146\",\"digamma\":\"\u03DD\",\"disin\":\"\u22F2\",\"div\":\"\u00F7\",\"divide\":\"\u00F7\",\"divideontimes\":\"\u22C7\",\"divonx\":\"\u22C7\",\"DJcy\":\"\u0402\",\"djcy\":\"\u0452\",\"dlcorn\":\"\u231E\",\"dlcrop\":\"\u230D\",\"dollar\":\"$\",\"Dopf\":\"\uD835\uDD3B\",\"dopf\":\"\uD835\uDD55\",\"Dot\":\"\u00A8\",\"dot\":\"\u02D9\",\"DotDot\":\"\u20DC\",\"doteq\":\"\u2250\",\"doteqdot\":\"\u2251\",\"DotEqual\":\"\u2250\",\"dotminus\":\"\u2238\",\"dotplus\":\"\u2214\",\"dotsquare\":\"\u22A1\",\"doublebarwedge\":\"\u2306\",\"DoubleContourIntegral\":\"\u222F\",\"DoubleDot\":\"\u00A8\",\"DoubleDownArrow\":\"\u21D3\",\"DoubleLeftArrow\":\"\u21D0\",\"DoubleLeftRightArrow\":\"\u21D4\",\"DoubleLeftTee\":\"\u2AE4\",\"DoubleLongLeftArrow\":\"\u27F8\",\"DoubleLongLeftRightArrow\":\"\u27FA\",\"DoubleLongRightArrow\":\"\u27F9\",\"DoubleRightArrow\":\"\u21D2\",\"DoubleRightTee\":\"\u22A8\",\"DoubleUpArrow\":\"\u21D1\",\"DoubleUpDownArrow\":\"\u21D5\",\"DoubleVerticalBar\":\"\u2225\",\"DownArrowBar\":\"\u2913\",\"downarrow\":\"\u2193\",\"DownArrow\":\"\u2193\",\"Downarrow\":\"\u21D3\",\"DownArrowUpArrow\":\"\u21F5\",\"DownBreve\":\"\u0311\",\"downdownarrows\":\"\u21CA\",\"downharpoonleft\":\"\u21C3\",\"downharpoonright\":\"\u21C2\",\"DownLeftRightVector\":\"\u2950\",\"DownLeftTeeVector\":\"\u295E\",\"DownLeftVectorBar\":\"\u2956\",\"DownLeftVector\":\"\u21BD\",\"DownRightTeeVector\":\"\u295F\",\"DownRightVectorBar\":\"\u2957\",\"DownRightVector\":\"\u21C1\",\"DownTeeArrow\":\"\u21A7\",\"DownTee\":\"\u22A4\",\"drbkarow\":\"\u2910\",\"drcorn\":\"\u231F\",\"drcrop\":\"\u230C\",\"Dscr\":\"\uD835\uDC9F\",\"dscr\":\"\uD835\uDCB9\",\"DScy\":\"\u0405\",\"dscy\":\"\u0455\",\"dsol\":\"\u29F6\",\"Dstrok\":\"\u0110\",\"dstrok\":\"\u0111\",\"dtdot\":\"\u22F1\",\"dtri\":\"\u25BF\",\"dtrif\":\"\u25BE\",\"duarr\":\"\u21F5\",\"duhar\":\"\u296F\",\"dwangle\":\"\u29A6\",\"DZcy\":\"\u040F\",\"dzcy\":\"\u045F\",\"dzigrarr\":\"\u27FF\",\"Eacute\":\"\u00C9\",\"eacute\":\"\u00E9\",\"easter\":\"\u2A6E\",\"Ecaron\":\"\u011A\",\"ecaron\":\"\u011B\",\"Ecirc\":\"\u00CA\",\"ecirc\":\"\u00EA\",\"ecir\":\"\u2256\",\"ecolon\":\"\u2255\",\"Ecy\":\"\u042D\",\"ecy\":\"\u044D\",\"eDDot\":\"\u2A77\",\"Edot\":\"\u0116\",\"edot\":\"\u0117\",\"eDot\":\"\u2251\",\"ee\":\"\u2147\",\"efDot\":\"\u2252\",\"Efr\":\"\uD835\uDD08\",\"efr\":\"\uD835\uDD22\",\"eg\":\"\u2A9A\",\"Egrave\":\"\u00C8\",\"egrave\":\"\u00E8\",\"egs\":\"\u2A96\",\"egsdot\":\"\u2A98\",\"el\":\"\u2A99\",\"Element\":\"\u2208\",\"elinters\":\"\u23E7\",\"ell\":\"\u2113\",\"els\":\"\u2A95\",\"elsdot\":\"\u2A97\",\"Emacr\":\"\u0112\",\"emacr\":\"\u0113\",\"empty\":\"\u2205\",\"emptyset\":\"\u2205\",\"EmptySmallSquare\":\"\u25FB\",\"emptyv\":\"\u2205\",\"EmptyVerySmallSquare\":\"\u25AB\",\"emsp13\":\"\u2004\",\"emsp14\":\"\u2005\",\"emsp\":\"\u2003\",\"ENG\":\"\u014A\",\"eng\":\"\u014B\",\"ensp\":\"\u2002\",\"Eogon\":\"\u0118\",\"eogon\":\"\u0119\",\"Eopf\":\"\uD835\uDD3C\",\"eopf\":\"\uD835\uDD56\",\"epar\":\"\u22D5\",\"eparsl\":\"\u29E3\",\"eplus\":\"\u2A71\",\"epsi\":\"\u03B5\",\"Epsilon\":\"\u0395\",\"epsilon\":\"\u03B5\",\"epsiv\":\"\u03F5\",\"eqcirc\":\"\u2256\",\"eqcolon\":\"\u2255\",\"eqsim\":\"\u2242\",\"eqslantgtr\":\"\u2A96\",\"eqslantless\":\"\u2A95\",\"Equal\":\"\u2A75\",\"equals\":\"=\",\"EqualTilde\":\"\u2242\",\"equest\":\"\u225F\",\"Equilibrium\":\"\u21CC\",\"equiv\":\"\u2261\",\"equivDD\":\"\u2A78\",\"eqvparsl\":\"\u29E5\",\"erarr\":\"\u2971\",\"erDot\":\"\u2253\",\"escr\":\"\u212F\",\"Escr\":\"\u2130\",\"esdot\":\"\u2250\",\"Esim\":\"\u2A73\",\"esim\":\"\u2242\",\"Eta\":\"\u0397\",\"eta\":\"\u03B7\",\"ETH\":\"\u00D0\",\"eth\":\"\u00F0\",\"Euml\":\"\u00CB\",\"euml\":\"\u00EB\",\"euro\":\"\u20AC\",\"excl\":\"!\",\"exist\":\"\u2203\",\"Exists\":\"\u2203\",\"expectation\":\"\u2130\",\"exponentiale\":\"\u2147\",\"ExponentialE\":\"\u2147\",\"fallingdotseq\":\"\u2252\",\"Fcy\":\"\u0424\",\"fcy\":\"\u0444\",\"female\":\"\u2640\",\"ffilig\":\"\uFB03\",\"fflig\":\"\uFB00\",\"ffllig\":\"\uFB04\",\"Ffr\":\"\uD835\uDD09\",\"ffr\":\"\uD835\uDD23\",\"filig\":\"\uFB01\",\"FilledSmallSquare\":\"\u25FC\",\"FilledVerySmallSquare\":\"\u25AA\",\"fjlig\":\"fj\",\"flat\":\"\u266D\",\"fllig\":\"\uFB02\",\"fltns\":\"\u25B1\",\"fnof\":\"\u0192\",\"Fopf\":\"\uD835\uDD3D\",\"fopf\":\"\uD835\uDD57\",\"forall\":\"\u2200\",\"ForAll\":\"\u2200\",\"fork\":\"\u22D4\",\"forkv\":\"\u2AD9\",\"Fouriertrf\":\"\u2131\",\"fpartint\":\"\u2A0D\",\"frac12\":\"\u00BD\",\"frac13\":\"\u2153\",\"frac14\":\"\u00BC\",\"frac15\":\"\u2155\",\"frac16\":\"\u2159\",\"frac18\":\"\u215B\",\"frac23\":\"\u2154\",\"frac25\":\"\u2156\",\"frac34\":\"\u00BE\",\"frac35\":\"\u2157\",\"frac38\":\"\u215C\",\"frac45\":\"\u2158\",\"frac56\":\"\u215A\",\"frac58\":\"\u215D\",\"frac78\":\"\u215E\",\"frasl\":\"\u2044\",\"frown\":\"\u2322\",\"fscr\":\"\uD835\uDCBB\",\"Fscr\":\"\u2131\",\"gacute\":\"\u01F5\",\"Gamma\":\"\u0393\",\"gamma\":\"\u03B3\",\"Gammad\":\"\u03DC\",\"gammad\":\"\u03DD\",\"gap\":\"\u2A86\",\"Gbreve\":\"\u011E\",\"gbreve\":\"\u011F\",\"Gcedil\":\"\u0122\",\"Gcirc\":\"\u011C\",\"gcirc\":\"\u011D\",\"Gcy\":\"\u0413\",\"gcy\":\"\u0433\",\"Gdot\":\"\u0120\",\"gdot\":\"\u0121\",\"ge\":\"\u2265\",\"gE\":\"\u2267\",\"gEl\":\"\u2A8C\",\"gel\":\"\u22DB\",\"geq\":\"\u2265\",\"geqq\":\"\u2267\",\"geqslant\":\"\u2A7E\",\"gescc\":\"\u2AA9\",\"ges\":\"\u2A7E\",\"gesdot\":\"\u2A80\",\"gesdoto\":\"\u2A82\",\"gesdotol\":\"\u2A84\",\"gesl\":\"\u22DB\uFE00\",\"gesles\":\"\u2A94\",\"Gfr\":\"\uD835\uDD0A\",\"gfr\":\"\uD835\uDD24\",\"gg\":\"\u226B\",\"Gg\":\"\u22D9\",\"ggg\":\"\u22D9\",\"gimel\":\"\u2137\",\"GJcy\":\"\u0403\",\"gjcy\":\"\u0453\",\"gla\":\"\u2AA5\",\"gl\":\"\u2277\",\"glE\":\"\u2A92\",\"glj\":\"\u2AA4\",\"gnap\":\"\u2A8A\",\"gnapprox\":\"\u2A8A\",\"gne\":\"\u2A88\",\"gnE\":\"\u2269\",\"gneq\":\"\u2A88\",\"gneqq\":\"\u2269\",\"gnsim\":\"\u22E7\",\"Gopf\":\"\uD835\uDD3E\",\"gopf\":\"\uD835\uDD58\",\"grave\":\"`\",\"GreaterEqual\":\"\u2265\",\"GreaterEqualLess\":\"\u22DB\",\"GreaterFullEqual\":\"\u2267\",\"GreaterGreater\":\"\u2AA2\",\"GreaterLess\":\"\u2277\",\"GreaterSlantEqual\":\"\u2A7E\",\"GreaterTilde\":\"\u2273\",\"Gscr\":\"\uD835\uDCA2\",\"gscr\":\"\u210A\",\"gsim\":\"\u2273\",\"gsime\":\"\u2A8E\",\"gsiml\":\"\u2A90\",\"gtcc\":\"\u2AA7\",\"gtcir\":\"\u2A7A\",\"gt\":\">\",\"GT\":\">\",\"Gt\":\"\u226B\",\"gtdot\":\"\u22D7\",\"gtlPar\":\"\u2995\",\"gtquest\":\"\u2A7C\",\"gtrapprox\":\"\u2A86\",\"gtrarr\":\"\u2978\",\"gtrdot\":\"\u22D7\",\"gtreqless\":\"\u22DB\",\"gtreqqless\":\"\u2A8C\",\"gtrless\":\"\u2277\",\"gtrsim\":\"\u2273\",\"gvertneqq\":\"\u2269\uFE00\",\"gvnE\":\"\u2269\uFE00\",\"Hacek\":\"\u02C7\",\"hairsp\":\"\u200A\",\"half\":\"\u00BD\",\"hamilt\":\"\u210B\",\"HARDcy\":\"\u042A\",\"hardcy\":\"\u044A\",\"harrcir\":\"\u2948\",\"harr\":\"\u2194\",\"hArr\":\"\u21D4\",\"harrw\":\"\u21AD\",\"Hat\":\"^\",\"hbar\":\"\u210F\",\"Hcirc\":\"\u0124\",\"hcirc\":\"\u0125\",\"hearts\":\"\u2665\",\"heartsuit\":\"\u2665\",\"hellip\":\"\u2026\",\"hercon\":\"\u22B9\",\"hfr\":\"\uD835\uDD25\",\"Hfr\":\"\u210C\",\"HilbertSpace\":\"\u210B\",\"hksearow\":\"\u2925\",\"hkswarow\":\"\u2926\",\"hoarr\":\"\u21FF\",\"homtht\":\"\u223B\",\"hookleftarrow\":\"\u21A9\",\"hookrightarrow\":\"\u21AA\",\"hopf\":\"\uD835\uDD59\",\"Hopf\":\"\u210D\",\"horbar\":\"\u2015\",\"HorizontalLine\":\"\u2500\",\"hscr\":\"\uD835\uDCBD\",\"Hscr\":\"\u210B\",\"hslash\":\"\u210F\",\"Hstrok\":\"\u0126\",\"hstrok\":\"\u0127\",\"HumpDownHump\":\"\u224E\",\"HumpEqual\":\"\u224F\",\"hybull\":\"\u2043\",\"hyphen\":\"\u2010\",\"Iacute\":\"\u00CD\",\"iacute\":\"\u00ED\",\"ic\":\"\u2063\",\"Icirc\":\"\u00CE\",\"icirc\":\"\u00EE\",\"Icy\":\"\u0418\",\"icy\":\"\u0438\",\"Idot\":\"\u0130\",\"IEcy\":\"\u0415\",\"iecy\":\"\u0435\",\"iexcl\":\"\u00A1\",\"iff\":\"\u21D4\",\"ifr\":\"\uD835\uDD26\",\"Ifr\":\"\u2111\",\"Igrave\":\"\u00CC\",\"igrave\":\"\u00EC\",\"ii\":\"\u2148\",\"iiiint\":\"\u2A0C\",\"iiint\":\"\u222D\",\"iinfin\":\"\u29DC\",\"iiota\":\"\u2129\",\"IJlig\":\"\u0132\",\"ijlig\":\"\u0133\",\"Imacr\":\"\u012A\",\"imacr\":\"\u012B\",\"image\":\"\u2111\",\"ImaginaryI\":\"\u2148\",\"imagline\":\"\u2110\",\"imagpart\":\"\u2111\",\"imath\":\"\u0131\",\"Im\":\"\u2111\",\"imof\":\"\u22B7\",\"imped\":\"\u01B5\",\"Implies\":\"\u21D2\",\"incare\":\"\u2105\",\"in\":\"\u2208\",\"infin\":\"\u221E\",\"infintie\":\"\u29DD\",\"inodot\":\"\u0131\",\"intcal\":\"\u22BA\",\"int\":\"\u222B\",\"Int\":\"\u222C\",\"integers\":\"\u2124\",\"Integral\":\"\u222B\",\"intercal\":\"\u22BA\",\"Intersection\":\"\u22C2\",\"intlarhk\":\"\u2A17\",\"intprod\":\"\u2A3C\",\"InvisibleComma\":\"\u2063\",\"InvisibleTimes\":\"\u2062\",\"IOcy\":\"\u0401\",\"iocy\":\"\u0451\",\"Iogon\":\"\u012E\",\"iogon\":\"\u012F\",\"Iopf\":\"\uD835\uDD40\",\"iopf\":\"\uD835\uDD5A\",\"Iota\":\"\u0399\",\"iota\":\"\u03B9\",\"iprod\":\"\u2A3C\",\"iquest\":\"\u00BF\",\"iscr\":\"\uD835\uDCBE\",\"Iscr\":\"\u2110\",\"isin\":\"\u2208\",\"isindot\":\"\u22F5\",\"isinE\":\"\u22F9\",\"isins\":\"\u22F4\",\"isinsv\":\"\u22F3\",\"isinv\":\"\u2208\",\"it\":\"\u2062\",\"Itilde\":\"\u0128\",\"itilde\":\"\u0129\",\"Iukcy\":\"\u0406\",\"iukcy\":\"\u0456\",\"Iuml\":\"\u00CF\",\"iuml\":\"\u00EF\",\"Jcirc\":\"\u0134\",\"jcirc\":\"\u0135\",\"Jcy\":\"\u0419\",\"jcy\":\"\u0439\",\"Jfr\":\"\uD835\uDD0D\",\"jfr\":\"\uD835\uDD27\",\"jmath\":\"\u0237\",\"Jopf\":\"\uD835\uDD41\",\"jopf\":\"\uD835\uDD5B\",\"Jscr\":\"\uD835\uDCA5\",\"jscr\":\"\uD835\uDCBF\",\"Jsercy\":\"\u0408\",\"jsercy\":\"\u0458\",\"Jukcy\":\"\u0404\",\"jukcy\":\"\u0454\",\"Kappa\":\"\u039A\",\"kappa\":\"\u03BA\",\"kappav\":\"\u03F0\",\"Kcedil\":\"\u0136\",\"kcedil\":\"\u0137\",\"Kcy\":\"\u041A\",\"kcy\":\"\u043A\",\"Kfr\":\"\uD835\uDD0E\",\"kfr\":\"\uD835\uDD28\",\"kgreen\":\"\u0138\",\"KHcy\":\"\u0425\",\"khcy\":\"\u0445\",\"KJcy\":\"\u040C\",\"kjcy\":\"\u045C\",\"Kopf\":\"\uD835\uDD42\",\"kopf\":\"\uD835\uDD5C\",\"Kscr\":\"\uD835\uDCA6\",\"kscr\":\"\uD835\uDCC0\",\"lAarr\":\"\u21DA\",\"Lacute\":\"\u0139\",\"lacute\":\"\u013A\",\"laemptyv\":\"\u29B4\",\"lagran\":\"\u2112\",\"Lambda\":\"\u039B\",\"lambda\":\"\u03BB\",\"lang\":\"\u27E8\",\"Lang\":\"\u27EA\",\"langd\":\"\u2991\",\"langle\":\"\u27E8\",\"lap\":\"\u2A85\",\"Laplacetrf\":\"\u2112\",\"laquo\":\"\u00AB\",\"larrb\":\"\u21E4\",\"larrbfs\":\"\u291F\",\"larr\":\"\u2190\",\"Larr\":\"\u219E\",\"lArr\":\"\u21D0\",\"larrfs\":\"\u291D\",\"larrhk\":\"\u21A9\",\"larrlp\":\"\u21AB\",\"larrpl\":\"\u2939\",\"larrsim\":\"\u2973\",\"larrtl\":\"\u21A2\",\"latail\":\"\u2919\",\"lAtail\":\"\u291B\",\"lat\":\"\u2AAB\",\"late\":\"\u2AAD\",\"lates\":\"\u2AAD\uFE00\",\"lbarr\":\"\u290C\",\"lBarr\":\"\u290E\",\"lbbrk\":\"\u2772\",\"lbrace\":\"{\",\"lbrack\":\"[\",\"lbrke\":\"\u298B\",\"lbrksld\":\"\u298F\",\"lbrkslu\":\"\u298D\",\"Lcaron\":\"\u013D\",\"lcaron\":\"\u013E\",\"Lcedil\":\"\u013B\",\"lcedil\":\"\u013C\",\"lceil\":\"\u2308\",\"lcub\":\"{\",\"Lcy\":\"\u041B\",\"lcy\":\"\u043B\",\"ldca\":\"\u2936\",\"ldquo\":\"\u201C\",\"ldquor\":\"\u201E\",\"ldrdhar\":\"\u2967\",\"ldrushar\":\"\u294B\",\"ldsh\":\"\u21B2\",\"le\":\"\u2264\",\"lE\":\"\u2266\",\"LeftAngleBracket\":\"\u27E8\",\"LeftArrowBar\":\"\u21E4\",\"leftarrow\":\"\u2190\",\"LeftArrow\":\"\u2190\",\"Leftarrow\":\"\u21D0\",\"LeftArrowRightArrow\":\"\u21C6\",\"leftarrowtail\":\"\u21A2\",\"LeftCeiling\":\"\u2308\",\"LeftDoubleBracket\":\"\u27E6\",\"LeftDownTeeVector\":\"\u2961\",\"LeftDownVectorBar\":\"\u2959\",\"LeftDownVector\":\"\u21C3\",\"LeftFloor\":\"\u230A\",\"leftharpoondown\":\"\u21BD\",\"leftharpoonup\":\"\u21BC\",\"leftleftarrows\":\"\u21C7\",\"leftrightarrow\":\"\u2194\",\"LeftRightArrow\":\"\u2194\",\"Leftrightarrow\":\"\u21D4\",\"leftrightarrows\":\"\u21C6\",\"leftrightharpoons\":\"\u21CB\",\"leftrightsquigarrow\":\"\u21AD\",\"LeftRightVector\":\"\u294E\",\"LeftTeeArrow\":\"\u21A4\",\"LeftTee\":\"\u22A3\",\"LeftTeeVector\":\"\u295A\",\"leftthreetimes\":\"\u22CB\",\"LeftTriangleBar\":\"\u29CF\",\"LeftTriangle\":\"\u22B2\",\"LeftTriangleEqual\":\"\u22B4\",\"LeftUpDownVector\":\"\u2951\",\"LeftUpTeeVector\":\"\u2960\",\"LeftUpVectorBar\":\"\u2958\",\"LeftUpVector\":\"\u21BF\",\"LeftVectorBar\":\"\u2952\",\"LeftVector\":\"\u21BC\",\"lEg\":\"\u2A8B\",\"leg\":\"\u22DA\",\"leq\":\"\u2264\",\"leqq\":\"\u2266\",\"leqslant\":\"\u2A7D\",\"lescc\":\"\u2AA8\",\"les\":\"\u2A7D\",\"lesdot\":\"\u2A7F\",\"lesdoto\":\"\u2A81\",\"lesdotor\":\"\u2A83\",\"lesg\":\"\u22DA\uFE00\",\"lesges\":\"\u2A93\",\"lessapprox\":\"\u2A85\",\"lessdot\":\"\u22D6\",\"lesseqgtr\":\"\u22DA\",\"lesseqqgtr\":\"\u2A8B\",\"LessEqualGreater\":\"\u22DA\",\"LessFullEqual\":\"\u2266\",\"LessGreater\":\"\u2276\",\"lessgtr\":\"\u2276\",\"LessLess\":\"\u2AA1\",\"lesssim\":\"\u2272\",\"LessSlantEqual\":\"\u2A7D\",\"LessTilde\":\"\u2272\",\"lfisht\":\"\u297C\",\"lfloor\":\"\u230A\",\"Lfr\":\"\uD835\uDD0F\",\"lfr\":\"\uD835\uDD29\",\"lg\":\"\u2276\",\"lgE\":\"\u2A91\",\"lHar\":\"\u2962\",\"lhard\":\"\u21BD\",\"lharu\":\"\u21BC\",\"lharul\":\"\u296A\",\"lhblk\":\"\u2584\",\"LJcy\":\"\u0409\",\"ljcy\":\"\u0459\",\"llarr\":\"\u21C7\",\"ll\":\"\u226A\",\"Ll\":\"\u22D8\",\"llcorner\":\"\u231E\",\"Lleftarrow\":\"\u21DA\",\"llhard\":\"\u296B\",\"lltri\":\"\u25FA\",\"Lmidot\":\"\u013F\",\"lmidot\":\"\u0140\",\"lmoustache\":\"\u23B0\",\"lmoust\":\"\u23B0\",\"lnap\":\"\u2A89\",\"lnapprox\":\"\u2A89\",\"lne\":\"\u2A87\",\"lnE\":\"\u2268\",\"lneq\":\"\u2A87\",\"lneqq\":\"\u2268\",\"lnsim\":\"\u22E6\",\"loang\":\"\u27EC\",\"loarr\":\"\u21FD\",\"lobrk\":\"\u27E6\",\"longleftarrow\":\"\u27F5\",\"LongLeftArrow\":\"\u27F5\",\"Longleftarrow\":\"\u27F8\",\"longleftrightarrow\":\"\u27F7\",\"LongLeftRightArrow\":\"\u27F7\",\"Longleftrightarrow\":\"\u27FA\",\"longmapsto\":\"\u27FC\",\"longrightarrow\":\"\u27F6\",\"LongRightArrow\":\"\u27F6\",\"Longrightarrow\":\"\u27F9\",\"looparrowleft\":\"\u21AB\",\"looparrowright\":\"\u21AC\",\"lopar\":\"\u2985\",\"Lopf\":\"\uD835\uDD43\",\"lopf\":\"\uD835\uDD5D\",\"loplus\":\"\u2A2D\",\"lotimes\":\"\u2A34\",\"lowast\":\"\u2217\",\"lowbar\":\"_\",\"LowerLeftArrow\":\"\u2199\",\"LowerRightArrow\":\"\u2198\",\"loz\":\"\u25CA\",\"lozenge\":\"\u25CA\",\"lozf\":\"\u29EB\",\"lpar\":\"(\",\"lparlt\":\"\u2993\",\"lrarr\":\"\u21C6\",\"lrcorner\":\"\u231F\",\"lrhar\":\"\u21CB\",\"lrhard\":\"\u296D\",\"lrm\":\"\u200E\",\"lrtri\":\"\u22BF\",\"lsaquo\":\"\u2039\",\"lscr\":\"\uD835\uDCC1\",\"Lscr\":\"\u2112\",\"lsh\":\"\u21B0\",\"Lsh\":\"\u21B0\",\"lsim\":\"\u2272\",\"lsime\":\"\u2A8D\",\"lsimg\":\"\u2A8F\",\"lsqb\":\"[\",\"lsquo\":\"\u2018\",\"lsquor\":\"\u201A\",\"Lstrok\":\"\u0141\",\"lstrok\":\"\u0142\",\"ltcc\":\"\u2AA6\",\"ltcir\":\"\u2A79\",\"lt\":\"<\",\"LT\":\"<\",\"Lt\":\"\u226A\",\"ltdot\":\"\u22D6\",\"lthree\":\"\u22CB\",\"ltimes\":\"\u22C9\",\"ltlarr\":\"\u2976\",\"ltquest\":\"\u2A7B\",\"ltri\":\"\u25C3\",\"ltrie\":\"\u22B4\",\"ltrif\":\"\u25C2\",\"ltrPar\":\"\u2996\",\"lurdshar\":\"\u294A\",\"luruhar\":\"\u2966\",\"lvertneqq\":\"\u2268\uFE00\",\"lvnE\":\"\u2268\uFE00\",\"macr\":\"\u00AF\",\"male\":\"\u2642\",\"malt\":\"\u2720\",\"maltese\":\"\u2720\",\"Map\":\"\u2905\",\"map\":\"\u21A6\",\"mapsto\":\"\u21A6\",\"mapstodown\":\"\u21A7\",\"mapstoleft\":\"\u21A4\",\"mapstoup\":\"\u21A5\",\"marker\":\"\u25AE\",\"mcomma\":\"\u2A29\",\"Mcy\":\"\u041C\",\"mcy\":\"\u043C\",\"mdash\":\"\u2014\",\"mDDot\":\"\u223A\",\"measuredangle\":\"\u2221\",\"MediumSpace\":\"\u205F\",\"Mellintrf\":\"\u2133\",\"Mfr\":\"\uD835\uDD10\",\"mfr\":\"\uD835\uDD2A\",\"mho\":\"\u2127\",\"micro\":\"\u00B5\",\"midast\":\"*\",\"midcir\":\"\u2AF0\",\"mid\":\"\u2223\",\"middot\":\"\u00B7\",\"minusb\":\"\u229F\",\"minus\":\"\u2212\",\"minusd\":\"\u2238\",\"minusdu\":\"\u2A2A\",\"MinusPlus\":\"\u2213\",\"mlcp\":\"\u2ADB\",\"mldr\":\"\u2026\",\"mnplus\":\"\u2213\",\"models\":\"\u22A7\",\"Mopf\":\"\uD835\uDD44\",\"mopf\":\"\uD835\uDD5E\",\"mp\":\"\u2213\",\"mscr\":\"\uD835\uDCC2\",\"Mscr\":\"\u2133\",\"mstpos\":\"\u223E\",\"Mu\":\"\u039C\",\"mu\":\"\u03BC\",\"multimap\":\"\u22B8\",\"mumap\":\"\u22B8\",\"nabla\":\"\u2207\",\"Nacute\":\"\u0143\",\"nacute\":\"\u0144\",\"nang\":\"\u2220\u20D2\",\"nap\":\"\u2249\",\"napE\":\"\u2A70\u0338\",\"napid\":\"\u224B\u0338\",\"napos\":\"\u0149\",\"napprox\":\"\u2249\",\"natural\":\"\u266E\",\"naturals\":\"\u2115\",\"natur\":\"\u266E\",\"nbsp\":\"\u00A0\",\"nbump\":\"\u224E\u0338\",\"nbumpe\":\"\u224F\u0338\",\"ncap\":\"\u2A43\",\"Ncaron\":\"\u0147\",\"ncaron\":\"\u0148\",\"Ncedil\":\"\u0145\",\"ncedil\":\"\u0146\",\"ncong\":\"\u2247\",\"ncongdot\":\"\u2A6D\u0338\",\"ncup\":\"\u2A42\",\"Ncy\":\"\u041D\",\"ncy\":\"\u043D\",\"ndash\":\"\u2013\",\"nearhk\":\"\u2924\",\"nearr\":\"\u2197\",\"neArr\":\"\u21D7\",\"nearrow\":\"\u2197\",\"ne\":\"\u2260\",\"nedot\":\"\u2250\u0338\",\"NegativeMediumSpace\":\"\u200B\",\"NegativeThickSpace\":\"\u200B\",\"NegativeThinSpace\":\"\u200B\",\"NegativeVeryThinSpace\":\"\u200B\",\"nequiv\":\"\u2262\",\"nesear\":\"\u2928\",\"nesim\":\"\u2242\u0338\",\"NestedGreaterGreater\":\"\u226B\",\"NestedLessLess\":\"\u226A\",\"NewLine\":\"\\n\",\"nexist\":\"\u2204\",\"nexists\":\"\u2204\",\"Nfr\":\"\uD835\uDD11\",\"nfr\":\"\uD835\uDD2B\",\"ngE\":\"\u2267\u0338\",\"nge\":\"\u2271\",\"ngeq\":\"\u2271\",\"ngeqq\":\"\u2267\u0338\",\"ngeqslant\":\"\u2A7E\u0338\",\"nges\":\"\u2A7E\u0338\",\"nGg\":\"\u22D9\u0338\",\"ngsim\":\"\u2275\",\"nGt\":\"\u226B\u20D2\",\"ngt\":\"\u226F\",\"ngtr\":\"\u226F\",\"nGtv\":\"\u226B\u0338\",\"nharr\":\"\u21AE\",\"nhArr\":\"\u21CE\",\"nhpar\":\"\u2AF2\",\"ni\":\"\u220B\",\"nis\":\"\u22FC\",\"nisd\":\"\u22FA\",\"niv\":\"\u220B\",\"NJcy\":\"\u040A\",\"njcy\":\"\u045A\",\"nlarr\":\"\u219A\",\"nlArr\":\"\u21CD\",\"nldr\":\"\u2025\",\"nlE\":\"\u2266\u0338\",\"nle\":\"\u2270\",\"nleftarrow\":\"\u219A\",\"nLeftarrow\":\"\u21CD\",\"nleftrightarrow\":\"\u21AE\",\"nLeftrightarrow\":\"\u21CE\",\"nleq\":\"\u2270\",\"nleqq\":\"\u2266\u0338\",\"nleqslant\":\"\u2A7D\u0338\",\"nles\":\"\u2A7D\u0338\",\"nless\":\"\u226E\",\"nLl\":\"\u22D8\u0338\",\"nlsim\":\"\u2274\",\"nLt\":\"\u226A\u20D2\",\"nlt\":\"\u226E\",\"nltri\":\"\u22EA\",\"nltrie\":\"\u22EC\",\"nLtv\":\"\u226A\u0338\",\"nmid\":\"\u2224\",\"NoBreak\":\"\u2060\",\"NonBreakingSpace\":\"\u00A0\",\"nopf\":\"\uD835\uDD5F\",\"Nopf\":\"\u2115\",\"Not\":\"\u2AEC\",\"not\":\"\u00AC\",\"NotCongruent\":\"\u2262\",\"NotCupCap\":\"\u226D\",\"NotDoubleVerticalBar\":\"\u2226\",\"NotElement\":\"\u2209\",\"NotEqual\":\"\u2260\",\"NotEqualTilde\":\"\u2242\u0338\",\"NotExists\":\"\u2204\",\"NotGreater\":\"\u226F\",\"NotGreaterEqual\":\"\u2271\",\"NotGreaterFullEqual\":\"\u2267\u0338\",\"NotGreaterGreater\":\"\u226B\u0338\",\"NotGreaterLess\":\"\u2279\",\"NotGreaterSlantEqual\":\"\u2A7E\u0338\",\"NotGreaterTilde\":\"\u2275\",\"NotHumpDownHump\":\"\u224E\u0338\",\"NotHumpEqual\":\"\u224F\u0338\",\"notin\":\"\u2209\",\"notindot\":\"\u22F5\u0338\",\"notinE\":\"\u22F9\u0338\",\"notinva\":\"\u2209\",\"notinvb\":\"\u22F7\",\"notinvc\":\"\u22F6\",\"NotLeftTriangleBar\":\"\u29CF\u0338\",\"NotLeftTriangle\":\"\u22EA\",\"NotLeftTriangleEqual\":\"\u22EC\",\"NotLess\":\"\u226E\",\"NotLessEqual\":\"\u2270\",\"NotLessGreater\":\"\u2278\",\"NotLessLess\":\"\u226A\u0338\",\"NotLessSlantEqual\":\"\u2A7D\u0338\",\"NotLessTilde\":\"\u2274\",\"NotNestedGreaterGreater\":\"\u2AA2\u0338\",\"NotNestedLessLess\":\"\u2AA1\u0338\",\"notni\":\"\u220C\",\"notniva\":\"\u220C\",\"notnivb\":\"\u22FE\",\"notnivc\":\"\u22FD\",\"NotPrecedes\":\"\u2280\",\"NotPrecedesEqual\":\"\u2AAF\u0338\",\"NotPrecedesSlantEqual\":\"\u22E0\",\"NotReverseElement\":\"\u220C\",\"NotRightTriangleBar\":\"\u29D0\u0338\",\"NotRightTriangle\":\"\u22EB\",\"NotRightTriangleEqual\":\"\u22ED\",\"NotSquareSubset\":\"\u228F\u0338\",\"NotSquareSubsetEqual\":\"\u22E2\",\"NotSquareSuperset\":\"\u2290\u0338\",\"NotSquareSupersetEqual\":\"\u22E3\",\"NotSubset\":\"\u2282\u20D2\",\"NotSubsetEqual\":\"\u2288\",\"NotSucceeds\":\"\u2281\",\"NotSucceedsEqual\":\"\u2AB0\u0338\",\"NotSucceedsSlantEqual\":\"\u22E1\",\"NotSucceedsTilde\":\"\u227F\u0338\",\"NotSuperset\":\"\u2283\u20D2\",\"NotSupersetEqual\":\"\u2289\",\"NotTilde\":\"\u2241\",\"NotTildeEqual\":\"\u2244\",\"NotTildeFullEqual\":\"\u2247\",\"NotTildeTilde\":\"\u2249\",\"NotVerticalBar\":\"\u2224\",\"nparallel\":\"\u2226\",\"npar\":\"\u2226\",\"nparsl\":\"\u2AFD\u20E5\",\"npart\":\"\u2202\u0338\",\"npolint\":\"\u2A14\",\"npr\":\"\u2280\",\"nprcue\":\"\u22E0\",\"nprec\":\"\u2280\",\"npreceq\":\"\u2AAF\u0338\",\"npre\":\"\u2AAF\u0338\",\"nrarrc\":\"\u2933\u0338\",\"nrarr\":\"\u219B\",\"nrArr\":\"\u21CF\",\"nrarrw\":\"\u219D\u0338\",\"nrightarrow\":\"\u219B\",\"nRightarrow\":\"\u21CF\",\"nrtri\":\"\u22EB\",\"nrtrie\":\"\u22ED\",\"nsc\":\"\u2281\",\"nsccue\":\"\u22E1\",\"nsce\":\"\u2AB0\u0338\",\"Nscr\":\"\uD835\uDCA9\",\"nscr\":\"\uD835\uDCC3\",\"nshortmid\":\"\u2224\",\"nshortparallel\":\"\u2226\",\"nsim\":\"\u2241\",\"nsime\":\"\u2244\",\"nsimeq\":\"\u2244\",\"nsmid\":\"\u2224\",\"nspar\":\"\u2226\",\"nsqsube\":\"\u22E2\",\"nsqsupe\":\"\u22E3\",\"nsub\":\"\u2284\",\"nsubE\":\"\u2AC5\u0338\",\"nsube\":\"\u2288\",\"nsubset\":\"\u2282\u20D2\",\"nsubseteq\":\"\u2288\",\"nsubseteqq\":\"\u2AC5\u0338\",\"nsucc\":\"\u2281\",\"nsucceq\":\"\u2AB0\u0338\",\"nsup\":\"\u2285\",\"nsupE\":\"\u2AC6\u0338\",\"nsupe\":\"\u2289\",\"nsupset\":\"\u2283\u20D2\",\"nsupseteq\":\"\u2289\",\"nsupseteqq\":\"\u2AC6\u0338\",\"ntgl\":\"\u2279\",\"Ntilde\":\"\u00D1\",\"ntilde\":\"\u00F1\",\"ntlg\":\"\u2278\",\"ntriangleleft\":\"\u22EA\",\"ntrianglelefteq\":\"\u22EC\",\"ntriangleright\":\"\u22EB\",\"ntrianglerighteq\":\"\u22ED\",\"Nu\":\"\u039D\",\"nu\":\"\u03BD\",\"num\":\"#\",\"numero\":\"\u2116\",\"numsp\":\"\u2007\",\"nvap\":\"\u224D\u20D2\",\"nvdash\":\"\u22AC\",\"nvDash\":\"\u22AD\",\"nVdash\":\"\u22AE\",\"nVDash\":\"\u22AF\",\"nvge\":\"\u2265\u20D2\",\"nvgt\":\">\u20D2\",\"nvHarr\":\"\u2904\",\"nvinfin\":\"\u29DE\",\"nvlArr\":\"\u2902\",\"nvle\":\"\u2264\u20D2\",\"nvlt\":\"<\u20D2\",\"nvltrie\":\"\u22B4\u20D2\",\"nvrArr\":\"\u2903\",\"nvrtrie\":\"\u22B5\u20D2\",\"nvsim\":\"\u223C\u20D2\",\"nwarhk\":\"\u2923\",\"nwarr\":\"\u2196\",\"nwArr\":\"\u21D6\",\"nwarrow\":\"\u2196\",\"nwnear\":\"\u2927\",\"Oacute\":\"\u00D3\",\"oacute\":\"\u00F3\",\"oast\":\"\u229B\",\"Ocirc\":\"\u00D4\",\"ocirc\":\"\u00F4\",\"ocir\":\"\u229A\",\"Ocy\":\"\u041E\",\"ocy\":\"\u043E\",\"odash\":\"\u229D\",\"Odblac\":\"\u0150\",\"odblac\":\"\u0151\",\"odiv\":\"\u2A38\",\"odot\":\"\u2299\",\"odsold\":\"\u29BC\",\"OElig\":\"\u0152\",\"oelig\":\"\u0153\",\"ofcir\":\"\u29BF\",\"Ofr\":\"\uD835\uDD12\",\"ofr\":\"\uD835\uDD2C\",\"ogon\":\"\u02DB\",\"Ograve\":\"\u00D2\",\"ograve\":\"\u00F2\",\"ogt\":\"\u29C1\",\"ohbar\":\"\u29B5\",\"ohm\":\"\u03A9\",\"oint\":\"\u222E\",\"olarr\":\"\u21BA\",\"olcir\":\"\u29BE\",\"olcross\":\"\u29BB\",\"oline\":\"\u203E\",\"olt\":\"\u29C0\",\"Omacr\":\"\u014C\",\"omacr\":\"\u014D\",\"Omega\":\"\u03A9\",\"omega\":\"\u03C9\",\"Omicron\":\"\u039F\",\"omicron\":\"\u03BF\",\"omid\":\"\u29B6\",\"ominus\":\"\u2296\",\"Oopf\":\"\uD835\uDD46\",\"oopf\":\"\uD835\uDD60\",\"opar\":\"\u29B7\",\"OpenCurlyDoubleQuote\":\"\u201C\",\"OpenCurlyQuote\":\"\u2018\",\"operp\":\"\u29B9\",\"oplus\":\"\u2295\",\"orarr\":\"\u21BB\",\"Or\":\"\u2A54\",\"or\":\"\u2228\",\"ord\":\"\u2A5D\",\"order\":\"\u2134\",\"orderof\":\"\u2134\",\"ordf\":\"\u00AA\",\"ordm\":\"\u00BA\",\"origof\":\"\u22B6\",\"oror\":\"\u2A56\",\"orslope\":\"\u2A57\",\"orv\":\"\u2A5B\",\"oS\":\"\u24C8\",\"Oscr\":\"\uD835\uDCAA\",\"oscr\":\"\u2134\",\"Oslash\":\"\u00D8\",\"oslash\":\"\u00F8\",\"osol\":\"\u2298\",\"Otilde\":\"\u00D5\",\"otilde\":\"\u00F5\",\"otimesas\":\"\u2A36\",\"Otimes\":\"\u2A37\",\"otimes\":\"\u2297\",\"Ouml\":\"\u00D6\",\"ouml\":\"\u00F6\",\"ovbar\":\"\u233D\",\"OverBar\":\"\u203E\",\"OverBrace\":\"\u23DE\",\"OverBracket\":\"\u23B4\",\"OverParenthesis\":\"\u23DC\",\"para\":\"\u00B6\",\"parallel\":\"\u2225\",\"par\":\"\u2225\",\"parsim\":\"\u2AF3\",\"parsl\":\"\u2AFD\",\"part\":\"\u2202\",\"PartialD\":\"\u2202\",\"Pcy\":\"\u041F\",\"pcy\":\"\u043F\",\"percnt\":\"%\",\"period\":\".\",\"permil\":\"\u2030\",\"perp\":\"\u22A5\",\"pertenk\":\"\u2031\",\"Pfr\":\"\uD835\uDD13\",\"pfr\":\"\uD835\uDD2D\",\"Phi\":\"\u03A6\",\"phi\":\"\u03C6\",\"phiv\":\"\u03D5\",\"phmmat\":\"\u2133\",\"phone\":\"\u260E\",\"Pi\":\"\u03A0\",\"pi\":\"\u03C0\",\"pitchfork\":\"\u22D4\",\"piv\":\"\u03D6\",\"planck\":\"\u210F\",\"planckh\":\"\u210E\",\"plankv\":\"\u210F\",\"plusacir\":\"\u2A23\",\"plusb\":\"\u229E\",\"pluscir\":\"\u2A22\",\"plus\":\"+\",\"plusdo\":\"\u2214\",\"plusdu\":\"\u2A25\",\"pluse\":\"\u2A72\",\"PlusMinus\":\"\u00B1\",\"plusmn\":\"\u00B1\",\"plussim\":\"\u2A26\",\"plustwo\":\"\u2A27\",\"pm\":\"\u00B1\",\"Poincareplane\":\"\u210C\",\"pointint\":\"\u2A15\",\"popf\":\"\uD835\uDD61\",\"Popf\":\"\u2119\",\"pound\":\"\u00A3\",\"prap\":\"\u2AB7\",\"Pr\":\"\u2ABB\",\"pr\":\"\u227A\",\"prcue\":\"\u227C\",\"precapprox\":\"\u2AB7\",\"prec\":\"\u227A\",\"preccurlyeq\":\"\u227C\",\"Precedes\":\"\u227A\",\"PrecedesEqual\":\"\u2AAF\",\"PrecedesSlantEqual\":\"\u227C\",\"PrecedesTilde\":\"\u227E\",\"preceq\":\"\u2AAF\",\"precnapprox\":\"\u2AB9\",\"precneqq\":\"\u2AB5\",\"precnsim\":\"\u22E8\",\"pre\":\"\u2AAF\",\"prE\":\"\u2AB3\",\"precsim\":\"\u227E\",\"prime\":\"\u2032\",\"Prime\":\"\u2033\",\"primes\":\"\u2119\",\"prnap\":\"\u2AB9\",\"prnE\":\"\u2AB5\",\"prnsim\":\"\u22E8\",\"prod\":\"\u220F\",\"Product\":\"\u220F\",\"profalar\":\"\u232E\",\"profline\":\"\u2312\",\"profsurf\":\"\u2313\",\"prop\":\"\u221D\",\"Proportional\":\"\u221D\",\"Proportion\":\"\u2237\",\"propto\":\"\u221D\",\"prsim\":\"\u227E\",\"prurel\":\"\u22B0\",\"Pscr\":\"\uD835\uDCAB\",\"pscr\":\"\uD835\uDCC5\",\"Psi\":\"\u03A8\",\"psi\":\"\u03C8\",\"puncsp\":\"\u2008\",\"Qfr\":\"\uD835\uDD14\",\"qfr\":\"\uD835\uDD2E\",\"qint\":\"\u2A0C\",\"qopf\":\"\uD835\uDD62\",\"Qopf\":\"\u211A\",\"qprime\":\"\u2057\",\"Qscr\":\"\uD835\uDCAC\",\"qscr\":\"\uD835\uDCC6\",\"quaternions\":\"\u210D\",\"quatint\":\"\u2A16\",\"quest\":\"?\",\"questeq\":\"\u225F\",\"quot\":\"\\\"\",\"QUOT\":\"\\\"\",\"rAarr\":\"\u21DB\",\"race\":\"\u223D\u0331\",\"Racute\":\"\u0154\",\"racute\":\"\u0155\",\"radic\":\"\u221A\",\"raemptyv\":\"\u29B3\",\"rang\":\"\u27E9\",\"Rang\":\"\u27EB\",\"rangd\":\"\u2992\",\"range\":\"\u29A5\",\"rangle\":\"\u27E9\",\"raquo\":\"\u00BB\",\"rarrap\":\"\u2975\",\"rarrb\":\"\u21E5\",\"rarrbfs\":\"\u2920\",\"rarrc\":\"\u2933\",\"rarr\":\"\u2192\",\"Rarr\":\"\u21A0\",\"rArr\":\"\u21D2\",\"rarrfs\":\"\u291E\",\"rarrhk\":\"\u21AA\",\"rarrlp\":\"\u21AC\",\"rarrpl\":\"\u2945\",\"rarrsim\":\"\u2974\",\"Rarrtl\":\"\u2916\",\"rarrtl\":\"\u21A3\",\"rarrw\":\"\u219D\",\"ratail\":\"\u291A\",\"rAtail\":\"\u291C\",\"ratio\":\"\u2236\",\"rationals\":\"\u211A\",\"rbarr\":\"\u290D\",\"rBarr\":\"\u290F\",\"RBarr\":\"\u2910\",\"rbbrk\":\"\u2773\",\"rbrace\":\"}\",\"rbrack\":\"]\",\"rbrke\":\"\u298C\",\"rbrksld\":\"\u298E\",\"rbrkslu\":\"\u2990\",\"Rcaron\":\"\u0158\",\"rcaron\":\"\u0159\",\"Rcedil\":\"\u0156\",\"rcedil\":\"\u0157\",\"rceil\":\"\u2309\",\"rcub\":\"}\",\"Rcy\":\"\u0420\",\"rcy\":\"\u0440\",\"rdca\":\"\u2937\",\"rdldhar\":\"\u2969\",\"rdquo\":\"\u201D\",\"rdquor\":\"\u201D\",\"rdsh\":\"\u21B3\",\"real\":\"\u211C\",\"realine\":\"\u211B\",\"realpart\":\"\u211C\",\"reals\":\"\u211D\",\"Re\":\"\u211C\",\"rect\":\"\u25AD\",\"reg\":\"\u00AE\",\"REG\":\"\u00AE\",\"ReverseElement\":\"\u220B\",\"ReverseEquilibrium\":\"\u21CB\",\"ReverseUpEquilibrium\":\"\u296F\",\"rfisht\":\"\u297D\",\"rfloor\":\"\u230B\",\"rfr\":\"\uD835\uDD2F\",\"Rfr\":\"\u211C\",\"rHar\":\"\u2964\",\"rhard\":\"\u21C1\",\"rharu\":\"\u21C0\",\"rharul\":\"\u296C\",\"Rho\":\"\u03A1\",\"rho\":\"\u03C1\",\"rhov\":\"\u03F1\",\"RightAngleBracket\":\"\u27E9\",\"RightArrowBar\":\"\u21E5\",\"rightarrow\":\"\u2192\",\"RightArrow\":\"\u2192\",\"Rightarrow\":\"\u21D2\",\"RightArrowLeftArrow\":\"\u21C4\",\"rightarrowtail\":\"\u21A3\",\"RightCeiling\":\"\u2309\",\"RightDoubleBracket\":\"\u27E7\",\"RightDownTeeVector\":\"\u295D\",\"RightDownVectorBar\":\"\u2955\",\"RightDownVector\":\"\u21C2\",\"RightFloor\":\"\u230B\",\"rightharpoondown\":\"\u21C1\",\"rightharpoonup\":\"\u21C0\",\"rightleftarrows\":\"\u21C4\",\"rightleftharpoons\":\"\u21CC\",\"rightrightarrows\":\"\u21C9\",\"rightsquigarrow\":\"\u219D\",\"RightTeeArrow\":\"\u21A6\",\"RightTee\":\"\u22A2\",\"RightTeeVector\":\"\u295B\",\"rightthreetimes\":\"\u22CC\",\"RightTriangleBar\":\"\u29D0\",\"RightTriangle\":\"\u22B3\",\"RightTriangleEqual\":\"\u22B5\",\"RightUpDownVector\":\"\u294F\",\"RightUpTeeVector\":\"\u295C\",\"RightUpVectorBar\":\"\u2954\",\"RightUpVector\":\"\u21BE\",\"RightVectorBar\":\"\u2953\",\"RightVector\":\"\u21C0\",\"ring\":\"\u02DA\",\"risingdotseq\":\"\u2253\",\"rlarr\":\"\u21C4\",\"rlhar\":\"\u21CC\",\"rlm\":\"\u200F\",\"rmoustache\":\"\u23B1\",\"rmoust\":\"\u23B1\",\"rnmid\":\"\u2AEE\",\"roang\":\"\u27ED\",\"roarr\":\"\u21FE\",\"robrk\":\"\u27E7\",\"ropar\":\"\u2986\",\"ropf\":\"\uD835\uDD63\",\"Ropf\":\"\u211D\",\"roplus\":\"\u2A2E\",\"rotimes\":\"\u2A35\",\"RoundImplies\":\"\u2970\",\"rpar\":\")\",\"rpargt\":\"\u2994\",\"rppolint\":\"\u2A12\",\"rrarr\":\"\u21C9\",\"Rrightarrow\":\"\u21DB\",\"rsaquo\":\"\u203A\",\"rscr\":\"\uD835\uDCC7\",\"Rscr\":\"\u211B\",\"rsh\":\"\u21B1\",\"Rsh\":\"\u21B1\",\"rsqb\":\"]\",\"rsquo\":\"\u2019\",\"rsquor\":\"\u2019\",\"rthree\":\"\u22CC\",\"rtimes\":\"\u22CA\",\"rtri\":\"\u25B9\",\"rtrie\":\"\u22B5\",\"rtrif\":\"\u25B8\",\"rtriltri\":\"\u29CE\",\"RuleDelayed\":\"\u29F4\",\"ruluhar\":\"\u2968\",\"rx\":\"\u211E\",\"Sacute\":\"\u015A\",\"sacute\":\"\u015B\",\"sbquo\":\"\u201A\",\"scap\":\"\u2AB8\",\"Scaron\":\"\u0160\",\"scaron\":\"\u0161\",\"Sc\":\"\u2ABC\",\"sc\":\"\u227B\",\"sccue\":\"\u227D\",\"sce\":\"\u2AB0\",\"scE\":\"\u2AB4\",\"Scedil\":\"\u015E\",\"scedil\":\"\u015F\",\"Scirc\":\"\u015C\",\"scirc\":\"\u015D\",\"scnap\":\"\u2ABA\",\"scnE\":\"\u2AB6\",\"scnsim\":\"\u22E9\",\"scpolint\":\"\u2A13\",\"scsim\":\"\u227F\",\"Scy\":\"\u0421\",\"scy\":\"\u0441\",\"sdotb\":\"\u22A1\",\"sdot\":\"\u22C5\",\"sdote\":\"\u2A66\",\"searhk\":\"\u2925\",\"searr\":\"\u2198\",\"seArr\":\"\u21D8\",\"searrow\":\"\u2198\",\"sect\":\"\u00A7\",\"semi\":\";\",\"seswar\":\"\u2929\",\"setminus\":\"\u2216\",\"setmn\":\"\u2216\",\"sext\":\"\u2736\",\"Sfr\":\"\uD835\uDD16\",\"sfr\":\"\uD835\uDD30\",\"sfrown\":\"\u2322\",\"sharp\":\"\u266F\",\"SHCHcy\":\"\u0429\",\"shchcy\":\"\u0449\",\"SHcy\":\"\u0428\",\"shcy\":\"\u0448\",\"ShortDownArrow\":\"\u2193\",\"ShortLeftArrow\":\"\u2190\",\"shortmid\":\"\u2223\",\"shortparallel\":\"\u2225\",\"ShortRightArrow\":\"\u2192\",\"ShortUpArrow\":\"\u2191\",\"shy\":\"\u00AD\",\"Sigma\":\"\u03A3\",\"sigma\":\"\u03C3\",\"sigmaf\":\"\u03C2\",\"sigmav\":\"\u03C2\",\"sim\":\"\u223C\",\"simdot\":\"\u2A6A\",\"sime\":\"\u2243\",\"simeq\":\"\u2243\",\"simg\":\"\u2A9E\",\"simgE\":\"\u2AA0\",\"siml\":\"\u2A9D\",\"simlE\":\"\u2A9F\",\"simne\":\"\u2246\",\"simplus\":\"\u2A24\",\"simrarr\":\"\u2972\",\"slarr\":\"\u2190\",\"SmallCircle\":\"\u2218\",\"smallsetminus\":\"\u2216\",\"smashp\":\"\u2A33\",\"smeparsl\":\"\u29E4\",\"smid\":\"\u2223\",\"smile\":\"\u2323\",\"smt\":\"\u2AAA\",\"smte\":\"\u2AAC\",\"smtes\":\"\u2AAC\uFE00\",\"SOFTcy\":\"\u042C\",\"softcy\":\"\u044C\",\"solbar\":\"\u233F\",\"solb\":\"\u29C4\",\"sol\":\"/\",\"Sopf\":\"\uD835\uDD4A\",\"sopf\":\"\uD835\uDD64\",\"spades\":\"\u2660\",\"spadesuit\":\"\u2660\",\"spar\":\"\u2225\",\"sqcap\":\"\u2293\",\"sqcaps\":\"\u2293\uFE00\",\"sqcup\":\"\u2294\",\"sqcups\":\"\u2294\uFE00\",\"Sqrt\":\"\u221A\",\"sqsub\":\"\u228F\",\"sqsube\":\"\u2291\",\"sqsubset\":\"\u228F\",\"sqsubseteq\":\"\u2291\",\"sqsup\":\"\u2290\",\"sqsupe\":\"\u2292\",\"sqsupset\":\"\u2290\",\"sqsupseteq\":\"\u2292\",\"square\":\"\u25A1\",\"Square\":\"\u25A1\",\"SquareIntersection\":\"\u2293\",\"SquareSubset\":\"\u228F\",\"SquareSubsetEqual\":\"\u2291\",\"SquareSuperset\":\"\u2290\",\"SquareSupersetEqual\":\"\u2292\",\"SquareUnion\":\"\u2294\",\"squarf\":\"\u25AA\",\"squ\":\"\u25A1\",\"squf\":\"\u25AA\",\"srarr\":\"\u2192\",\"Sscr\":\"\uD835\uDCAE\",\"sscr\":\"\uD835\uDCC8\",\"ssetmn\":\"\u2216\",\"ssmile\":\"\u2323\",\"sstarf\":\"\u22C6\",\"Star\":\"\u22C6\",\"star\":\"\u2606\",\"starf\":\"\u2605\",\"straightepsilon\":\"\u03F5\",\"straightphi\":\"\u03D5\",\"strns\":\"\u00AF\",\"sub\":\"\u2282\",\"Sub\":\"\u22D0\",\"subdot\":\"\u2ABD\",\"subE\":\"\u2AC5\",\"sube\":\"\u2286\",\"subedot\":\"\u2AC3\",\"submult\":\"\u2AC1\",\"subnE\":\"\u2ACB\",\"subne\":\"\u228A\",\"subplus\":\"\u2ABF\",\"subrarr\":\"\u2979\",\"subset\":\"\u2282\",\"Subset\":\"\u22D0\",\"subseteq\":\"\u2286\",\"subseteqq\":\"\u2AC5\",\"SubsetEqual\":\"\u2286\",\"subsetneq\":\"\u228A\",\"subsetneqq\":\"\u2ACB\",\"subsim\":\"\u2AC7\",\"subsub\":\"\u2AD5\",\"subsup\":\"\u2AD3\",\"succapprox\":\"\u2AB8\",\"succ\":\"\u227B\",\"succcurlyeq\":\"\u227D\",\"Succeeds\":\"\u227B\",\"SucceedsEqual\":\"\u2AB0\",\"SucceedsSlantEqual\":\"\u227D\",\"SucceedsTilde\":\"\u227F\",\"succeq\":\"\u2AB0\",\"succnapprox\":\"\u2ABA\",\"succneqq\":\"\u2AB6\",\"succnsim\":\"\u22E9\",\"succsim\":\"\u227F\",\"SuchThat\":\"\u220B\",\"sum\":\"\u2211\",\"Sum\":\"\u2211\",\"sung\":\"\u266A\",\"sup1\":\"\u00B9\",\"sup2\":\"\u00B2\",\"sup3\":\"\u00B3\",\"sup\":\"\u2283\",\"Sup\":\"\u22D1\",\"supdot\":\"\u2ABE\",\"supdsub\":\"\u2AD8\",\"supE\":\"\u2AC6\",\"supe\":\"\u2287\",\"supedot\":\"\u2AC4\",\"Superset\":\"\u2283\",\"SupersetEqual\":\"\u2287\",\"suphsol\":\"\u27C9\",\"suphsub\":\"\u2AD7\",\"suplarr\":\"\u297B\",\"supmult\":\"\u2AC2\",\"supnE\":\"\u2ACC\",\"supne\":\"\u228B\",\"supplus\":\"\u2AC0\",\"supset\":\"\u2283\",\"Supset\":\"\u22D1\",\"supseteq\":\"\u2287\",\"supseteqq\":\"\u2AC6\",\"supsetneq\":\"\u228B\",\"supsetneqq\":\"\u2ACC\",\"supsim\":\"\u2AC8\",\"supsub\":\"\u2AD4\",\"supsup\":\"\u2AD6\",\"swarhk\":\"\u2926\",\"swarr\":\"\u2199\",\"swArr\":\"\u21D9\",\"swarrow\":\"\u2199\",\"swnwar\":\"\u292A\",\"szlig\":\"\u00DF\",\"Tab\":\"\\t\",\"target\":\"\u2316\",\"Tau\":\"\u03A4\",\"tau\":\"\u03C4\",\"tbrk\":\"\u23B4\",\"Tcaron\":\"\u0164\",\"tcaron\":\"\u0165\",\"Tcedil\":\"\u0162\",\"tcedil\":\"\u0163\",\"Tcy\":\"\u0422\",\"tcy\":\"\u0442\",\"tdot\":\"\u20DB\",\"telrec\":\"\u2315\",\"Tfr\":\"\uD835\uDD17\",\"tfr\":\"\uD835\uDD31\",\"there4\":\"\u2234\",\"therefore\":\"\u2234\",\"Therefore\":\"\u2234\",\"Theta\":\"\u0398\",\"theta\":\"\u03B8\",\"thetasym\":\"\u03D1\",\"thetav\":\"\u03D1\",\"thickapprox\":\"\u2248\",\"thicksim\":\"\u223C\",\"ThickSpace\":\"\u205F\u200A\",\"ThinSpace\":\"\u2009\",\"thinsp\":\"\u2009\",\"thkap\":\"\u2248\",\"thksim\":\"\u223C\",\"THORN\":\"\u00DE\",\"thorn\":\"\u00FE\",\"tilde\":\"\u02DC\",\"Tilde\":\"\u223C\",\"TildeEqual\":\"\u2243\",\"TildeFullEqual\":\"\u2245\",\"TildeTilde\":\"\u2248\",\"timesbar\":\"\u2A31\",\"timesb\":\"\u22A0\",\"times\":\"\u00D7\",\"timesd\":\"\u2A30\",\"tint\":\"\u222D\",\"toea\":\"\u2928\",\"topbot\":\"\u2336\",\"topcir\":\"\u2AF1\",\"top\":\"\u22A4\",\"Topf\":\"\uD835\uDD4B\",\"topf\":\"\uD835\uDD65\",\"topfork\":\"\u2ADA\",\"tosa\":\"\u2929\",\"tprime\":\"\u2034\",\"trade\":\"\u2122\",\"TRADE\":\"\u2122\",\"triangle\":\"\u25B5\",\"triangledown\":\"\u25BF\",\"triangleleft\":\"\u25C3\",\"trianglelefteq\":\"\u22B4\",\"triangleq\":\"\u225C\",\"triangleright\":\"\u25B9\",\"trianglerighteq\":\"\u22B5\",\"tridot\":\"\u25EC\",\"trie\":\"\u225C\",\"triminus\":\"\u2A3A\",\"TripleDot\":\"\u20DB\",\"triplus\":\"\u2A39\",\"trisb\":\"\u29CD\",\"tritime\":\"\u2A3B\",\"trpezium\":\"\u23E2\",\"Tscr\":\"\uD835\uDCAF\",\"tscr\":\"\uD835\uDCC9\",\"TScy\":\"\u0426\",\"tscy\":\"\u0446\",\"TSHcy\":\"\u040B\",\"tshcy\":\"\u045B\",\"Tstrok\":\"\u0166\",\"tstrok\":\"\u0167\",\"twixt\":\"\u226C\",\"twoheadleftarrow\":\"\u219E\",\"twoheadrightarrow\":\"\u21A0\",\"Uacute\":\"\u00DA\",\"uacute\":\"\u00FA\",\"uarr\":\"\u2191\",\"Uarr\":\"\u219F\",\"uArr\":\"\u21D1\",\"Uarrocir\":\"\u2949\",\"Ubrcy\":\"\u040E\",\"ubrcy\":\"\u045E\",\"Ubreve\":\"\u016C\",\"ubreve\":\"\u016D\",\"Ucirc\":\"\u00DB\",\"ucirc\":\"\u00FB\",\"Ucy\":\"\u0423\",\"ucy\":\"\u0443\",\"udarr\":\"\u21C5\",\"Udblac\":\"\u0170\",\"udblac\":\"\u0171\",\"udhar\":\"\u296E\",\"ufisht\":\"\u297E\",\"Ufr\":\"\uD835\uDD18\",\"ufr\":\"\uD835\uDD32\",\"Ugrave\":\"\u00D9\",\"ugrave\":\"\u00F9\",\"uHar\":\"\u2963\",\"uharl\":\"\u21BF\",\"uharr\":\"\u21BE\",\"uhblk\":\"\u2580\",\"ulcorn\":\"\u231C\",\"ulcorner\":\"\u231C\",\"ulcrop\":\"\u230F\",\"ultri\":\"\u25F8\",\"Umacr\":\"\u016A\",\"umacr\":\"\u016B\",\"uml\":\"\u00A8\",\"UnderBar\":\"_\",\"UnderBrace\":\"\u23DF\",\"UnderBracket\":\"\u23B5\",\"UnderParenthesis\":\"\u23DD\",\"Union\":\"\u22C3\",\"UnionPlus\":\"\u228E\",\"Uogon\":\"\u0172\",\"uogon\":\"\u0173\",\"Uopf\":\"\uD835\uDD4C\",\"uopf\":\"\uD835\uDD66\",\"UpArrowBar\":\"\u2912\",\"uparrow\":\"\u2191\",\"UpArrow\":\"\u2191\",\"Uparrow\":\"\u21D1\",\"UpArrowDownArrow\":\"\u21C5\",\"updownarrow\":\"\u2195\",\"UpDownArrow\":\"\u2195\",\"Updownarrow\":\"\u21D5\",\"UpEquilibrium\":\"\u296E\",\"upharpoonleft\":\"\u21BF\",\"upharpoonright\":\"\u21BE\",\"uplus\":\"\u228E\",\"UpperLeftArrow\":\"\u2196\",\"UpperRightArrow\":\"\u2197\",\"upsi\":\"\u03C5\",\"Upsi\":\"\u03D2\",\"upsih\":\"\u03D2\",\"Upsilon\":\"\u03A5\",\"upsilon\":\"\u03C5\",\"UpTeeArrow\":\"\u21A5\",\"UpTee\":\"\u22A5\",\"upuparrows\":\"\u21C8\",\"urcorn\":\"\u231D\",\"urcorner\":\"\u231D\",\"urcrop\":\"\u230E\",\"Uring\":\"\u016E\",\"uring\":\"\u016F\",\"urtri\":\"\u25F9\",\"Uscr\":\"\uD835\uDCB0\",\"uscr\":\"\uD835\uDCCA\",\"utdot\":\"\u22F0\",\"Utilde\":\"\u0168\",\"utilde\":\"\u0169\",\"utri\":\"\u25B5\",\"utrif\":\"\u25B4\",\"uuarr\":\"\u21C8\",\"Uuml\":\"\u00DC\",\"uuml\":\"\u00FC\",\"uwangle\":\"\u29A7\",\"vangrt\":\"\u299C\",\"varepsilon\":\"\u03F5\",\"varkappa\":\"\u03F0\",\"varnothing\":\"\u2205\",\"varphi\":\"\u03D5\",\"varpi\":\"\u03D6\",\"varpropto\":\"\u221D\",\"varr\":\"\u2195\",\"vArr\":\"\u21D5\",\"varrho\":\"\u03F1\",\"varsigma\":\"\u03C2\",\"varsubsetneq\":\"\u228A\uFE00\",\"varsubsetneqq\":\"\u2ACB\uFE00\",\"varsupsetneq\":\"\u228B\uFE00\",\"varsupsetneqq\":\"\u2ACC\uFE00\",\"vartheta\":\"\u03D1\",\"vartriangleleft\":\"\u22B2\",\"vartriangleright\":\"\u22B3\",\"vBar\":\"\u2AE8\",\"Vbar\":\"\u2AEB\",\"vBarv\":\"\u2AE9\",\"Vcy\":\"\u0412\",\"vcy\":\"\u0432\",\"vdash\":\"\u22A2\",\"vDash\":\"\u22A8\",\"Vdash\":\"\u22A9\",\"VDash\":\"\u22AB\",\"Vdashl\":\"\u2AE6\",\"veebar\":\"\u22BB\",\"vee\":\"\u2228\",\"Vee\":\"\u22C1\",\"veeeq\":\"\u225A\",\"vellip\":\"\u22EE\",\"verbar\":\"|\",\"Verbar\":\"\u2016\",\"vert\":\"|\",\"Vert\":\"\u2016\",\"VerticalBar\":\"\u2223\",\"VerticalLine\":\"|\",\"VerticalSeparator\":\"\u2758\",\"VerticalTilde\":\"\u2240\",\"VeryThinSpace\":\"\u200A\",\"Vfr\":\"\uD835\uDD19\",\"vfr\":\"\uD835\uDD33\",\"vltri\":\"\u22B2\",\"vnsub\":\"\u2282\u20D2\",\"vnsup\":\"\u2283\u20D2\",\"Vopf\":\"\uD835\uDD4D\",\"vopf\":\"\uD835\uDD67\",\"vprop\":\"\u221D\",\"vrtri\":\"\u22B3\",\"Vscr\":\"\uD835\uDCB1\",\"vscr\":\"\uD835\uDCCB\",\"vsubnE\":\"\u2ACB\uFE00\",\"vsubne\":\"\u228A\uFE00\",\"vsupnE\":\"\u2ACC\uFE00\",\"vsupne\":\"\u228B\uFE00\",\"Vvdash\":\"\u22AA\",\"vzigzag\":\"\u299A\",\"Wcirc\":\"\u0174\",\"wcirc\":\"\u0175\",\"wedbar\":\"\u2A5F\",\"wedge\":\"\u2227\",\"Wedge\":\"\u22C0\",\"wedgeq\":\"\u2259\",\"weierp\":\"\u2118\",\"Wfr\":\"\uD835\uDD1A\",\"wfr\":\"\uD835\uDD34\",\"Wopf\":\"\uD835\uDD4E\",\"wopf\":\"\uD835\uDD68\",\"wp\":\"\u2118\",\"wr\":\"\u2240\",\"wreath\":\"\u2240\",\"Wscr\":\"\uD835\uDCB2\",\"wscr\":\"\uD835\uDCCC\",\"xcap\":\"\u22C2\",\"xcirc\":\"\u25EF\",\"xcup\":\"\u22C3\",\"xdtri\":\"\u25BD\",\"Xfr\":\"\uD835\uDD1B\",\"xfr\":\"\uD835\uDD35\",\"xharr\":\"\u27F7\",\"xhArr\":\"\u27FA\",\"Xi\":\"\u039E\",\"xi\":\"\u03BE\",\"xlarr\":\"\u27F5\",\"xlArr\":\"\u27F8\",\"xmap\":\"\u27FC\",\"xnis\":\"\u22FB\",\"xodot\":\"\u2A00\",\"Xopf\":\"\uD835\uDD4F\",\"xopf\":\"\uD835\uDD69\",\"xoplus\":\"\u2A01\",\"xotime\":\"\u2A02\",\"xrarr\":\"\u27F6\",\"xrArr\":\"\u27F9\",\"Xscr\":\"\uD835\uDCB3\",\"xscr\":\"\uD835\uDCCD\",\"xsqcup\":\"\u2A06\",\"xuplus\":\"\u2A04\",\"xutri\":\"\u25B3\",\"xvee\":\"\u22C1\",\"xwedge\":\"\u22C0\",\"Yacute\":\"\u00DD\",\"yacute\":\"\u00FD\",\"YAcy\":\"\u042F\",\"yacy\":\"\u044F\",\"Ycirc\":\"\u0176\",\"ycirc\":\"\u0177\",\"Ycy\":\"\u042B\",\"ycy\":\"\u044B\",\"yen\":\"\u00A5\",\"Yfr\":\"\uD835\uDD1C\",\"yfr\":\"\uD835\uDD36\",\"YIcy\":\"\u0407\",\"yicy\":\"\u0457\",\"Yopf\":\"\uD835\uDD50\",\"yopf\":\"\uD835\uDD6A\",\"Yscr\":\"\uD835\uDCB4\",\"yscr\":\"\uD835\uDCCE\",\"YUcy\":\"\u042E\",\"yucy\":\"\u044E\",\"yuml\":\"\u00FF\",\"Yuml\":\"\u0178\",\"Zacute\":\"\u0179\",\"zacute\":\"\u017A\",\"Zcaron\":\"\u017D\",\"zcaron\":\"\u017E\",\"Zcy\":\"\u0417\",\"zcy\":\"\u0437\",\"Zdot\":\"\u017B\",\"zdot\":\"\u017C\",\"zeetrf\":\"\u2128\",\"ZeroWidthSpace\":\"\u200B\",\"Zeta\":\"\u0396\",\"zeta\":\"\u03B6\",\"zfr\":\"\uD835\uDD37\",\"Zfr\":\"\u2128\",\"ZHcy\":\"\u0416\",\"zhcy\":\"\u0436\",\"zigrarr\":\"\u21DD\",\"zopf\":\"\uD835\uDD6B\",\"Zopf\":\"\u2124\",\"Zscr\":\"\uD835\uDCB5\",\"zscr\":\"\uD835\uDCCF\",\"zwj\":\"\u200D\",\"zwnj\":\"\u200C\"}\n", "// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/lib/maps/entities.json');\n", "module.exports=/[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/", "\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n", "\n'use strict';\n\n\n/* eslint-disable no-bitwise */\n\nvar decodeCache = {};\n\nfunction getDecodeCache(exclude) {\n  var i, ch, cache = decodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = decodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache;\n}\n\n\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n  var cache;\n\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    var i, l, b1, b2, b3, b4, chr,\n        result = '';\n\n    for (i = 0, l = seq.length; i < l; i += 3) {\n      b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue;\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue;\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result;\n  });\n}\n\n\ndecode.defaultChars   = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\n\nmodule.exports = decode;\n", "\n'use strict';\n\n\nmodule.exports = function format(url) {\n  var result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result;\n};\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n", "'use strict';\n\n\nmodule.exports.encode = require('./encode');\nmodule.exports.decode = require('./decode');\nmodule.exports.format = require('./format');\nmodule.exports.parse  = require('./parse');\n", "module.exports=/[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/", "module.exports=/[\\0-\\x1F\\x7F-\\x9F]/", "module.exports=/[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/", "module.exports=/[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/", "'use strict';\n\nexports.Any = require('./properties/Any/regex');\nexports.Cc  = require('./categories/Cc/regex');\nexports.Cf  = require('./categories/Cf/regex');\nexports.P   = require('./categories/P/regex');\nexports.Z   = require('./categories/Z/regex');\n", "// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ');\n\n  // In node v10 '\u1E9E'.toLowerCase() === '\u1E7E', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('\u1E9E'.toLowerCase() === '\u1E7E') {\n    str = str.replace(/\u1E9E/g, '\u00DF');\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // \u0130, \u03F4, \u1E9E, \u2126, \u212A, \u212B - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (\u0398), U+03f4 (\u03F4) and lowercase U+03b8 (\u03B8), U+03d1 (\u03D1)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change \u03D1 (it's already lowercase),\n  // and .toUpperCase() doesn't change \u03F4 (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n", "// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n", "// Parse link destination\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, pos, max) {\n  var code, level,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) { return result; }\n      if (code === 0x3C /* < */) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) { break; }\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n      if (level > 32) { return result; }\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.lines = lines;\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n", "// Parse link title\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkTitle(str, pos, max) {\n  var code,\n      marker,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (pos >= max) { return result; }\n\n  marker = str.charCodeAt(pos);\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }\n\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29; }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n\n    pos++;\n  }\n\n  return result;\n};\n", "// Just a shortcut for bulk export\n'use strict';\n\n\nexports.parseLinkLabel       = require('./parse_link_label');\nexports.parseLinkDestination = require('./parse_link_destination');\nexports.parseLinkTitle       = require('./parse_link_title');\n", "/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      langAttrs = '',\n      highlighted, i, arr, tmpAttrs, tmpToken;\n\n  if (info) {\n    arr = info.split(/(\\s+)/g);\n    langName = arr[0];\n    langAttrs = arr.slice(2).join('');\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice();\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    } else if (tokens[i].type === 'softbreak') {\n      result += '\\n';\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n", "/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n", "// Normalize input string\n\n'use strict';\n\n\n// https://spec.commonmark.org/0.29/#line-ending\nvar NEWLINES_RE  = /\\r\\n?|\\n/g;\nvar NULL_RE      = /\\0/g;\n\n\nmodule.exports = function normalize(state) {\n  var str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n\n  state.src = str;\n};\n", "'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n", "'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n", "// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        // forbid escape sequence at the start of the string,\n        // this avoids http\\://example.com/ from being linkified as\n        // http:<a href=\"//example.com/\">//example.com/</a>\n        if (links.length > 0 &&\n            links[0].index === 0 &&\n            i > 0 &&\n            tokens[i - 1].type === 'text_special') {\n          links = links.slice(1);\n        }\n\n        for (ln = 0; ln < links.length; ln++) {\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n", "// Simple typographic replacements\n//\n// (c) (C) \u2192 \u00A9\n// (tm) (TM) \u2192 \u2122\n// (r) (R) \u2192 \u00AE\n// +- \u2192 \u00B1\n// (p) (P) -> \u00A7\n// ... \u2192 \u2026 (also ?.... \u2192 ?.., !.... \u2192 !..)\n// ???????? \u2192 ???, !!!!! \u2192 !!!, `,,` \u2192 `,`\n// -- \u2192 &ndash;, --- \u2192 &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> \u00BD, \u00BC, \u00BE\n// - multiplications 2 x 4 -> 2 \u00D7 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '\u00A9',\n  r: '\u00AE',\n  tm: '\u2122'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '\u00B1')\n          // .., ..., ....... -> \u2026\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '\u2026').replace(/([?!])\u2026/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n", "// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = '\\u2019'; /* \u2019 */\n\n\nfunction replaceAt(str, index, ch) {\n  return str.slice(0, index) + ch + str.slice(index + 1);\n}\n\nfunction process_inlines(tokens, state) {\n  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,\n      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,\n      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n\n  stack = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    thisLevel = tokens[i].level;\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break; }\n    }\n    stack.length = j + 1;\n\n    if (token.type !== 'text') { continue; }\n\n    text = token.content;\n    pos = 0;\n    max = text.length;\n\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      t = QUOTE_RE.exec(text);\n      if (!t) { break; }\n\n      canOpen = canClose = true;\n      pos = t.index + 1;\n      isSingle = (t[0] === \"'\");\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      lastChar = 0x20;\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      nextChar = 0x20;\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar;\n        canClose = isNextPunctChar;\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          item = stack[j];\n          if (stack[j].level < thisLevel) { break; }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote);\n\n            pos += closeQuote.length - 1;\n            if (item.token === i) { pos += openQuote.length - 1; }\n\n            text = token.content;\n            max = text.length;\n\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n};\n", "// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\n'use strict';\n\n\nmodule.exports = function text_join(state) {\n  var j, l, tokens, curr, max, last,\n      blockTokens = state.tokens;\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') continue;\n\n    tokens = blockTokens[j].children;\n    max = tokens.length;\n\n    for (curr = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text_special') {\n        tokens[curr].type = 'text';\n      }\n    }\n\n    for (curr = last = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text' &&\n          curr + 1 < max &&\n          tokens[curr + 1].type === 'text') {\n\n        // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n      } else {\n        if (curr !== last) { tokens[last] = tokens[curr]; }\n\n        last++;\n      }\n    }\n\n    if (curr !== last) {\n      tokens.length = last;\n    }\n  }\n};\n", "// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n", "// Core state object\n//\n'use strict';\n\nvar Token = require('../token');\n\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n\nmodule.exports = StateCore;\n", "/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ],\n  // `text_join` finds `text_special` tokens (for escape sequences)\n  // and joins them with the rest of the text\n  [ 'text_join',      require('./rules_core/text_join')      ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n", "// GFM table, https://github.github.com/gfm/#tables-extension-\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.tShift[line],\n      max = state.eMarks[line];\n\n  return state.src.slice(pos, max);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      isEscaped = false,\n      lastPos = 0,\n      current = '';\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos));\n        current = '';\n        lastPos = pos + 1;\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1);\n        lastPos = pos;\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */);\n    pos++;\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(current + str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, l, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines, oldParentType, terminate,\n      terminatorRules, firstCh, secondCh;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  firstCh = state.src.charCodeAt(pos++);\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false; }\n\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  secondCh = state.src.charCodeAt(pos++);\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false;\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText);\n  if (columns.length && columns[0] === '') columns.shift();\n  if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  columnCount = columns.length;\n  if (columnCount === 0 || columnCount !== aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'table';\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) { break; }\n    lineText = getLine(state, nextLine).trim();\n    if (!lineText) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n    if (nextLine === startLine + 2) {\n      token     = state.push('tbody_open', 'tbody', 1);\n      token.map = tbodyLines = [ startLine + 2, 0 ];\n    }\n\n    token     = state.push('tr_open', 'tr', 1);\n    token.map = [ nextLine, nextLine + 1 ];\n\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n\n  if (tbodyLines) {\n    token = state.push('tbody_close', 'tbody', -1);\n    tbodyLines[1] = nextLine;\n  }\n\n  token = state.push('table_close', 'table', -1);\n  tableLines[1] = nextLine;\n\n  state.parentType = oldParentType;\n  state.line = nextLine;\n  return true;\n};\n", "// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n", "// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false;\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n", "// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      isOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // set offset past spaces and \">\"\n  initial = offset = state.sCount[startLine] + 1;\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n    // ' >   test '\n    //     ^ -- position start of line here:\n    pos++;\n    initial++;\n    offset++;\n    adjustTab = false;\n    spaceAfterMarker = true;\n  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n    spaceAfterMarker = true;\n\n    if ((state.bsCount[startLine] + offset) % 4 === 3) {\n      // '  >\\t  test '\n      //       ^ -- position start of line here (tab has width===1)\n      pos++;\n      initial++;\n      offset++;\n      adjustTab = false;\n    } else {\n      // ' >\\t  test '\n      //    ^ -- position start of line here + shift bsCount slightly\n      //         to make extra space appear\n      adjustTab = true;\n    }\n  } else {\n    spaceAfterMarker = false;\n  }\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n\n    pos++;\n  }\n\n  oldBSCount = [ state.bsCount[startLine] ];\n  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n  lastLineEmpty = pos >= max;\n\n  oldSCount = [ state.sCount[startLine] ];\n  state.sCount[startLine] = offset - initial;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    isOutdented = state.sCount[nextLine] < state.blkIndent;\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      initial = offset = state.sCount[nextLine] + 1;\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n\n        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n", "// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n", "// Lists\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max, ch;\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1;\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1; }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1; }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1; }\n\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break;\n    }\n\n    return -1;\n  }\n\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i, l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\n\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      nextLine,\n      offset,\n      oldListIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      isTerminatingParagraph = false,\n      tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[startLine] - state.listIndent >= 4 &&\n      state.sCount[startLine] < state.blkIndent) {\n    return false;\n  }\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[startLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[startLine] + state.tShift[startLine];\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n\n  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n    isOrdered = false;\n\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true; }\n\n  // Start list\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [ [ 'start', markerValue ] ];\n    }\n\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1);\n  }\n\n  token.map    = listLines = [ startLine, 0 ];\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  nextLine = startLine;\n  prevEmptyEnd = false;\n  terminatorRules = state.md.block.ruler.getRules('list');\n\n  oldParentType = state.parentType;\n  state.parentType = 'list';\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n\n    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    contentStart = pos;\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1; }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    token.map    = itemLines = [ startLine, 0 ];\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1);\n    }\n\n    // change current state, then restore it after parser subcall\n    oldTight = state.tight;\n    oldTShift = state.tShift[startLine];\n    oldSCount = state.sCount[startLine];\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    oldListIndent = state.listIndent;\n    state.listIndent = state.blkIndent;\n    state.blkIndent = indent;\n\n    state.tight = true;\n    state.tShift[startLine] = contentStart - state.bMarks[startLine];\n    state.sCount[startLine] = offset;\n\n    if (contentStart >= max && state.isEmpty(startLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, startLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);\n\n    state.blkIndent = state.listIndent;\n    state.listIndent = oldListIndent;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldSCount;\n    state.tight = oldTight;\n\n    token        = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n\n    nextLine = startLine = state.line;\n    itemLines[1] = nextLine;\n    contentStart = state.bMarks[startLine];\n\n    if (nextLine >= endLine) { break; }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) { break; }\n\n    // fail if terminating block found\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n      start = state.bMarks[nextLine] + state.tShift[nextLine];\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n\n  listLines[1] = nextLine;\n  state.line = nextLine;\n\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};\n", "'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n", "// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\n'use strict';\n\n\nmodule.exports = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n];\n", "// Regexps to match html elements\n\n'use strict';\n\nvar attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\nvar unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\n\nvar attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\nvar attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\nvar open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\nvar close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nvar comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nvar processing  = '<[?][\\\\s\\\\S]*?[?]>';\nvar declaration = '<![A-Z]+\\\\s+[^>]*>';\nvar cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\nvar HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')');\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n", "// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n", "// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n", "// lheading (---, ===)\n\n'use strict';\n\n\nmodule.exports = function lheading(state, startLine, endLine/*, silent*/) {\n  var content, terminate, i, l, token, pos, max, level, marker,\n      nextLine = startLine + 1, oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2);\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine + 1;\n\n  token          = state.push('heading_open', 'h' + String(level), 1);\n  token.markup   = String.fromCharCode(marker);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line - 1 ];\n  token.children = [];\n\n  token          = state.push('heading_close', 'h' + String(level), -1);\n  token.markup   = String.fromCharCode(marker);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n", "// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n", "// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent (for example, if we are\n                       // inside a list, it would be positioned after list marker)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) this.level--; // closing tag\n  token.level = this.level;\n  if (nesting > 0) this.level++; // opening tag\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n", "/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) { break; }\n    }\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n", "// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n", "// Process links like https://example.org/\n\n'use strict';\n\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nvar SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;\n\n\nmodule.exports = function linkify(state, silent) {\n  var pos, max, match, proto, link, url, fullUrl, token;\n\n  if (!state.md.options.linkify) return false;\n  if (state.linkLevel > 0) return false;\n\n  pos = state.pos;\n  max = state.posMax;\n\n  if (pos + 3 > max) return false;\n  if (state.src.charCodeAt(pos) !== 0x3A/* : */) return false;\n  if (state.src.charCodeAt(pos + 1) !== 0x2F/* / */) return false;\n  if (state.src.charCodeAt(pos + 2) !== 0x2F/* / */) return false;\n\n  match = state.pending.match(SCHEME_RE);\n  if (!match) return false;\n\n  proto = match[1];\n\n  link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));\n  if (!link) return false;\n\n  url = link.url;\n\n  // disallow '*' at the end of the link (conflicts with emphasis)\n  url = url.replace(/\\*+$/, '');\n\n  fullUrl = state.md.normalizeLink(url);\n  if (!state.md.validateLink(fullUrl)) return false;\n\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length);\n\n    token         = state.push('link_open', 'a', 1);\n    token.attrs   = [ [ 'href', fullUrl ] ];\n    token.markup  = 'linkify';\n    token.info    = 'auto';\n\n    token         = state.push('text', '', 0);\n    token.content = state.md.normalizeLinkText(url);\n\n    token         = state.push('link_close', 'a', -1);\n    token.markup  = 'linkify';\n    token.info    = 'auto';\n  }\n\n  state.pos += url.length - proto.length;\n  return true;\n};\n", "// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, ws, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        ws = pmax - 1;\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;\n\n        state.pending = state.pending.slice(0, ws);\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n", "// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch1, ch2, origStr, escapedStr, token, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) return false;\n  pos++;\n\n  // '\\' at the end of the inline block\n  if (pos >= max) return false;\n\n  ch1 = state.src.charCodeAt(pos);\n\n  if (ch1 === 0x0A) {\n    if (!silent) {\n      state.push('hardbreak', 'br', 0);\n    }\n\n    pos++;\n    // skip leading whitespaces from next line\n    while (pos < max) {\n      ch1 = state.src.charCodeAt(pos);\n      if (!isSpace(ch1)) break;\n      pos++;\n    }\n\n    state.pos = pos;\n    return true;\n  }\n\n  escapedStr = state.src[pos];\n\n  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n    ch2 = state.src.charCodeAt(pos + 1);\n\n    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n      escapedStr += state.src[pos + 1];\n      pos++;\n    }\n  }\n\n  origStr = '\\\\' + escapedStr;\n\n  if (!silent) {\n    token = state.push('text_special', '', 0);\n\n    if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n      token.content = escapedStr;\n    } else {\n      token.content = origStr;\n    }\n\n    token.markup = origStr;\n    token.info   = 'escape';\n  }\n\n  state.pos = pos + 1;\n  return true;\n};\n", "// Parse backticks\n\n'use strict';\n\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n  openerLength = marker.length;\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n  }\n\n  matchStart = matchEnd = pos;\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    closerLength = matchEnd - matchStart;\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        token     = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart;\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true;\n\n  if (!silent) state.pending += marker;\n  state.pos += openerLength;\n  return true;\n};\n", "// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      token:  state.tokens.length - 1,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      max = delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n", "// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      max = delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               // check that first two markers match and adjacent\n               delimiters[i - 1].marker === startDelim.marker &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               // check that last two markers are adjacent (we can safely assume they match)\n               delimiters[startDelim.end + 1].token === endDelim.token + 1;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n", "// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      token,\n      href = '',\n      title = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos;\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n          if (!isSpace(code) && code !== 0x0A) { break; }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.linkLevel++;\n    state.md.inline.tokenize(state);\n    state.linkLevel--;\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n", "// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n", "// Process autolinks '<protocol:...>'\n\n'use strict';\n\n\n/*eslint max-len:0*/\nvar EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\nvar AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)$/;\n\n\nmodule.exports = function autolink(state, silent) {\n  var url, fullUrl, token, ch, start, max,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  start = state.pos;\n  max = state.posMax;\n\n  for (;;) {\n    if (++pos >= max) return false;\n\n    ch = state.src.charCodeAt(pos);\n\n    if (ch === 0x3C /* < */) return false;\n    if (ch === 0x3E /* > */) break;\n  }\n\n  url = state.src.slice(start + 1, pos);\n\n  if (AUTOLINK_RE.test(url)) {\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  if (EMAIL_RE.test(url)) {\n    fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  return false;\n};\n", "// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function html_inline(state, silent) {\n  var ch, match, max, token,\n      pos = state.pos;\n\n  if (!state.md.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    token         = state.push('html_inline', '', 0);\n    token.content = state.src.slice(pos, pos + match[0].length);\n\n    if (isLinkOpen(token.content))  state.linkLevel++;\n    if (isLinkClose(token.content)) state.linkLevel--;\n  }\n  state.pos += match[0].length;\n  return true;\n};\n", "// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n'use strict';\n\nvar entities          = require('../common/entities');\nvar has               = require('../common/utils').has;\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\nvar fromCodePoint     = require('../common/utils').fromCodePoint;\n\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nvar NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;\n\n\nmodule.exports = function entity(state, silent) {\n  var ch, code, match, token, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) return false;\n\n  if (pos + 1 >= max) return false;\n\n  ch = state.src.charCodeAt(pos + 1);\n\n  if (ch === 0x23 /* # */) {\n    match = state.src.slice(pos).match(DIGITAL_RE);\n    if (match) {\n      if (!silent) {\n        code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n\n        token         = state.push('text_special', '', 0);\n        token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        token.markup  = match[0];\n        token.info    = 'entity';\n      }\n      state.pos += match[0].length;\n      return true;\n    }\n  } else {\n    match = state.src.slice(pos).match(NAMED_RE);\n    if (match) {\n      if (has(entities, match[1])) {\n        if (!silent) {\n          token         = state.push('text_special', '', 0);\n          token.content = entities[match[1]];\n          token.markup  = match[0];\n          token.info    = 'entity';\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n", "// For each opening emphasis-like marker find a matching closing one\n//\n'use strict';\n\n\nfunction processDelimiters(state, delimiters) {\n  var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx,\n      isOddMatch, lastJump,\n      openersBottom = {},\n      max = delimiters.length;\n\n  if (!max) return;\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  var headerIdx = 0;\n  var lastTokenIdx = -2; // needs any value lower than -1\n  var jumps = [];\n\n  for (closerIdx = 0; closerIdx < max; closerIdx++) {\n    closer = delimiters[closerIdx];\n\n    jumps.push(0);\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx;\n    }\n\n    lastTokenIdx = closer.token;\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0;\n\n    if (!closer.close) continue;\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [ -1, -1, -1, -1, -1, -1 ];\n    }\n\n    minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)];\n\n    openerIdx = headerIdx - jumps[headerIdx] - 1;\n\n    newMinOpenerIdx = openerIdx;\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      opener = delimiters[openerIdx];\n\n      if (opener.marker !== closer.marker) continue;\n\n      if (opener.open && opener.end < 0) {\n\n        isOddMatch = false;\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true;\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ?\n            jumps[openerIdx - 1] + 1 :\n            0;\n\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n          jumps[openerIdx] = lastJump;\n\n          closer.open  = false;\n          opener.end   = closerIdx;\n          opener.close = false;\n          newMinOpenerIdx = -1;\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2;\n          break;\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx;\n    }\n  }\n}\n\n\nmodule.exports = function link_pairs(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  processDelimiters(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n", "// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n'use strict';\n\n\nmodule.exports = function fragments_join(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n", "// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n\n  // backtick length => last seen position\n  this.backticks = {};\n  this.backticksScanned = false;\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0;\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n  var token_meta = null;\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n\n  token.level = this.level;\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = { delimiters: this.delimiters };\n  }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n", "/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\n\nvar _rules = [\n  [ 'text',            require('./rules_inline/text') ],\n  [ 'linkify',         require('./rules_inline/linkify') ],\n  [ 'newline',         require('./rules_inline/newline') ],\n  [ 'escape',          require('./rules_inline/escape') ],\n  [ 'backticks',       require('./rules_inline/backticks') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],\n  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],\n  [ 'link',            require('./rules_inline/link') ],\n  [ 'image',           require('./rules_inline/image') ],\n  [ 'autolink',        require('./rules_inline/autolink') ],\n  [ 'html_inline',     require('./rules_inline/html_inline') ],\n  [ 'entity',          require('./rules_inline/entity') ]\n];\n\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nvar _rules2 = [\n  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],\n  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],\n  // rules for pairs separate '**' into its own text tokens, which may be left unused,\n  // rule below merges unused segments back with the rest of the text\n  [ 'fragments_join',  require('./rules_inline/fragments_join') ]\n];\n\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  var i;\n\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  var ok, i, pos = state.pos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      maxNesting = state.md.options.maxNesting,\n      cache = state.cache;\n\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n\n  if (state.level < maxNesting) {\n    for (i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n\n      if (ok) { break; }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n\n  if (!ok) { state.pos++; }\n  cache[pos] = state.pos;\n};\n\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      end = state.posMax,\n      maxNesting = state.md.options.maxNesting;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n\n    if (state.level < maxNesting) {\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) { break; }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break; }\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  var i, rules, len;\n  var state = new this.State(str, md, env, outTokens);\n\n  this.tokenize(state);\n\n  rules = this.ruler2.getRules('');\n  len = rules.length;\n\n  for (i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\n\n\nParserInline.prototype.State = require('./rules_inline/state_inline');\n\n\nmodule.exports = ParserInline;\n", "'use strict';\n\n\nmodule.exports = function (opts) {\n  var re = {};\n  opts = opts || {};\n\n  // Use direct extract instead of `regenerate` to reduse browserified size\n  re.src_Any = require('uc.micro/properties/Any/regex').source;\n  re.src_Cc  = require('uc.micro/categories/Cc/regex').source;\n  re.src_Z   = require('uc.micro/categories/Z/regex').source;\n  re.src_P   = require('uc.micro/categories/P/regex').source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  var text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  ////////////////////////////////////////////////////////////////////////////////\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +\n    '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' +  // allow `I'm_king` if no pair found\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' + // google has many dots in \"google search\" links (#66, #81).\n                                     // github has ... in commit range links,\n                                     // Restrict to\n                                     // - english\n                                     // - percent-encoded\n                                     // - parts of file path\n                                     // - params separator\n                                     // until more examples found.\n          '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' +\n          (opts['---'] ?\n            '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            :\n            '\\\\-+|'\n          ) +\n          ',(?!' + re.src_ZCc + '|$)|' +       // allow `,,,` in paths\n          ';(?!' + re.src_ZCc + '|$)|' +       // allow `;` if not followed by space-like char\n          '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' +  // allow `!!!` in paths, but not at the end\n          '\\\\?(?!' + re.src_ZCc + '|[?]|$)' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/*_root*/ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Main rules\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re;\n};\n", "'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test     = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/\nLinkifyIt.prototype.matchAtStart = function matchAtStart(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) return null;\n\n  var m = this.re.schema_at_start.exec(text);\n  if (!m) return null;\n\n  var len = this.testSchemaAt(text, m[2], m[0].length);\n  if (!len) return null;\n\n  this.__schema__     = m[2];\n  this.__index__      = m.index + m[1].length;\n  this.__last_index__ = m.index + m[0].length + len;\n\n  return createMatch(this, 0);\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n", "// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '\u00AB\u00BB\u201E\u201C' for Russian, '\u201E\u201C\u201A\u2018' for German,\n    // and ['\u00AB\\xA0', '\\xA0\u00BB', '\u2039\\xA0', '\\xA0\u203A'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* \u201C\u201D\u2018\u2019 */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n", "// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '\u00AB\u00BB\u201E\u201C' for Russian, '\u201E\u201C\u201A\u2018' for German,\n    // and ['\u00AB\\xA0', '\\xA0\u00BB', '\u2039\\xA0', '\\xA0\u203A'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* \u201C\u201D\u2018\u2019 */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'fragments_join'\n      ]\n    }\n  }\n};\n", "// Commonmark default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         true,         // Enable HTML tags in source\n    xhtmlOut:     true,         // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '\u00AB\u00BB\u201E\u201C' for Russian, '\u201E\u201C\u201A\u2018' for German,\n    // and ['\u00AB\\xA0', '\\xA0\u00BB', '\u2039\\xA0', '\\xA0\u203A'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* \u201C\u201D\u2018\u2019 */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'fragments_join'\n      ]\n    }\n  }\n};\n", "// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  default: require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%');\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `\u201C\u201D\u2018\u2019`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'\u00AB\u00BB\u201E\u201C'` for Russian, `'\u201E\u201C\u201A\u2018'` for German, and\n *   `['\u00AB\\xA0', '\\xA0\u00BB', '\u2039\\xA0', '\\xA0\u203A']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n", "'use strict';\n\n\nmodule.exports = require('./lib/');\n", "!function(t,n){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=n():\"function\"==typeof define&&define.amd?define([],n):\"object\"==typeof exports?exports.onig=n():t.onig=n()}(this,(()=>{return t={770:function(t,n,e){\"use strict\";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,\"__esModule\",{value:!0}),n.setDefaultDebugCall=n.createOnigScanner=n.createOnigString=n.loadWASM=n.OnigScanner=n.OnigString=void 0;const i=r(e(418));let o=null,a=!1;class f{static _utf8ByteLength(t){let n=0;for(let e=0,r=t.length;e<r;e++){const i=t.charCodeAt(e);let o=i,a=!1;if(i>=55296&&i<=56319&&e+1<r){const n=t.charCodeAt(e+1);n>=56320&&n<=57343&&(o=65536+(i-55296<<10)|n-56320,a=!0)}n+=o<=127?1:o<=2047?2:o<=65535?3:4,a&&e++}return n}constructor(t){const n=t.length,e=f._utf8ByteLength(t),r=e!==n,i=r?new Uint32Array(n+1):null;r&&(i[n]=e);const o=r?new Uint32Array(e+1):null;r&&(o[e]=n);const a=new Uint8Array(e);let s=0;for(let e=0;e<n;e++){const f=t.charCodeAt(e);let u=f,c=!1;if(f>=55296&&f<=56319&&e+1<n){const n=t.charCodeAt(e+1);n>=56320&&n<=57343&&(u=65536+(f-55296<<10)|n-56320,c=!0)}r&&(i[e]=s,c&&(i[e+1]=s),u<=127?o[s+0]=e:u<=2047?(o[s+0]=e,o[s+1]=e):u<=65535?(o[s+0]=e,o[s+1]=e,o[s+2]=e):(o[s+0]=e,o[s+1]=e,o[s+2]=e,o[s+3]=e)),u<=127?a[s++]=u:u<=2047?(a[s++]=192|(1984&u)>>>6,a[s++]=128|(63&u)>>>0):u<=65535?(a[s++]=224|(61440&u)>>>12,a[s++]=128|(4032&u)>>>6,a[s++]=128|(63&u)>>>0):(a[s++]=240|(1835008&u)>>>18,a[s++]=128|(258048&u)>>>12,a[s++]=128|(4032&u)>>>6,a[s++]=128|(63&u)>>>0),c&&e++}this.utf16Length=n,this.utf8Length=e,this.utf16Value=t,this.utf8Value=a,this.utf16OffsetToUtf8=i,this.utf8OffsetToUtf16=o}createString(t){const n=t._omalloc(this.utf8Length);return t.HEAPU8.set(this.utf8Value,n),n}}class s{constructor(t){if(this.id=++s.LAST_ID,!o)throw new Error(\"Must invoke loadWASM first.\");this._onigBinding=o,this.content=t;const n=new f(t);this.utf16Length=n.utf16Length,this.utf8Length=n.utf8Length,this.utf16OffsetToUtf8=n.utf16OffsetToUtf8,this.utf8OffsetToUtf16=n.utf8OffsetToUtf16,this.utf8Length<1e4&&!s._sharedPtrInUse?(s._sharedPtr||(s._sharedPtr=o._omalloc(1e4)),s._sharedPtrInUse=!0,o.HEAPU8.set(n.utf8Value,s._sharedPtr),this.ptr=s._sharedPtr):this.ptr=n.createString(o)}convertUtf8OffsetToUtf16(t){return this.utf8OffsetToUtf16?t<0?0:t>this.utf8Length?this.utf16Length:this.utf8OffsetToUtf16[t]:t}convertUtf16OffsetToUtf8(t){return this.utf16OffsetToUtf8?t<0?0:t>this.utf16Length?this.utf8Length:this.utf16OffsetToUtf8[t]:t}dispose(){this.ptr===s._sharedPtr?s._sharedPtrInUse=!1:this._onigBinding._ofree(this.ptr)}}n.OnigString=s,s.LAST_ID=0,s._sharedPtr=0,s._sharedPtrInUse=!1;class u{constructor(t){if(!o)throw new Error(\"Must invoke loadWASM first.\");const n=[],e=[];for(let r=0,i=t.length;r<i;r++){const i=new f(t[r]);n[r]=i.createString(o),e[r]=i.utf8Length}const r=o._omalloc(4*t.length);o.HEAPU32.set(n,r/4);const i=o._omalloc(4*t.length);o.HEAPU32.set(e,i/4);const a=o._createOnigScanner(r,i,t.length);for(let e=0,r=t.length;e<r;e++)o._ofree(n[e]);o._ofree(i),o._ofree(r),0===a&&function(t){throw new Error(t.UTF8ToString(t._getLastOnigError()))}(o),this._onigBinding=o,this._ptr=a}dispose(){this._onigBinding._freeOnigScanner(this._ptr)}findNextMatchSync(t,n,e){let r=a,i=0;if(\"number\"==typeof e?(8&e&&(r=!0),i=e):\"boolean\"==typeof e&&(r=e),\"string\"==typeof t){t=new s(t);const e=this._findNextMatchSync(t,n,r,i);return t.dispose(),e}return this._findNextMatchSync(t,n,r,i)}_findNextMatchSync(t,n,e,r){const i=this._onigBinding;let o;if(o=e?i._findNextOnigScannerMatchDbg(this._ptr,t.id,t.ptr,t.utf8Length,t.convertUtf16OffsetToUtf8(n),r):i._findNextOnigScannerMatch(this._ptr,t.id,t.ptr,t.utf8Length,t.convertUtf16OffsetToUtf8(n),r),0===o)return null;const a=i.HEAPU32;let f=o/4;const s=a[f++],u=a[f++];let c=[];for(let n=0;n<u;n++){const e=t.convertUtf8OffsetToUtf16(a[f++]),r=t.convertUtf8OffsetToUtf16(a[f++]);c[n]={start:e,end:r,length:r-e}}return{index:s,captureIndices:c}}}n.OnigScanner=u;let c=!1,l=null;n.loadWASM=function(t){if(c)return l;let n,e,r,a;if(c=!0,function(t){return\"function\"==typeof t.instantiator}(t))n=t.instantiator,e=t.print;else{let r;!function(t){return void 0!==t.data}(t)?r=t:(r=t.data,e=t.print),n=function(t){return\"undefined\"!=typeof Response&&t instanceof Response}(r)?\"function\"==typeof WebAssembly.instantiateStreaming?function(t){return n=>WebAssembly.instantiateStreaming(t,n)}(r):function(t){return async n=>{const e=await t.arrayBuffer();return WebAssembly.instantiate(e,n)}}(r):function(t){return n=>WebAssembly.instantiate(t,n)}(r)}return l=new Promise(((t,n)=>{r=t,a=n})),function(t,n,e,r){(0,i.default)({print:n,instantiateWasm:(n,e)=>{if(\"undefined\"==typeof performance){const t=()=>Date.now();n.env.emscripten_get_now=t,n.wasi_snapshot_preview1.emscripten_get_now=t}return t(n).then((t=>e(t.instance)),r),{}}}).then((t=>{o=t,e()}))}(n,e,r,a),l},n.createOnigString=function(t){return new s(t)},n.createOnigScanner=function(t){return new u(t)},n.setDefaultDebugCall=function(t){a=t}},418:t=>{var n=(\"undefined\"!=typeof document&&document.currentScript&&document.currentScript.src,function(t){var n,e,r=void 0!==(t=t||{})?t:{};r.ready=new Promise((function(t,r){n=t,e=r}));var i,o=Object.assign({},r),a=[],f=!1,s=!1,u=!0,c=\"\";function l(t){return r.locateFile?r.locateFile(t,c):c+t}u&&(i=function(t){let n;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(t)):(n=read(t,\"binary\"),m(\"object\"==typeof n),n)},\"undefined\"!=typeof scriptArgs?a=scriptArgs:void 0!==arguments&&(a=arguments),\"undefined\"!=typeof onig_print&&(\"undefined\"==typeof console&&(console={}),console.log=onig_print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:onig_print));var h,p,d=r.print||console.log.bind(console),g=r.printErr||console.warn.bind(console);Object.assign(r,o),o=null,r.arguments&&(a=r.arguments),r.thisProgram&&r.thisProgram,r.quit&&r.quit,r.wasmBinary&&(h=r.wasmBinary),r.noExitRuntime,\"object\"!=typeof WebAssembly&&k(\"no native wasm support detected\");var _=!1;function m(t,n){t||k(n)}var y,w,S,v=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function A(t,n,e){for(var r=n+e,i=n;t[i]&&!(i>=r);)++i;if(i-n>16&&t.buffer&&v)return v.decode(t.subarray(n,i));for(var o=\"\";n<i;){var a=t[n++];if(128&a){var f=63&t[n++];if(192!=(224&a)){var s=63&t[n++];if((a=224==(240&a)?(15&a)<<12|f<<6|s:(7&a)<<18|f<<12|s<<6|63&t[n++])<65536)o+=String.fromCharCode(a);else{var u=a-65536;o+=String.fromCharCode(55296|u>>10,56320|1023&u)}}else o+=String.fromCharCode((31&a)<<6|f)}else o+=String.fromCharCode(a)}return o}function b(t,n){return t?A(w,t,n):\"\"}function O(t){y=t,r.HEAP8=new Int8Array(t),r.HEAP16=new Int16Array(t),r.HEAP32=new Int32Array(t),r.HEAPU8=w=new Uint8Array(t),r.HEAPU16=new Uint16Array(t),r.HEAPU32=S=new Uint32Array(t),r.HEAPF32=new Float32Array(t),r.HEAPF64=new Float64Array(t)}r.INITIAL_MEMORY;var U=[],P=[],R=[];function x(){if(r.preRun)for(\"function\"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)M(r.preRun.shift());G(U)}function T(){G(P)}function E(){if(r.postRun)for(\"function\"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)I(r.postRun.shift());G(R)}function M(t){U.unshift(t)}function L(t){P.unshift(t)}function I(t){R.unshift(t)}var W=0,D=null,C=null;function N(t){W++,r.monitorRunDependencies&&r.monitorRunDependencies(W)}function j(t){if(W--,r.monitorRunDependencies&&r.monitorRunDependencies(W),0==W&&(null!==D&&(clearInterval(D),D=null),C)){var n=C;C=null,n()}}function k(t){r.onAbort&&r.onAbort(t),g(t=\"Aborted(\"+t+\")\"),_=!0,t+=\". Build with -sASSERTIONS for more info.\";var n=new WebAssembly.RuntimeError(t);throw e(n),n}var B,H,F=\"data:application/octet-stream;base64,\";function V(t){return t.startsWith(F)}function z(t){try{if(t==B&&h)return new Uint8Array(h);if(i)return i(t);throw\"both async and sync fetching of the wasm failed\"}catch(t){k(t)}}function q(){return h||!f&&!s||\"function\"!=typeof fetch?Promise.resolve().then((function(){return z(B)})):fetch(B,{credentials:\"same-origin\"}).then((function(t){if(!t.ok)throw\"failed to load wasm binary file at '\"+B+\"'\";return t.arrayBuffer()})).catch((function(){return z(B)}))}function Y(){var t={env:nt,wasi_snapshot_preview1:nt};function n(t,n){var e=t.exports;r.asm=e,O((p=r.asm.memory).buffer),r.asm.__indirect_function_table,L(r.asm.__wasm_call_ctors),j()}function i(t){n(t.instance)}function o(n){return q().then((function(n){return WebAssembly.instantiate(n,t)})).then((function(t){return t})).then(n,(function(t){g(\"failed to asynchronously prepare wasm: \"+t),k(t)}))}if(N(),r.instantiateWasm)try{return r.instantiateWasm(t,n)}catch(t){g(\"Module.instantiateWasm callback failed with error: \"+t),e(t)}return(h||\"function\"!=typeof WebAssembly.instantiateStreaming||V(B)||\"function\"!=typeof fetch?o(i):fetch(B,{credentials:\"same-origin\"}).then((function(n){return WebAssembly.instantiateStreaming(n,t).then(i,(function(t){return g(\"wasm streaming compile failed: \"+t),g(\"falling back to ArrayBuffer instantiation\"),o(i)}))}))).catch(e),{}}function G(t){for(;t.length>0;)t.shift()(r)}function J(t,n,e){w.copyWithin(t,n,n+e)}function K(t){try{return p.grow(t-y.byteLength+65535>>>16),O(p.buffer),1}catch(t){}}function Q(t){var n,e=w.length,r=2147483648;if((t>>>=0)>r)return!1;for(var i=1;i<=4;i*=2){var o=e*(1+.2/i);if(o=Math.min(o,t+100663296),K(Math.min(r,(n=Math.max(t,o))+(65536-n%65536)%65536)))return!0}return!1}V(B=\"onig.wasm\")||(B=l(B)),H=\"undefined\"!=typeof dateNow?dateNow:()=>performance.now();var X=[null,[],[]];function Z(t,n){var e=X[t];0===n||10===n?((1===t?d:g)(A(e,0)),e.length=0):e.push(n)}function $(t,n,e,r){for(var i=0,o=0;o<e;o++){var a=S[n>>2],f=S[n+4>>2];n+=8;for(var s=0;s<f;s++)Z(t,w[a+s]);i+=f}return S[r>>2]=i,0}var tt,nt={emscripten_get_now:H,emscripten_memcpy_big:J,emscripten_resize_heap:Q,fd_write:$};function et(t){function e(){tt||(tt=!0,r.calledRun=!0,_||(T(),n(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),E()))}t=t||a,W>0||(x(),W>0||(r.setStatus?(r.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){r.setStatus(\"\")}),1),e()}),1)):e()))}if(Y(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.__wasm_call_ctors).apply(null,arguments)},r.___errno_location=function(){return(r.___errno_location=r.asm.__errno_location).apply(null,arguments)},r._omalloc=function(){return(r._omalloc=r.asm.omalloc).apply(null,arguments)},r._ofree=function(){return(r._ofree=r.asm.ofree).apply(null,arguments)},r._getLastOnigError=function(){return(r._getLastOnigError=r.asm.getLastOnigError).apply(null,arguments)},r._createOnigScanner=function(){return(r._createOnigScanner=r.asm.createOnigScanner).apply(null,arguments)},r._freeOnigScanner=function(){return(r._freeOnigScanner=r.asm.freeOnigScanner).apply(null,arguments)},r._findNextOnigScannerMatch=function(){return(r._findNextOnigScannerMatch=r.asm.findNextOnigScannerMatch).apply(null,arguments)},r._findNextOnigScannerMatchDbg=function(){return(r._findNextOnigScannerMatchDbg=r.asm.findNextOnigScannerMatchDbg).apply(null,arguments)},r.stackSave=function(){return(r.stackSave=r.asm.stackSave).apply(null,arguments)},r.stackRestore=function(){return(r.stackRestore=r.asm.stackRestore).apply(null,arguments)},r.stackAlloc=function(){return(r.stackAlloc=r.asm.stackAlloc).apply(null,arguments)},r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.dynCall_jiji).apply(null,arguments)},r.UTF8ToString=b,C=function t(){tt||et(),tt||(C=t)},r.preInit)for(\"function\"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return et(),t.ready});t.exports=n}},n={},function e(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={exports:{}};return t[r].call(o.exports,o,o.exports,e),o.exports}(770);var t,n}));", "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vscodetextmate\"] = factory();\n\telse\n\t\troot[\"vscodetextmate\"] = factory();\n})(this, function() {\nreturn ", "\"use strict\";\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UseOnigurumaFindOptions = exports.DebugFlags = void 0;\nexports.DebugFlags = {\n    InDebugMode: (typeof process !== 'undefined' && !!process.env['VSCODE_TEXTMATE_DEBUG'])\n};\nexports.UseOnigurumaFindOptions = false;\n//# sourceMappingURL=debug.js.map", "\"use strict\";\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LocalStackElement = exports.StackElement = exports.ScopeListElement = exports.StackElementMetadata = exports.Grammar = exports.ScopeMetadata = exports.ScopeDependencyProcessor = exports.ScopeDependencyCollector = exports.PartialScopeDependency = exports.FullScopeDependency = exports.createGrammar = void 0;\nvar utils_1 = require(\"./utils\");\nvar rule_1 = require(\"./rule\");\nvar matcher_1 = require(\"./matcher\");\nvar debug_1 = require(\"./debug\");\nvar performanceNow = (function () {\n    if (typeof performance === 'undefined') {\n        // performance.now() is not available in this environment, so use Date.now()\n        return function () { return Date.now(); };\n    }\n    else {\n        return function () { return performance.now(); };\n    }\n})();\nfunction createGrammar(scopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, grammarRepository, onigLib) {\n    return new Grammar(scopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, grammarRepository, onigLib); //TODO\n}\nexports.createGrammar = createGrammar;\nvar FullScopeDependency = /** @class */ (function () {\n    function FullScopeDependency(scopeName) {\n        this.scopeName = scopeName;\n    }\n    return FullScopeDependency;\n}());\nexports.FullScopeDependency = FullScopeDependency;\nvar PartialScopeDependency = /** @class */ (function () {\n    function PartialScopeDependency(scopeName, include) {\n        this.scopeName = scopeName;\n        this.include = include;\n    }\n    PartialScopeDependency.prototype.toKey = function () {\n        return this.scopeName + \"#\" + this.include;\n    };\n    return PartialScopeDependency;\n}());\nexports.PartialScopeDependency = PartialScopeDependency;\nvar ScopeDependencyCollector = /** @class */ (function () {\n    function ScopeDependencyCollector() {\n        this.full = [];\n        this.partial = [];\n        this.visitedRule = new Set();\n        this._seenFull = new Set();\n        this._seenPartial = new Set();\n    }\n    ScopeDependencyCollector.prototype.add = function (dep) {\n        if (dep instanceof FullScopeDependency) {\n            if (!this._seenFull.has(dep.scopeName)) {\n                this._seenFull.add(dep.scopeName);\n                this.full.push(dep);\n            }\n        }\n        else {\n            if (!this._seenPartial.has(dep.toKey())) {\n                this._seenPartial.add(dep.toKey());\n                this.partial.push(dep);\n            }\n        }\n    };\n    return ScopeDependencyCollector;\n}());\nexports.ScopeDependencyCollector = ScopeDependencyCollector;\n/**\n * Fill in `result` all external included scopes in `patterns`\n */\nfunction _extractIncludedScopesInPatterns(result, baseGrammar, selfGrammar, patterns, repository) {\n    for (var _i = 0, patterns_1 = patterns; _i < patterns_1.length; _i++) {\n        var pattern = patterns_1[_i];\n        if (result.visitedRule.has(pattern)) {\n            continue;\n        }\n        result.visitedRule.add(pattern);\n        var patternRepository = (pattern.repository ? utils_1.mergeObjects({}, repository, pattern.repository) : repository);\n        if (Array.isArray(pattern.patterns)) {\n            _extractIncludedScopesInPatterns(result, baseGrammar, selfGrammar, pattern.patterns, patternRepository);\n        }\n        var include = pattern.include;\n        if (!include) {\n            continue;\n        }\n        if (include === '$base' || include === baseGrammar.scopeName) {\n            collectDependencies(result, baseGrammar, baseGrammar);\n        }\n        else if (include === '$self' || include === selfGrammar.scopeName) {\n            collectDependencies(result, baseGrammar, selfGrammar);\n        }\n        else if (include.charAt(0) === '#') {\n            collectSpecificDependencies(result, baseGrammar, selfGrammar, include.substring(1), patternRepository);\n        }\n        else {\n            var sharpIndex = include.indexOf('#');\n            if (sharpIndex >= 0) {\n                var scopeName = include.substring(0, sharpIndex);\n                var includedName = include.substring(sharpIndex + 1);\n                if (scopeName === baseGrammar.scopeName) {\n                    collectSpecificDependencies(result, baseGrammar, baseGrammar, includedName, patternRepository);\n                }\n                else if (scopeName === selfGrammar.scopeName) {\n                    collectSpecificDependencies(result, baseGrammar, selfGrammar, includedName, patternRepository);\n                }\n                else {\n                    result.add(new PartialScopeDependency(scopeName, include.substring(sharpIndex + 1)));\n                }\n            }\n            else {\n                result.add(new FullScopeDependency(include));\n            }\n        }\n    }\n}\nvar ScopeDependencyProcessor = /** @class */ (function () {\n    function ScopeDependencyProcessor(repo, initialScopeName) {\n        this.repo = repo;\n        this.initialScopeName = initialScopeName;\n        this.seenFullScopeRequests = new Set();\n        this.seenPartialScopeRequests = new Set();\n        this.seenFullScopeRequests.add(this.initialScopeName);\n        this.Q = [new FullScopeDependency(this.initialScopeName)];\n    }\n    ScopeDependencyProcessor.prototype.processQueue = function () {\n        var q = this.Q;\n        this.Q = [];\n        var deps = new ScopeDependencyCollector();\n        for (var _i = 0, q_1 = q; _i < q_1.length; _i++) {\n            var dep = q_1[_i];\n            collectDependenciesForDep(this.repo, this.initialScopeName, deps, dep);\n        }\n        for (var _a = 0, _b = deps.full; _a < _b.length; _a++) {\n            var dep = _b[_a];\n            if (this.seenFullScopeRequests.has(dep.scopeName)) {\n                // already processed\n                continue;\n            }\n            this.seenFullScopeRequests.add(dep.scopeName);\n            this.Q.push(dep);\n        }\n        for (var _c = 0, _d = deps.partial; _c < _d.length; _c++) {\n            var dep = _d[_c];\n            if (this.seenFullScopeRequests.has(dep.scopeName)) {\n                // already processed in full\n                continue;\n            }\n            if (this.seenPartialScopeRequests.has(dep.toKey())) {\n                // already processed\n                continue;\n            }\n            this.seenPartialScopeRequests.add(dep.toKey());\n            this.Q.push(dep);\n        }\n    };\n    return ScopeDependencyProcessor;\n}());\nexports.ScopeDependencyProcessor = ScopeDependencyProcessor;\nfunction collectDependenciesForDep(repo, initialScopeName, result, dep) {\n    var grammar = repo.lookup(dep.scopeName);\n    if (!grammar) {\n        if (dep.scopeName === initialScopeName) {\n            throw new Error(\"No grammar provided for <\" + initialScopeName + \">\");\n        }\n        return;\n    }\n    if (dep instanceof FullScopeDependency) {\n        collectDependencies(result, repo.lookup(initialScopeName), grammar);\n    }\n    else {\n        collectSpecificDependencies(result, repo.lookup(initialScopeName), grammar, dep.include);\n    }\n    var injections = repo.injections(dep.scopeName);\n    if (injections) {\n        for (var _i = 0, injections_1 = injections; _i < injections_1.length; _i++) {\n            var injection = injections_1[_i];\n            result.add(new FullScopeDependency(injection));\n        }\n    }\n}\n/**\n * Collect a specific dependency from the grammar's repository\n */\nfunction collectSpecificDependencies(result, baseGrammar, selfGrammar, include, repository) {\n    if (repository === void 0) { repository = selfGrammar.repository; }\n    if (repository && repository[include]) {\n        var rule = repository[include];\n        _extractIncludedScopesInPatterns(result, baseGrammar, selfGrammar, [rule], repository);\n    }\n}\n/**\n * Collects the list of all external included scopes in `grammar`.\n */\nfunction collectDependencies(result, baseGrammar, selfGrammar) {\n    if (selfGrammar.patterns && Array.isArray(selfGrammar.patterns)) {\n        _extractIncludedScopesInPatterns(result, baseGrammar, selfGrammar, selfGrammar.patterns, selfGrammar.repository);\n    }\n    if (selfGrammar.injections) {\n        var injections = [];\n        for (var injection in selfGrammar.injections) {\n            injections.push(selfGrammar.injections[injection]);\n        }\n        _extractIncludedScopesInPatterns(result, baseGrammar, selfGrammar, injections, selfGrammar.repository);\n    }\n}\nfunction scopesAreMatching(thisScopeName, scopeName) {\n    if (!thisScopeName) {\n        return false;\n    }\n    if (thisScopeName === scopeName) {\n        return true;\n    }\n    var len = scopeName.length;\n    return thisScopeName.length > len && thisScopeName.substr(0, len) === scopeName && thisScopeName[len] === '.';\n}\nfunction nameMatcher(identifers, scopes) {\n    if (scopes.length < identifers.length) {\n        return false;\n    }\n    var lastIndex = 0;\n    return identifers.every(function (identifier) {\n        for (var i = lastIndex; i < scopes.length; i++) {\n            if (scopesAreMatching(scopes[i], identifier)) {\n                lastIndex = i + 1;\n                return true;\n            }\n        }\n        return false;\n    });\n}\nfunction collectInjections(result, selector, rule, ruleFactoryHelper, grammar) {\n    var matchers = matcher_1.createMatchers(selector, nameMatcher);\n    var ruleId = rule_1.RuleFactory.getCompiledRuleId(rule, ruleFactoryHelper, grammar.repository);\n    for (var _i = 0, matchers_1 = matchers; _i < matchers_1.length; _i++) {\n        var matcher = matchers_1[_i];\n        result.push({\n            debugSelector: selector,\n            matcher: matcher.matcher,\n            ruleId: ruleId,\n            grammar: grammar,\n            priority: matcher.priority\n        });\n    }\n}\nvar ScopeMetadata = /** @class */ (function () {\n    function ScopeMetadata(scopeName, languageId, tokenType, themeData) {\n        this.scopeName = scopeName;\n        this.languageId = languageId;\n        this.tokenType = tokenType;\n        this.themeData = themeData;\n    }\n    return ScopeMetadata;\n}());\nexports.ScopeMetadata = ScopeMetadata;\nvar ScopeMetadataProvider = /** @class */ (function () {\n    function ScopeMetadataProvider(initialLanguage, themeProvider, embeddedLanguages) {\n        this._initialLanguage = initialLanguage;\n        this._themeProvider = themeProvider;\n        this._cache = new Map();\n        this._defaultMetaData = new ScopeMetadata('', this._initialLanguage, 0 /* Other */, [this._themeProvider.getDefaults()]);\n        // embeddedLanguages handling\n        this._embeddedLanguages = Object.create(null);\n        if (embeddedLanguages) {\n            // If embeddedLanguages are configured, fill in `this._embeddedLanguages`\n            var scopes = Object.keys(embeddedLanguages);\n            for (var i = 0, len = scopes.length; i < len; i++) {\n                var scope = scopes[i];\n                var language = embeddedLanguages[scope];\n                if (typeof language !== 'number' || language === 0) {\n                    console.warn('Invalid embedded language found at scope ' + scope + ': <<' + language + '>>');\n                    // never hurts to be too careful\n                    continue;\n                }\n                this._embeddedLanguages[scope] = language;\n            }\n        }\n        // create the regex\n        var escapedScopes = Object.keys(this._embeddedLanguages).map(function (scopeName) { return ScopeMetadataProvider._escapeRegExpCharacters(scopeName); });\n        if (escapedScopes.length === 0) {\n            // no scopes registered\n            this._embeddedLanguagesRegex = null;\n        }\n        else {\n            escapedScopes.sort();\n            escapedScopes.reverse();\n            this._embeddedLanguagesRegex = new RegExp(\"^((\" + escapedScopes.join(')|(') + \"))($|\\\\.)\", '');\n        }\n    }\n    ScopeMetadataProvider.prototype.onDidChangeTheme = function () {\n        this._cache = new Map();\n        this._defaultMetaData = new ScopeMetadata('', this._initialLanguage, 0 /* Other */, [this._themeProvider.getDefaults()]);\n    };\n    ScopeMetadataProvider.prototype.getDefaultMetadata = function () {\n        return this._defaultMetaData;\n    };\n    /**\n     * Escapes regular expression characters in a given string\n     */\n    ScopeMetadataProvider._escapeRegExpCharacters = function (value) {\n        return value.replace(/[\\-\\\\\\{\\}\\*\\+\\?\\|\\^\\$\\.\\,\\[\\]\\(\\)\\#\\s]/g, '\\\\$&');\n    };\n    ScopeMetadataProvider.prototype.getMetadataForScope = function (scopeName) {\n        if (scopeName === null) {\n            return ScopeMetadataProvider._NULL_SCOPE_METADATA;\n        }\n        var value = this._cache.get(scopeName);\n        if (value) {\n            return value;\n        }\n        value = this._doGetMetadataForScope(scopeName);\n        this._cache.set(scopeName, value);\n        return value;\n    };\n    ScopeMetadataProvider.prototype._doGetMetadataForScope = function (scopeName) {\n        var languageId = this._scopeToLanguage(scopeName);\n        var standardTokenType = this._toStandardTokenType(scopeName);\n        var themeData = this._themeProvider.themeMatch(scopeName);\n        return new ScopeMetadata(scopeName, languageId, standardTokenType, themeData);\n    };\n    /**\n     * Given a produced TM scope, return the language that token describes or null if unknown.\n     * e.g. source.html => html, source.css.embedded.html => css, punctuation.definition.tag.html => null\n     */\n    ScopeMetadataProvider.prototype._scopeToLanguage = function (scope) {\n        if (!scope) {\n            return 0;\n        }\n        if (!this._embeddedLanguagesRegex) {\n            // no scopes registered\n            return 0;\n        }\n        var m = scope.match(this._embeddedLanguagesRegex);\n        if (!m) {\n            // no scopes matched\n            return 0;\n        }\n        var language = this._embeddedLanguages[m[1]] || 0;\n        if (!language) {\n            return 0;\n        }\n        return language;\n    };\n    ScopeMetadataProvider.prototype._toStandardTokenType = function (tokenType) {\n        var m = tokenType.match(ScopeMetadataProvider.STANDARD_TOKEN_TYPE_REGEXP);\n        if (!m) {\n            return 0 /* Other */;\n        }\n        switch (m[1]) {\n            case 'comment':\n                return 1 /* Comment */;\n            case 'string':\n                return 2 /* String */;\n            case 'regex':\n                return 3 /* RegEx */;\n            case 'meta.embedded':\n                return 8 /* MetaEmbedded */;\n        }\n        throw new Error('Unexpected match for standard token type!');\n    };\n    ScopeMetadataProvider._NULL_SCOPE_METADATA = new ScopeMetadata('', 0, 0, null);\n    ScopeMetadataProvider.STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|meta\\.embedded)\\b/;\n    return ScopeMetadataProvider;\n}());\nvar Grammar = /** @class */ (function () {\n    function Grammar(scopeName, grammar, initialLanguage, embeddedLanguages, tokenTypes, grammarRepository, onigLib) {\n        this._scopeName = scopeName;\n        this._scopeMetadataProvider = new ScopeMetadataProvider(initialLanguage, grammarRepository, embeddedLanguages);\n        this._onigLib = onigLib;\n        this._rootId = -1;\n        this._lastRuleId = 0;\n        this._ruleId2desc = [null];\n        this._includedGrammars = {};\n        this._grammarRepository = grammarRepository;\n        this._grammar = initGrammar(grammar, null);\n        this._injections = null;\n        this._tokenTypeMatchers = [];\n        if (tokenTypes) {\n            for (var _i = 0, _a = Object.keys(tokenTypes); _i < _a.length; _i++) {\n                var selector = _a[_i];\n                var matchers = matcher_1.createMatchers(selector, nameMatcher);\n                for (var _b = 0, matchers_2 = matchers; _b < matchers_2.length; _b++) {\n                    var matcher = matchers_2[_b];\n                    this._tokenTypeMatchers.push({\n                        matcher: matcher.matcher,\n                        type: tokenTypes[selector]\n                    });\n                }\n            }\n        }\n    }\n    Grammar.prototype.dispose = function () {\n        for (var _i = 0, _a = this._ruleId2desc; _i < _a.length; _i++) {\n            var rule = _a[_i];\n            if (rule) {\n                rule.dispose();\n            }\n        }\n    };\n    Grammar.prototype.createOnigScanner = function (sources) {\n        return this._onigLib.createOnigScanner(sources);\n    };\n    Grammar.prototype.createOnigString = function (sources) {\n        return this._onigLib.createOnigString(sources);\n    };\n    Grammar.prototype.onDidChangeTheme = function () {\n        this._scopeMetadataProvider.onDidChangeTheme();\n    };\n    Grammar.prototype.getMetadataForScope = function (scope) {\n        return this._scopeMetadataProvider.getMetadataForScope(scope);\n    };\n    Grammar.prototype._collectInjections = function () {\n        var _this = this;\n        var grammarRepository = {\n            lookup: function (scopeName) {\n                if (scopeName === _this._scopeName) {\n                    return _this._grammar;\n                }\n                return _this.getExternalGrammar(scopeName);\n            },\n            injections: function (scopeName) {\n                return _this._grammarRepository.injections(scopeName);\n            }\n        };\n        var dependencyProcessor = new ScopeDependencyProcessor(grammarRepository, this._scopeName);\n        // TODO: uncomment below to visit all scopes\n        // while (dependencyProcessor.Q.length > 0) {\n        // \tdependencyProcessor.processQueue();\n        // }\n        var result = [];\n        dependencyProcessor.seenFullScopeRequests.forEach(function (scopeName) {\n            var grammar = grammarRepository.lookup(scopeName);\n            if (!grammar) {\n                return;\n            }\n            // add injections from the current grammar\n            var rawInjections = grammar.injections;\n            if (rawInjections) {\n                for (var expression in rawInjections) {\n                    collectInjections(result, expression, rawInjections[expression], _this, grammar);\n                }\n            }\n            // add injection grammars contributed for the current scope\n            if (_this._grammarRepository) {\n                var injectionScopeNames = _this._grammarRepository.injections(scopeName);\n                if (injectionScopeNames) {\n                    injectionScopeNames.forEach(function (injectionScopeName) {\n                        var injectionGrammar = _this.getExternalGrammar(injectionScopeName);\n                        if (injectionGrammar) {\n                            var selector = injectionGrammar.injectionSelector;\n                            if (selector) {\n                                collectInjections(result, selector, injectionGrammar, _this, injectionGrammar);\n                            }\n                        }\n                    });\n                }\n            }\n        });\n        result.sort(function (i1, i2) { return i1.priority - i2.priority; }); // sort by priority\n        return result;\n    };\n    Grammar.prototype.getInjections = function () {\n        if (this._injections === null) {\n            this._injections = this._collectInjections();\n            if (debug_1.DebugFlags.InDebugMode && this._injections.length > 0) {\n                console.log(\"Grammar \" + this._scopeName + \" contains the following injections:\");\n                for (var _i = 0, _a = this._injections; _i < _a.length; _i++) {\n                    var injection = _a[_i];\n                    console.log(\"  - \" + injection.debugSelector);\n                }\n            }\n        }\n        return this._injections;\n    };\n    Grammar.prototype.registerRule = function (factory) {\n        var id = (++this._lastRuleId);\n        var result = factory(id);\n        this._ruleId2desc[id] = result;\n        return result;\n    };\n    Grammar.prototype.getRule = function (patternId) {\n        return this._ruleId2desc[patternId];\n    };\n    Grammar.prototype.getExternalGrammar = function (scopeName, repository) {\n        if (this._includedGrammars[scopeName]) {\n            return this._includedGrammars[scopeName];\n        }\n        else if (this._grammarRepository) {\n            var rawIncludedGrammar = this._grammarRepository.lookup(scopeName);\n            if (rawIncludedGrammar) {\n                // console.log('LOADED GRAMMAR ' + pattern.include);\n                this._includedGrammars[scopeName] = initGrammar(rawIncludedGrammar, repository && repository.$base);\n                return this._includedGrammars[scopeName];\n            }\n        }\n        return undefined;\n    };\n    Grammar.prototype.tokenizeLine = function (lineText, prevState, timeLimit) {\n        if (timeLimit === void 0) { timeLimit = 0; }\n        var r = this._tokenize(lineText, prevState, false, timeLimit);\n        return {\n            tokens: r.lineTokens.getResult(r.ruleStack, r.lineLength),\n            ruleStack: r.ruleStack,\n            stoppedEarly: r.stoppedEarly\n        };\n    };\n    Grammar.prototype.tokenizeLine2 = function (lineText, prevState, timeLimit) {\n        if (timeLimit === void 0) { timeLimit = 0; }\n        var r = this._tokenize(lineText, prevState, true, timeLimit);\n        return {\n            tokens: r.lineTokens.getBinaryResult(r.ruleStack, r.lineLength),\n            ruleStack: r.ruleStack,\n            stoppedEarly: r.stoppedEarly\n        };\n    };\n    Grammar.prototype._tokenize = function (lineText, prevState, emitBinaryTokens, timeLimit) {\n        if (this._rootId === -1) {\n            this._rootId = rule_1.RuleFactory.getCompiledRuleId(this._grammar.repository.$self, this, this._grammar.repository);\n        }\n        var isFirstLine;\n        if (!prevState || prevState === StackElement.NULL) {\n            isFirstLine = true;\n            var rawDefaultMetadata = this._scopeMetadataProvider.getDefaultMetadata();\n            var defaultTheme = rawDefaultMetadata.themeData[0];\n            var defaultMetadata = StackElementMetadata.set(0, rawDefaultMetadata.languageId, rawDefaultMetadata.tokenType, defaultTheme.fontStyle, defaultTheme.foreground, defaultTheme.background);\n            var rootScopeName = this.getRule(this._rootId).getName(null, null);\n            var rawRootMetadata = this._scopeMetadataProvider.getMetadataForScope(rootScopeName);\n            var rootMetadata = ScopeListElement.mergeMetadata(defaultMetadata, null, rawRootMetadata);\n            var scopeList = new ScopeListElement(null, rootScopeName === null ? 'unknown' : rootScopeName, rootMetadata);\n            prevState = new StackElement(null, this._rootId, -1, -1, false, null, scopeList, scopeList);\n        }\n        else {\n            isFirstLine = false;\n            prevState.reset();\n        }\n        lineText = lineText + '\\n';\n        var onigLineText = this.createOnigString(lineText);\n        var lineLength = onigLineText.content.length;\n        var lineTokens = new LineTokens(emitBinaryTokens, lineText, this._tokenTypeMatchers);\n        var r = _tokenizeString(this, onigLineText, isFirstLine, 0, prevState, lineTokens, true, timeLimit);\n        disposeOnigString(onigLineText);\n        return {\n            lineLength: lineLength,\n            lineTokens: lineTokens,\n            ruleStack: r.stack,\n            stoppedEarly: r.stoppedEarly\n        };\n    };\n    return Grammar;\n}());\nexports.Grammar = Grammar;\nfunction disposeOnigString(str) {\n    if (typeof str.dispose === 'function') {\n        str.dispose();\n    }\n}\nfunction initGrammar(grammar, base) {\n    grammar = utils_1.clone(grammar);\n    grammar.repository = grammar.repository || {};\n    grammar.repository.$self = {\n        $vscodeTextmateLocation: grammar.$vscodeTextmateLocation,\n        patterns: grammar.patterns,\n        name: grammar.scopeName\n    };\n    grammar.repository.$base = base || grammar.repository.$self;\n    return grammar;\n}\nfunction handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, captures, captureIndices) {\n    if (captures.length === 0) {\n        return;\n    }\n    var lineTextContent = lineText.content;\n    var len = Math.min(captures.length, captureIndices.length);\n    var localStack = [];\n    var maxEnd = captureIndices[0].end;\n    for (var i = 0; i < len; i++) {\n        var captureRule = captures[i];\n        if (captureRule === null) {\n            // Not interested\n            continue;\n        }\n        var captureIndex = captureIndices[i];\n        if (captureIndex.length === 0) {\n            // Nothing really captured\n            continue;\n        }\n        if (captureIndex.start > maxEnd) {\n            // Capture going beyond consumed string\n            break;\n        }\n        // pop captures while needed\n        while (localStack.length > 0 && localStack[localStack.length - 1].endPos <= captureIndex.start) {\n            // pop!\n            lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, localStack[localStack.length - 1].endPos);\n            localStack.pop();\n        }\n        if (localStack.length > 0) {\n            lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, captureIndex.start);\n        }\n        else {\n            lineTokens.produce(stack, captureIndex.start);\n        }\n        if (captureRule.retokenizeCapturedWithRuleId) {\n            // the capture requires additional matching\n            var scopeName = captureRule.getName(lineTextContent, captureIndices);\n            var nameScopesList = stack.contentNameScopesList.push(grammar, scopeName);\n            var contentName = captureRule.getContentName(lineTextContent, captureIndices);\n            var contentNameScopesList = nameScopesList.push(grammar, contentName);\n            var stackClone = stack.push(captureRule.retokenizeCapturedWithRuleId, captureIndex.start, -1, false, null, nameScopesList, contentNameScopesList);\n            var onigSubStr = grammar.createOnigString(lineTextContent.substring(0, captureIndex.end));\n            _tokenizeString(grammar, onigSubStr, (isFirstLine && captureIndex.start === 0), captureIndex.start, stackClone, lineTokens, false, /* no time limit */ 0);\n            disposeOnigString(onigSubStr);\n            continue;\n        }\n        var captureRuleScopeName = captureRule.getName(lineTextContent, captureIndices);\n        if (captureRuleScopeName !== null) {\n            // push\n            var base = localStack.length > 0 ? localStack[localStack.length - 1].scopes : stack.contentNameScopesList;\n            var captureRuleScopesList = base.push(grammar, captureRuleScopeName);\n            localStack.push(new LocalStackElement(captureRuleScopesList, captureIndex.end));\n        }\n    }\n    while (localStack.length > 0) {\n        // pop!\n        lineTokens.produceFromScopes(localStack[localStack.length - 1].scopes, localStack[localStack.length - 1].endPos);\n        localStack.pop();\n    }\n}\nfunction debugCompiledRuleToString(ruleScanner) {\n    var r = [];\n    for (var i = 0, len = ruleScanner.rules.length; i < len; i++) {\n        r.push('   - ' + ruleScanner.rules[i] + ': ' + ruleScanner.debugRegExps[i]);\n    }\n    return r.join('\\n');\n}\nfunction getFindOptions(allowA, allowG) {\n    var options = 0 /* None */;\n    if (!allowA) {\n        options |= 1 /* NotBeginString */;\n    }\n    if (!allowG) {\n        options |= 4 /* NotBeginPosition */;\n    }\n    return options;\n}\nfunction prepareRuleSearch(rule, grammar, endRegexSource, allowA, allowG) {\n    if (debug_1.UseOnigurumaFindOptions) {\n        var ruleScanner_1 = rule.compile(grammar, endRegexSource);\n        var findOptions = getFindOptions(allowA, allowG);\n        return { ruleScanner: ruleScanner_1, findOptions: findOptions };\n    }\n    var ruleScanner = rule.compileAG(grammar, endRegexSource, allowA, allowG);\n    return { ruleScanner: ruleScanner, findOptions: 0 /* None */ };\n}\nfunction prepareRuleWhileSearch(rule, grammar, endRegexSource, allowA, allowG) {\n    if (debug_1.UseOnigurumaFindOptions) {\n        var ruleScanner_2 = rule.compileWhile(grammar, endRegexSource);\n        var findOptions = getFindOptions(allowA, allowG);\n        return { ruleScanner: ruleScanner_2, findOptions: findOptions };\n    }\n    var ruleScanner = rule.compileWhileAG(grammar, endRegexSource, allowA, allowG);\n    return { ruleScanner: ruleScanner, findOptions: 0 /* None */ };\n}\nfunction matchInjections(injections, grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n    // The lower the better\n    var bestMatchRating = Number.MAX_VALUE;\n    var bestMatchCaptureIndices = null;\n    var bestMatchRuleId;\n    var bestMatchResultPriority = 0;\n    var scopes = stack.contentNameScopesList.generateScopes();\n    for (var i = 0, len = injections.length; i < len; i++) {\n        var injection = injections[i];\n        if (!injection.matcher(scopes)) {\n            // injection selector doesn't match stack\n            continue;\n        }\n        var rule = grammar.getRule(injection.ruleId);\n        var _a = prepareRuleSearch(rule, grammar, null, isFirstLine, linePos === anchorPosition), ruleScanner = _a.ruleScanner, findOptions = _a.findOptions;\n        var matchResult = ruleScanner.scanner.findNextMatchSync(lineText, linePos, findOptions);\n        if (!matchResult) {\n            continue;\n        }\n        if (debug_1.DebugFlags.InDebugMode) {\n            console.log(\"  matched injection: \" + injection.debugSelector);\n            console.log(debugCompiledRuleToString(ruleScanner));\n        }\n        var matchRating = matchResult.captureIndices[0].start;\n        if (matchRating >= bestMatchRating) {\n            // Injections are sorted by priority, so the previous injection had a better or equal priority\n            continue;\n        }\n        bestMatchRating = matchRating;\n        bestMatchCaptureIndices = matchResult.captureIndices;\n        bestMatchRuleId = ruleScanner.rules[matchResult.index];\n        bestMatchResultPriority = injection.priority;\n        if (bestMatchRating === linePos) {\n            // No more need to look at the rest of the injections.\n            break;\n        }\n    }\n    if (bestMatchCaptureIndices) {\n        return {\n            priorityMatch: bestMatchResultPriority === -1,\n            captureIndices: bestMatchCaptureIndices,\n            matchedRuleId: bestMatchRuleId\n        };\n    }\n    return null;\n}\nfunction matchRule(grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n    var rule = stack.getRule(grammar);\n    var _a = prepareRuleSearch(rule, grammar, stack.endRule, isFirstLine, linePos === anchorPosition), ruleScanner = _a.ruleScanner, findOptions = _a.findOptions;\n    var perfStart = 0;\n    if (debug_1.DebugFlags.InDebugMode) {\n        perfStart = performanceNow();\n    }\n    var r = ruleScanner.scanner.findNextMatchSync(lineText, linePos, findOptions);\n    if (debug_1.DebugFlags.InDebugMode) {\n        var elapsedMillis = performanceNow() - perfStart;\n        if (elapsedMillis > 5) {\n            console.warn(\"Rule \" + rule.debugName + \" (\" + rule.id + \") matching took \" + elapsedMillis + \" against '\" + lineText + \"'\");\n        }\n        console.log(\"  scanning for (linePos: \" + linePos + \", anchorPosition: \" + anchorPosition + \")\");\n        console.log(debugCompiledRuleToString(ruleScanner));\n        if (r) {\n            console.log(\"matched rule id: \" + ruleScanner.rules[r.index] + \" from \" + r.captureIndices[0].start + \" to \" + r.captureIndices[0].end);\n        }\n    }\n    if (r) {\n        return {\n            captureIndices: r.captureIndices,\n            matchedRuleId: ruleScanner.rules[r.index]\n        };\n    }\n    return null;\n}\nfunction matchRuleOrInjections(grammar, lineText, isFirstLine, linePos, stack, anchorPosition) {\n    // Look for normal grammar rule\n    var matchResult = matchRule(grammar, lineText, isFirstLine, linePos, stack, anchorPosition);\n    // Look for injected rules\n    var injections = grammar.getInjections();\n    if (injections.length === 0) {\n        // No injections whatsoever => early return\n        return matchResult;\n    }\n    var injectionResult = matchInjections(injections, grammar, lineText, isFirstLine, linePos, stack, anchorPosition);\n    if (!injectionResult) {\n        // No injections matched => early return\n        return matchResult;\n    }\n    if (!matchResult) {\n        // Only injections matched => early return\n        return injectionResult;\n    }\n    // Decide if `matchResult` or `injectionResult` should win\n    var matchResultScore = matchResult.captureIndices[0].start;\n    var injectionResultScore = injectionResult.captureIndices[0].start;\n    if (injectionResultScore < matchResultScore || (injectionResult.priorityMatch && injectionResultScore === matchResultScore)) {\n        // injection won!\n        return injectionResult;\n    }\n    return matchResult;\n}\n/**\n * Walk the stack from bottom to top, and check each while condition in this order.\n * If any fails, cut off the entire stack above the failed while condition. While conditions\n * may also advance the linePosition.\n */\nfunction _checkWhileConditions(grammar, lineText, isFirstLine, linePos, stack, lineTokens) {\n    var anchorPosition = (stack.beginRuleCapturedEOL ? 0 : -1);\n    var whileRules = [];\n    for (var node = stack; node; node = node.pop()) {\n        var nodeRule = node.getRule(grammar);\n        if (nodeRule instanceof rule_1.BeginWhileRule) {\n            whileRules.push({\n                rule: nodeRule,\n                stack: node\n            });\n        }\n    }\n    for (var whileRule = whileRules.pop(); whileRule; whileRule = whileRules.pop()) {\n        var _a = prepareRuleWhileSearch(whileRule.rule, grammar, whileRule.stack.endRule, isFirstLine, linePos === anchorPosition), ruleScanner = _a.ruleScanner, findOptions = _a.findOptions;\n        var r = ruleScanner.scanner.findNextMatchSync(lineText, linePos, findOptions);\n        if (debug_1.DebugFlags.InDebugMode) {\n            console.log('  scanning for while rule');\n            console.log(debugCompiledRuleToString(ruleScanner));\n        }\n        if (r) {\n            var matchedRuleId = ruleScanner.rules[r.index];\n            if (matchedRuleId !== -2) {\n                // we shouldn't end up here\n                stack = whileRule.stack.pop();\n                break;\n            }\n            if (r.captureIndices && r.captureIndices.length) {\n                lineTokens.produce(whileRule.stack, r.captureIndices[0].start);\n                handleCaptures(grammar, lineText, isFirstLine, whileRule.stack, lineTokens, whileRule.rule.whileCaptures, r.captureIndices);\n                lineTokens.produce(whileRule.stack, r.captureIndices[0].end);\n                anchorPosition = r.captureIndices[0].end;\n                if (r.captureIndices[0].end > linePos) {\n                    linePos = r.captureIndices[0].end;\n                    isFirstLine = false;\n                }\n            }\n        }\n        else {\n            if (debug_1.DebugFlags.InDebugMode) {\n                console.log('  popping ' + whileRule.rule.debugName + ' - ' + whileRule.rule.debugWhileRegExp);\n            }\n            stack = whileRule.stack.pop();\n            break;\n        }\n    }\n    return { stack: stack, linePos: linePos, anchorPosition: anchorPosition, isFirstLine: isFirstLine };\n}\nvar TokenizeStringResult = /** @class */ (function () {\n    function TokenizeStringResult(stack, stoppedEarly) {\n        this.stack = stack;\n        this.stoppedEarly = stoppedEarly;\n    }\n    return TokenizeStringResult;\n}());\n/**\n * Tokenize a string\n * @param grammar\n * @param lineText\n * @param isFirstLine\n * @param linePos\n * @param stack\n * @param lineTokens\n * @param checkWhileConditions\n * @param timeLimit Use `0` to indicate no time limit\n * @returns the StackElement or StackElement.TIME_LIMIT_REACHED if the time limit has been reached\n */\nfunction _tokenizeString(grammar, lineText, isFirstLine, linePos, stack, lineTokens, checkWhileConditions, timeLimit) {\n    var lineLength = lineText.content.length;\n    var STOP = false;\n    var anchorPosition = -1;\n    if (checkWhileConditions) {\n        var whileCheckResult = _checkWhileConditions(grammar, lineText, isFirstLine, linePos, stack, lineTokens);\n        stack = whileCheckResult.stack;\n        linePos = whileCheckResult.linePos;\n        isFirstLine = whileCheckResult.isFirstLine;\n        anchorPosition = whileCheckResult.anchorPosition;\n    }\n    var startTime = Date.now();\n    while (!STOP) {\n        if (timeLimit !== 0) {\n            var elapsedTime = Date.now() - startTime;\n            if (elapsedTime > timeLimit) {\n                return new TokenizeStringResult(stack, true);\n            }\n        }\n        scanNext(); // potentially modifies linePos && anchorPosition\n    }\n    return new TokenizeStringResult(stack, false);\n    function scanNext() {\n        if (debug_1.DebugFlags.InDebugMode) {\n            console.log('');\n            console.log(\"@@scanNext \" + linePos + \": |\" + lineText.content.substr(linePos).replace(/\\n$/, '\\\\n') + \"|\");\n        }\n        var r = matchRuleOrInjections(grammar, lineText, isFirstLine, linePos, stack, anchorPosition);\n        if (!r) {\n            if (debug_1.DebugFlags.InDebugMode) {\n                console.log('  no more matches.');\n            }\n            // No match\n            lineTokens.produce(stack, lineLength);\n            STOP = true;\n            return;\n        }\n        var captureIndices = r.captureIndices;\n        var matchedRuleId = r.matchedRuleId;\n        var hasAdvanced = (captureIndices && captureIndices.length > 0) ? (captureIndices[0].end > linePos) : false;\n        if (matchedRuleId === -1) {\n            // We matched the `end` for this rule => pop it\n            var poppedRule = stack.getRule(grammar);\n            if (debug_1.DebugFlags.InDebugMode) {\n                console.log('  popping ' + poppedRule.debugName + ' - ' + poppedRule.debugEndRegExp);\n            }\n            lineTokens.produce(stack, captureIndices[0].start);\n            stack = stack.setContentNameScopesList(stack.nameScopesList);\n            handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, poppedRule.endCaptures, captureIndices);\n            lineTokens.produce(stack, captureIndices[0].end);\n            // pop\n            var popped = stack;\n            stack = stack.pop();\n            anchorPosition = popped.getAnchorPos();\n            if (!hasAdvanced && popped.getEnterPos() === linePos) {\n                // Grammar pushed & popped a rule without advancing\n                if (debug_1.DebugFlags.InDebugMode) {\n                    console.error('[1] - Grammar is in an endless loop - Grammar pushed & popped a rule without advancing');\n                }\n                // See https://github.com/Microsoft/vscode-textmate/issues/12\n                // Let's assume this was a mistake by the grammar author and the intent was to continue in this state\n                stack = popped;\n                lineTokens.produce(stack, lineLength);\n                STOP = true;\n                return;\n            }\n        }\n        else {\n            // We matched a rule!\n            var _rule = grammar.getRule(matchedRuleId);\n            lineTokens.produce(stack, captureIndices[0].start);\n            var beforePush = stack;\n            // push it on the stack rule\n            var scopeName = _rule.getName(lineText.content, captureIndices);\n            var nameScopesList = stack.contentNameScopesList.push(grammar, scopeName);\n            stack = stack.push(matchedRuleId, linePos, anchorPosition, captureIndices[0].end === lineLength, null, nameScopesList, nameScopesList);\n            if (_rule instanceof rule_1.BeginEndRule) {\n                var pushedRule = _rule;\n                if (debug_1.DebugFlags.InDebugMode) {\n                    console.log('  pushing ' + pushedRule.debugName + ' - ' + pushedRule.debugBeginRegExp);\n                }\n                handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, pushedRule.beginCaptures, captureIndices);\n                lineTokens.produce(stack, captureIndices[0].end);\n                anchorPosition = captureIndices[0].end;\n                var contentName = pushedRule.getContentName(lineText.content, captureIndices);\n                var contentNameScopesList = nameScopesList.push(grammar, contentName);\n                stack = stack.setContentNameScopesList(contentNameScopesList);\n                if (pushedRule.endHasBackReferences) {\n                    stack = stack.setEndRule(pushedRule.getEndWithResolvedBackReferences(lineText.content, captureIndices));\n                }\n                if (!hasAdvanced && beforePush.hasSameRuleAs(stack)) {\n                    // Grammar pushed the same rule without advancing\n                    if (debug_1.DebugFlags.InDebugMode) {\n                        console.error('[2] - Grammar is in an endless loop - Grammar pushed the same rule without advancing');\n                    }\n                    stack = stack.pop();\n                    lineTokens.produce(stack, lineLength);\n                    STOP = true;\n                    return;\n                }\n            }\n            else if (_rule instanceof rule_1.BeginWhileRule) {\n                var pushedRule = _rule;\n                if (debug_1.DebugFlags.InDebugMode) {\n                    console.log('  pushing ' + pushedRule.debugName);\n                }\n                handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, pushedRule.beginCaptures, captureIndices);\n                lineTokens.produce(stack, captureIndices[0].end);\n                anchorPosition = captureIndices[0].end;\n                var contentName = pushedRule.getContentName(lineText.content, captureIndices);\n                var contentNameScopesList = nameScopesList.push(grammar, contentName);\n                stack = stack.setContentNameScopesList(contentNameScopesList);\n                if (pushedRule.whileHasBackReferences) {\n                    stack = stack.setEndRule(pushedRule.getWhileWithResolvedBackReferences(lineText.content, captureIndices));\n                }\n                if (!hasAdvanced && beforePush.hasSameRuleAs(stack)) {\n                    // Grammar pushed the same rule without advancing\n                    if (debug_1.DebugFlags.InDebugMode) {\n                        console.error('[3] - Grammar is in an endless loop - Grammar pushed the same rule without advancing');\n                    }\n                    stack = stack.pop();\n                    lineTokens.produce(stack, lineLength);\n                    STOP = true;\n                    return;\n                }\n            }\n            else {\n                var matchingRule = _rule;\n                if (debug_1.DebugFlags.InDebugMode) {\n                    console.log('  matched ' + matchingRule.debugName + ' - ' + matchingRule.debugMatchRegExp);\n                }\n                handleCaptures(grammar, lineText, isFirstLine, stack, lineTokens, matchingRule.captures, captureIndices);\n                lineTokens.produce(stack, captureIndices[0].end);\n                // pop rule immediately since it is a MatchRule\n                stack = stack.pop();\n                if (!hasAdvanced) {\n                    // Grammar is not advancing, nor is it pushing/popping\n                    if (debug_1.DebugFlags.InDebugMode) {\n                        console.error('[4] - Grammar is in an endless loop - Grammar is not advancing, nor is it pushing/popping');\n                    }\n                    stack = stack.safePop();\n                    lineTokens.produce(stack, lineLength);\n                    STOP = true;\n                    return;\n                }\n            }\n        }\n        if (captureIndices[0].end > linePos) {\n            // Advance stream\n            linePos = captureIndices[0].end;\n            isFirstLine = false;\n        }\n    }\n}\nvar StackElementMetadata = /** @class */ (function () {\n    function StackElementMetadata() {\n    }\n    StackElementMetadata.toBinaryStr = function (metadata) {\n        var r = metadata.toString(2);\n        while (r.length < 32) {\n            r = '0' + r;\n        }\n        return r;\n    };\n    StackElementMetadata.printMetadata = function (metadata) {\n        var languageId = StackElementMetadata.getLanguageId(metadata);\n        var tokenType = StackElementMetadata.getTokenType(metadata);\n        var fontStyle = StackElementMetadata.getFontStyle(metadata);\n        var foreground = StackElementMetadata.getForeground(metadata);\n        var background = StackElementMetadata.getBackground(metadata);\n        console.log({\n            languageId: languageId,\n            tokenType: tokenType,\n            fontStyle: fontStyle,\n            foreground: foreground,\n            background: background,\n        });\n    };\n    StackElementMetadata.getLanguageId = function (metadata) {\n        return (metadata & 255 /* LANGUAGEID_MASK */) >>> 0 /* LANGUAGEID_OFFSET */;\n    };\n    StackElementMetadata.getTokenType = function (metadata) {\n        return (metadata & 768 /* TOKEN_TYPE_MASK */) >>> 8 /* TOKEN_TYPE_OFFSET */;\n    };\n    StackElementMetadata.getFontStyle = function (metadata) {\n        return (metadata & 15360 /* FONT_STYLE_MASK */) >>> 10 /* FONT_STYLE_OFFSET */;\n    };\n    StackElementMetadata.getForeground = function (metadata) {\n        return (metadata & 8372224 /* FOREGROUND_MASK */) >>> 14 /* FOREGROUND_OFFSET */;\n    };\n    StackElementMetadata.getBackground = function (metadata) {\n        return (metadata & 4286578688 /* BACKGROUND_MASK */) >>> 23 /* BACKGROUND_OFFSET */;\n    };\n    StackElementMetadata.set = function (metadata, languageId, tokenType, fontStyle, foreground, background) {\n        var _languageId = StackElementMetadata.getLanguageId(metadata);\n        var _tokenType = StackElementMetadata.getTokenType(metadata);\n        var _fontStyle = StackElementMetadata.getFontStyle(metadata);\n        var _foreground = StackElementMetadata.getForeground(metadata);\n        var _background = StackElementMetadata.getBackground(metadata);\n        if (languageId !== 0) {\n            _languageId = languageId;\n        }\n        if (tokenType !== 0 /* Other */) {\n            _tokenType = tokenType === 8 /* MetaEmbedded */ ? 0 /* Other */ : tokenType;\n        }\n        if (fontStyle !== -1 /* NotSet */) {\n            _fontStyle = fontStyle;\n        }\n        if (foreground !== 0) {\n            _foreground = foreground;\n        }\n        if (background !== 0) {\n            _background = background;\n        }\n        return ((_languageId << 0 /* LANGUAGEID_OFFSET */)\n            | (_tokenType << 8 /* TOKEN_TYPE_OFFSET */)\n            | (_fontStyle << 10 /* FONT_STYLE_OFFSET */)\n            | (_foreground << 14 /* FOREGROUND_OFFSET */)\n            | (_background << 23 /* BACKGROUND_OFFSET */)) >>> 0;\n    };\n    return StackElementMetadata;\n}());\nexports.StackElementMetadata = StackElementMetadata;\nvar ScopeListElement = /** @class */ (function () {\n    function ScopeListElement(parent, scope, metadata) {\n        this.parent = parent;\n        this.scope = scope;\n        this.metadata = metadata;\n    }\n    ScopeListElement._equals = function (a, b) {\n        do {\n            if (a === b) {\n                return true;\n            }\n            if (!a && !b) {\n                // End of list reached for both\n                return true;\n            }\n            if (!a || !b) {\n                // End of list reached only for one\n                return false;\n            }\n            if (a.scope !== b.scope || a.metadata !== b.metadata) {\n                return false;\n            }\n            // Go to previous pair\n            a = a.parent;\n            b = b.parent;\n        } while (true);\n    };\n    ScopeListElement.prototype.equals = function (other) {\n        return ScopeListElement._equals(this, other);\n    };\n    ScopeListElement._matchesScope = function (scope, selector, selectorWithDot) {\n        return (selector === scope || scope.substring(0, selectorWithDot.length) === selectorWithDot);\n    };\n    ScopeListElement._matches = function (target, parentScopes) {\n        if (parentScopes === null) {\n            return true;\n        }\n        var len = parentScopes.length;\n        var index = 0;\n        var selector = parentScopes[index];\n        var selectorWithDot = selector + '.';\n        while (target) {\n            if (this._matchesScope(target.scope, selector, selectorWithDot)) {\n                index++;\n                if (index === len) {\n                    return true;\n                }\n                selector = parentScopes[index];\n                selectorWithDot = selector + '.';\n            }\n            target = target.parent;\n        }\n        return false;\n    };\n    ScopeListElement.mergeMetadata = function (metadata, scopesList, source) {\n        if (source === null) {\n            return metadata;\n        }\n        var fontStyle = -1 /* NotSet */;\n        var foreground = 0;\n        var background = 0;\n        if (source.themeData !== null) {\n            // Find the first themeData that matches\n            for (var i = 0, len = source.themeData.length; i < len; i++) {\n                var themeData = source.themeData[i];\n                if (this._matches(scopesList, themeData.parentScopes)) {\n                    fontStyle = themeData.fontStyle;\n                    foreground = themeData.foreground;\n                    background = themeData.background;\n                    break;\n                }\n            }\n        }\n        return StackElementMetadata.set(metadata, source.languageId, source.tokenType, fontStyle, foreground, background);\n    };\n    ScopeListElement._push = function (target, grammar, scopes) {\n        for (var i = 0, len = scopes.length; i < len; i++) {\n            var scope = scopes[i];\n            var rawMetadata = grammar.getMetadataForScope(scope);\n            var metadata = ScopeListElement.mergeMetadata(target.metadata, target, rawMetadata);\n            target = new ScopeListElement(target, scope, metadata);\n        }\n        return target;\n    };\n    ScopeListElement.prototype.push = function (grammar, scope) {\n        if (scope === null) {\n            return this;\n        }\n        if (scope.indexOf(' ') >= 0) {\n            // there are multiple scopes to push\n            return ScopeListElement._push(this, grammar, scope.split(/ /g));\n        }\n        // there is a single scope to push\n        return ScopeListElement._push(this, grammar, [scope]);\n    };\n    ScopeListElement._generateScopes = function (scopesList) {\n        var result = [];\n        var resultLen = 0;\n        while (scopesList) {\n            result[resultLen++] = scopesList.scope;\n            scopesList = scopesList.parent;\n        }\n        result.reverse();\n        return result;\n    };\n    ScopeListElement.prototype.generateScopes = function () {\n        return ScopeListElement._generateScopes(this);\n    };\n    return ScopeListElement;\n}());\nexports.ScopeListElement = ScopeListElement;\n/**\n * Represents a \"pushed\" state on the stack (as a linked list element).\n */\nvar StackElement = /** @class */ (function () {\n    function StackElement(parent, ruleId, enterPos, anchorPos, beginRuleCapturedEOL, endRule, nameScopesList, contentNameScopesList) {\n        this._stackElementBrand = undefined;\n        this.parent = parent;\n        this.depth = (this.parent ? this.parent.depth + 1 : 1);\n        this.ruleId = ruleId;\n        this._enterPos = enterPos;\n        this._anchorPos = anchorPos;\n        this.beginRuleCapturedEOL = beginRuleCapturedEOL;\n        this.endRule = endRule;\n        this.nameScopesList = nameScopesList;\n        this.contentNameScopesList = contentNameScopesList;\n    }\n    /**\n     * A structural equals check. Does not take into account `scopes`.\n     */\n    StackElement._structuralEquals = function (a, b) {\n        do {\n            if (a === b) {\n                return true;\n            }\n            if (!a && !b) {\n                // End of list reached for both\n                return true;\n            }\n            if (!a || !b) {\n                // End of list reached only for one\n                return false;\n            }\n            if (a.depth !== b.depth || a.ruleId !== b.ruleId || a.endRule !== b.endRule) {\n                return false;\n            }\n            // Go to previous pair\n            a = a.parent;\n            b = b.parent;\n        } while (true);\n    };\n    StackElement._equals = function (a, b) {\n        if (a === b) {\n            return true;\n        }\n        if (!this._structuralEquals(a, b)) {\n            return false;\n        }\n        return a.contentNameScopesList.equals(b.contentNameScopesList);\n    };\n    StackElement.prototype.clone = function () {\n        return this;\n    };\n    StackElement.prototype.equals = function (other) {\n        if (other === null) {\n            return false;\n        }\n        return StackElement._equals(this, other);\n    };\n    StackElement._reset = function (el) {\n        while (el) {\n            el._enterPos = -1;\n            el._anchorPos = -1;\n            el = el.parent;\n        }\n    };\n    StackElement.prototype.reset = function () {\n        StackElement._reset(this);\n    };\n    StackElement.prototype.pop = function () {\n        return this.parent;\n    };\n    StackElement.prototype.safePop = function () {\n        if (this.parent) {\n            return this.parent;\n        }\n        return this;\n    };\n    StackElement.prototype.push = function (ruleId, enterPos, anchorPos, beginRuleCapturedEOL, endRule, nameScopesList, contentNameScopesList) {\n        return new StackElement(this, ruleId, enterPos, anchorPos, beginRuleCapturedEOL, endRule, nameScopesList, contentNameScopesList);\n    };\n    StackElement.prototype.getEnterPos = function () {\n        return this._enterPos;\n    };\n    StackElement.prototype.getAnchorPos = function () {\n        return this._anchorPos;\n    };\n    StackElement.prototype.getRule = function (grammar) {\n        return grammar.getRule(this.ruleId);\n    };\n    StackElement.prototype._writeString = function (res, outIndex) {\n        if (this.parent) {\n            outIndex = this.parent._writeString(res, outIndex);\n        }\n        res[outIndex++] = \"(\" + this.ruleId + \", TODO-\" + this.nameScopesList + \", TODO-\" + this.contentNameScopesList + \")\";\n        return outIndex;\n    };\n    StackElement.prototype.toString = function () {\n        var r = [];\n        this._writeString(r, 0);\n        return '[' + r.join(',') + ']';\n    };\n    StackElement.prototype.setContentNameScopesList = function (contentNameScopesList) {\n        if (this.contentNameScopesList === contentNameScopesList) {\n            return this;\n        }\n        return this.parent.push(this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, this.endRule, this.nameScopesList, contentNameScopesList);\n    };\n    StackElement.prototype.setEndRule = function (endRule) {\n        if (this.endRule === endRule) {\n            return this;\n        }\n        return new StackElement(this.parent, this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, endRule, this.nameScopesList, this.contentNameScopesList);\n    };\n    StackElement.prototype.hasSameRuleAs = function (other) {\n        var el = this;\n        while (el && el._enterPos === other._enterPos) {\n            if (el.ruleId === other.ruleId) {\n                return true;\n            }\n            el = el.parent;\n        }\n        return false;\n    };\n    StackElement.NULL = new StackElement(null, 0, 0, 0, false, null, null, null);\n    return StackElement;\n}());\nexports.StackElement = StackElement;\nvar LocalStackElement = /** @class */ (function () {\n    function LocalStackElement(scopes, endPos) {\n        this.scopes = scopes;\n        this.endPos = endPos;\n    }\n    return LocalStackElement;\n}());\nexports.LocalStackElement = LocalStackElement;\nvar LineTokens = /** @class */ (function () {\n    function LineTokens(emitBinaryTokens, lineText, tokenTypeOverrides) {\n        this._emitBinaryTokens = emitBinaryTokens;\n        this._tokenTypeOverrides = tokenTypeOverrides;\n        if (debug_1.DebugFlags.InDebugMode) {\n            this._lineText = lineText;\n        }\n        else {\n            this._lineText = null;\n        }\n        this._tokens = [];\n        this._binaryTokens = [];\n        this._lastTokenEndIndex = 0;\n    }\n    LineTokens.prototype.produce = function (stack, endIndex) {\n        this.produceFromScopes(stack.contentNameScopesList, endIndex);\n    };\n    LineTokens.prototype.produceFromScopes = function (scopesList, endIndex) {\n        if (this._lastTokenEndIndex >= endIndex) {\n            return;\n        }\n        if (this._emitBinaryTokens) {\n            var metadata = scopesList.metadata;\n            if (this._tokenTypeOverrides.length > 0) {\n                var scopes_1 = scopesList.generateScopes();\n                for (var _i = 0, _a = this._tokenTypeOverrides; _i < _a.length; _i++) {\n                    var tokenType = _a[_i];\n                    if (tokenType.matcher(scopes_1)) {\n                        metadata = StackElementMetadata.set(metadata, 0, toTemporaryType(tokenType.type), -1 /* NotSet */, 0, 0);\n                    }\n                }\n            }\n            if (this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 1] === metadata) {\n                // no need to push a token with the same metadata\n                this._lastTokenEndIndex = endIndex;\n                return;\n            }\n            if (debug_1.DebugFlags.InDebugMode) {\n                var scopes_2 = scopesList.generateScopes();\n                console.log('  token: |' + this._lineText.substring(this._lastTokenEndIndex, endIndex).replace(/\\n$/, '\\\\n') + '|');\n                for (var k = 0; k < scopes_2.length; k++) {\n                    console.log('      * ' + scopes_2[k]);\n                }\n            }\n            this._binaryTokens.push(this._lastTokenEndIndex);\n            this._binaryTokens.push(metadata);\n            this._lastTokenEndIndex = endIndex;\n            return;\n        }\n        var scopes = scopesList.generateScopes();\n        if (debug_1.DebugFlags.InDebugMode) {\n            console.log('  token: |' + this._lineText.substring(this._lastTokenEndIndex, endIndex).replace(/\\n$/, '\\\\n') + '|');\n            for (var k = 0; k < scopes.length; k++) {\n                console.log('      * ' + scopes[k]);\n            }\n        }\n        this._tokens.push({\n            startIndex: this._lastTokenEndIndex,\n            endIndex: endIndex,\n            // value: lineText.substring(lastTokenEndIndex, endIndex),\n            scopes: scopes\n        });\n        this._lastTokenEndIndex = endIndex;\n    };\n    LineTokens.prototype.getResult = function (stack, lineLength) {\n        if (this._tokens.length > 0 && this._tokens[this._tokens.length - 1].startIndex === lineLength - 1) {\n            // pop produced token for newline\n            this._tokens.pop();\n        }\n        if (this._tokens.length === 0) {\n            this._lastTokenEndIndex = -1;\n            this.produce(stack, lineLength);\n            this._tokens[this._tokens.length - 1].startIndex = 0;\n        }\n        return this._tokens;\n    };\n    LineTokens.prototype.getBinaryResult = function (stack, lineLength) {\n        if (this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 2] === lineLength - 1) {\n            // pop produced token for newline\n            this._binaryTokens.pop();\n            this._binaryTokens.pop();\n        }\n        if (this._binaryTokens.length === 0) {\n            this._lastTokenEndIndex = -1;\n            this.produce(stack, lineLength);\n            this._binaryTokens[this._binaryTokens.length - 2] = 0;\n        }\n        var result = new Uint32Array(this._binaryTokens.length);\n        for (var i = 0, len = this._binaryTokens.length; i < len; i++) {\n            result[i] = this._binaryTokens[i];\n        }\n        return result;\n    };\n    return LineTokens;\n}());\nfunction toTemporaryType(standardType) {\n    switch (standardType) {\n        case 3 /* RegEx */:\n            return 3 /* RegEx */;\n        case 2 /* String */:\n            return 2 /* String */;\n        case 1 /* Comment */:\n            return 1 /* Comment */;\n        case 0 /* Other */:\n        default:\n            // `MetaEmbedded` is the same scope as `Other`\n            // but it overwrites existing token types in the stack.\n            return 8 /* MetaEmbedded */;\n    }\n}\n//# sourceMappingURL=grammar.js.map", "\"use strict\";\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseRawGrammar = void 0;\nvar plist = require(\"./plist\");\nvar debug_1 = require(\"./debug\");\nvar json_1 = require(\"./json\");\nfunction parseRawGrammar(content, filePath) {\n    if (filePath === void 0) { filePath = null; }\n    if (filePath !== null && /\\.json$/.test(filePath)) {\n        return parseJSONGrammar(content, filePath);\n    }\n    return parsePLISTGrammar(content, filePath);\n}\nexports.parseRawGrammar = parseRawGrammar;\nfunction parseJSONGrammar(contents, filename) {\n    if (debug_1.DebugFlags.InDebugMode) {\n        return json_1.parse(contents, filename, true);\n    }\n    return JSON.parse(contents);\n}\nfunction parsePLISTGrammar(contents, filename) {\n    if (debug_1.DebugFlags.InDebugMode) {\n        return plist.parseWithLocation(contents, filename, '$vscodeTextmateLocation');\n    }\n    return plist.parse(contents);\n}\n//# sourceMappingURL=grammarReader.js.map", "\"use strict\";\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = void 0;\nfunction doFail(streamState, msg) {\n    // console.log('Near offset ' + streamState.pos + ': ' + msg + ' ~~~' + streamState.source.substr(streamState.pos, 50) + '~~~');\n    throw new Error('Near offset ' + streamState.pos + ': ' + msg + ' ~~~' + streamState.source.substr(streamState.pos, 50) + '~~~');\n}\nfunction parse(source, filename, withMetadata) {\n    var streamState = new JSONStreamState(source);\n    var token = new JSONToken();\n    var state = 0 /* ROOT_STATE */;\n    var cur = null;\n    var stateStack = [];\n    var objStack = [];\n    function pushState() {\n        stateStack.push(state);\n        objStack.push(cur);\n    }\n    function popState() {\n        state = stateStack.pop();\n        cur = objStack.pop();\n    }\n    function fail(msg) {\n        doFail(streamState, msg);\n    }\n    while (nextJSONToken(streamState, token)) {\n        if (state === 0 /* ROOT_STATE */) {\n            if (cur !== null) {\n                fail('too many constructs in root');\n            }\n            if (token.type === 3 /* LEFT_CURLY_BRACKET */) {\n                cur = {};\n                if (withMetadata) {\n                    cur.$vscodeTextmateLocation = token.toLocation(filename);\n                }\n                pushState();\n                state = 1 /* DICT_STATE */;\n                continue;\n            }\n            if (token.type === 2 /* LEFT_SQUARE_BRACKET */) {\n                cur = [];\n                pushState();\n                state = 4 /* ARR_STATE */;\n                continue;\n            }\n            fail('unexpected token in root');\n        }\n        if (state === 2 /* DICT_STATE_COMMA */) {\n            if (token.type === 5 /* RIGHT_CURLY_BRACKET */) {\n                popState();\n                continue;\n            }\n            if (token.type === 7 /* COMMA */) {\n                state = 3 /* DICT_STATE_NO_CLOSE */;\n                continue;\n            }\n            fail('expected , or }');\n        }\n        if (state === 1 /* DICT_STATE */ || state === 3 /* DICT_STATE_NO_CLOSE */) {\n            if (state === 1 /* DICT_STATE */ && token.type === 5 /* RIGHT_CURLY_BRACKET */) {\n                popState();\n                continue;\n            }\n            if (token.type === 1 /* STRING */) {\n                var keyValue = token.value;\n                if (!nextJSONToken(streamState, token) || token.type !== 6 /* COLON */) {\n                    fail('expected colon');\n                }\n                if (!nextJSONToken(streamState, token)) {\n                    fail('expected value');\n                }\n                state = 2 /* DICT_STATE_COMMA */;\n                if (token.type === 1 /* STRING */) {\n                    cur[keyValue] = token.value;\n                    continue;\n                }\n                if (token.type === 8 /* NULL */) {\n                    cur[keyValue] = null;\n                    continue;\n                }\n                if (token.type === 9 /* TRUE */) {\n                    cur[keyValue] = true;\n                    continue;\n                }\n                if (token.type === 10 /* FALSE */) {\n                    cur[keyValue] = false;\n                    continue;\n                }\n                if (token.type === 11 /* NUMBER */) {\n                    cur[keyValue] = parseFloat(token.value);\n                    continue;\n                }\n                if (token.type === 2 /* LEFT_SQUARE_BRACKET */) {\n                    var newArr = [];\n                    cur[keyValue] = newArr;\n                    pushState();\n                    state = 4 /* ARR_STATE */;\n                    cur = newArr;\n                    continue;\n                }\n                if (token.type === 3 /* LEFT_CURLY_BRACKET */) {\n                    var newDict = {};\n                    if (withMetadata) {\n                        newDict.$vscodeTextmateLocation = token.toLocation(filename);\n                    }\n                    cur[keyValue] = newDict;\n                    pushState();\n                    state = 1 /* DICT_STATE */;\n                    cur = newDict;\n                    continue;\n                }\n            }\n            fail('unexpected token in dict');\n        }\n        if (state === 5 /* ARR_STATE_COMMA */) {\n            if (token.type === 4 /* RIGHT_SQUARE_BRACKET */) {\n                popState();\n                continue;\n            }\n            if (token.type === 7 /* COMMA */) {\n                state = 6 /* ARR_STATE_NO_CLOSE */;\n                continue;\n            }\n            fail('expected , or ]');\n        }\n        if (state === 4 /* ARR_STATE */ || state === 6 /* ARR_STATE_NO_CLOSE */) {\n            if (state === 4 /* ARR_STATE */ && token.type === 4 /* RIGHT_SQUARE_BRACKET */) {\n                popState();\n                continue;\n            }\n            state = 5 /* ARR_STATE_COMMA */;\n            if (token.type === 1 /* STRING */) {\n                cur.push(token.value);\n                continue;\n            }\n            if (token.type === 8 /* NULL */) {\n                cur.push(null);\n                continue;\n            }\n            if (token.type === 9 /* TRUE */) {\n                cur.push(true);\n                continue;\n            }\n            if (token.type === 10 /* FALSE */) {\n                cur.push(false);\n                continue;\n            }\n            if (token.type === 11 /* NUMBER */) {\n                cur.push(parseFloat(token.value));\n                continue;\n            }\n            if (token.type === 2 /* LEFT_SQUARE_BRACKET */) {\n                var newArr = [];\n                cur.push(newArr);\n                pushState();\n                state = 4 /* ARR_STATE */;\n                cur = newArr;\n                continue;\n            }\n            if (token.type === 3 /* LEFT_CURLY_BRACKET */) {\n                var newDict = {};\n                if (withMetadata) {\n                    newDict.$vscodeTextmateLocation = token.toLocation(filename);\n                }\n                cur.push(newDict);\n                pushState();\n                state = 1 /* DICT_STATE */;\n                cur = newDict;\n                continue;\n            }\n            fail('unexpected token in array');\n        }\n        fail('unknown state');\n    }\n    if (objStack.length !== 0) {\n        fail('unclosed constructs');\n    }\n    return cur;\n}\nexports.parse = parse;\nvar JSONStreamState = /** @class */ (function () {\n    function JSONStreamState(source) {\n        this.source = source;\n        this.pos = 0;\n        this.len = source.length;\n        this.line = 1;\n        this.char = 0;\n    }\n    return JSONStreamState;\n}());\nvar JSONToken = /** @class */ (function () {\n    function JSONToken() {\n        this.value = null;\n        this.type = 0 /* UNKNOWN */;\n        this.offset = -1;\n        this.len = -1;\n        this.line = -1;\n        this.char = -1;\n    }\n    JSONToken.prototype.toLocation = function (filename) {\n        return {\n            filename: filename,\n            line: this.line,\n            char: this.char\n        };\n    };\n    return JSONToken;\n}());\n/**\n * precondition: the string is known to be valid JSON (https://www.ietf.org/rfc/rfc4627.txt)\n */\nfunction nextJSONToken(_state, _out) {\n    _out.value = null;\n    _out.type = 0 /* UNKNOWN */;\n    _out.offset = -1;\n    _out.len = -1;\n    _out.line = -1;\n    _out.char = -1;\n    var source = _state.source;\n    var pos = _state.pos;\n    var len = _state.len;\n    var line = _state.line;\n    var char = _state.char;\n    //------------------------ skip whitespace\n    var chCode;\n    do {\n        if (pos >= len) {\n            return false; /*EOS*/\n        }\n        chCode = source.charCodeAt(pos);\n        if (chCode === 32 /* SPACE */ || chCode === 9 /* HORIZONTAL_TAB */ || chCode === 13 /* CARRIAGE_RETURN */) {\n            // regular whitespace\n            pos++;\n            char++;\n            continue;\n        }\n        if (chCode === 10 /* LINE_FEED */) {\n            // newline\n            pos++;\n            line++;\n            char = 0;\n            continue;\n        }\n        // not whitespace\n        break;\n    } while (true);\n    _out.offset = pos;\n    _out.line = line;\n    _out.char = char;\n    if (chCode === 34 /* QUOTATION_MARK */) {\n        //------------------------ strings\n        _out.type = 1 /* STRING */;\n        pos++;\n        char++;\n        do {\n            if (pos >= len) {\n                return false; /*EOS*/\n            }\n            chCode = source.charCodeAt(pos);\n            pos++;\n            char++;\n            if (chCode === 92 /* BACKSLASH */) {\n                // skip next char\n                pos++;\n                char++;\n                continue;\n            }\n            if (chCode === 34 /* QUOTATION_MARK */) {\n                // end of the string\n                break;\n            }\n        } while (true);\n        _out.value = source.substring(_out.offset + 1, pos - 1).replace(/\\\\u([0-9A-Fa-f]{4})/g, function (_, m0) {\n            return String.fromCodePoint(parseInt(m0, 16));\n        }).replace(/\\\\(.)/g, function (_, m0) {\n            switch (m0) {\n                case '\"': return '\"';\n                case '\\\\': return '\\\\';\n                case '/': return '/';\n                case 'b': return '\\b';\n                case 'f': return '\\f';\n                case 'n': return '\\n';\n                case 'r': return '\\r';\n                case 't': return '\\t';\n                default: doFail(_state, 'invalid escape sequence');\n            }\n            throw new Error('unreachable');\n        });\n    }\n    else if (chCode === 91 /* LEFT_SQUARE_BRACKET */) {\n        _out.type = 2 /* LEFT_SQUARE_BRACKET */;\n        pos++;\n        char++;\n    }\n    else if (chCode === 123 /* LEFT_CURLY_BRACKET */) {\n        _out.type = 3 /* LEFT_CURLY_BRACKET */;\n        pos++;\n        char++;\n    }\n    else if (chCode === 93 /* RIGHT_SQUARE_BRACKET */) {\n        _out.type = 4 /* RIGHT_SQUARE_BRACKET */;\n        pos++;\n        char++;\n    }\n    else if (chCode === 125 /* RIGHT_CURLY_BRACKET */) {\n        _out.type = 5 /* RIGHT_CURLY_BRACKET */;\n        pos++;\n        char++;\n    }\n    else if (chCode === 58 /* COLON */) {\n        _out.type = 6 /* COLON */;\n        pos++;\n        char++;\n    }\n    else if (chCode === 44 /* COMMA */) {\n        _out.type = 7 /* COMMA */;\n        pos++;\n        char++;\n    }\n    else if (chCode === 110 /* n */) {\n        //------------------------ null\n        _out.type = 8 /* NULL */;\n        pos++;\n        char++;\n        chCode = source.charCodeAt(pos);\n        if (chCode !== 117 /* u */) {\n            return false; /* INVALID */\n        }\n        pos++;\n        char++;\n        chCode = source.charCodeAt(pos);\n        if (chCode !== 108 /* l */) {\n            return false; /* INVALID */\n        }\n        pos++;\n        char++;\n        chCode = source.charCodeAt(pos);\n        if (chCode !== 108 /* l */) {\n            return false; /* INVALID */\n        }\n        pos++;\n        char++;\n    }\n    else if (chCode === 116 /* t */) {\n        //------------------------ true\n        _out.type = 9 /* TRUE */;\n        pos++;\n        char++;\n        chCode = source.charCodeAt(pos);\n        if (chCode !== 114 /* r */) {\n            return false; /* INVALID */\n        }\n        pos++;\n        char++;\n        chCode = source.charCodeAt(pos);\n        if (chCode !== 117 /* u */) {\n            return false; /* INVALID */\n        }\n        pos++;\n        char++;\n        chCode = source.charCodeAt(pos);\n        if (chCode !== 101 /* e */) {\n            return false; /* INVALID */\n        }\n        pos++;\n        char++;\n    }\n    else if (chCode === 102 /* f */) {\n        //------------------------ false\n        _out.type = 10 /* FALSE */;\n        pos++;\n        char++;\n        chCode = source.charCodeAt(pos);\n        if (chCode !== 97 /* a */) {\n            return false; /* INVALID */\n        }\n        pos++;\n        char++;\n        chCode = source.charCodeAt(pos);\n        if (chCode !== 108 /* l */) {\n            return false; /* INVALID */\n        }\n        pos++;\n        char++;\n        chCode = source.charCodeAt(pos);\n        if (chCode !== 115 /* s */) {\n            return false; /* INVALID */\n        }\n        pos++;\n        char++;\n        chCode = source.charCodeAt(pos);\n        if (chCode !== 101 /* e */) {\n            return false; /* INVALID */\n        }\n        pos++;\n        char++;\n    }\n    else {\n        //------------------------ numbers\n        _out.type = 11 /* NUMBER */;\n        do {\n            if (pos >= len) {\n                return false; /*EOS*/\n            }\n            chCode = source.charCodeAt(pos);\n            if (chCode === 46 /* DOT */\n                || (chCode >= 48 /* D0 */ && chCode <= 57 /* D9 */)\n                || (chCode === 101 /* e */ || chCode === 69 /* E */)\n                || (chCode === 45 /* MINUS */ || chCode === 43 /* PLUS */)) {\n                // looks like a piece of a number\n                pos++;\n                char++;\n                continue;\n            }\n            // pos--; char--;\n            break;\n        } while (true);\n    }\n    _out.len = pos - _out.offset;\n    if (_out.value === null) {\n        _out.value = source.substr(_out.offset, _out.len);\n    }\n    _state.pos = pos;\n    _state.line = line;\n    _state.char = char;\n    // console.log('PRODUCING TOKEN: ', _out.value, JSONTokenType[_out.type]);\n    return true;\n}\n//# sourceMappingURL=json.js.map", "\"use strict\";\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseRawGrammar = exports.INITIAL = exports.Registry = void 0;\nvar registry_1 = require(\"./registry\");\nvar grammarReader = require(\"./grammarReader\");\nvar theme_1 = require(\"./theme\");\nvar grammar_1 = require(\"./grammar\");\n__exportStar(require(\"./types\"), exports);\n/**\n * The registry that will hold all grammars.\n */\nvar Registry = /** @class */ (function () {\n    function Registry(options) {\n        this._options = options;\n        this._syncRegistry = new registry_1.SyncRegistry(theme_1.Theme.createFromRawTheme(options.theme, options.colorMap), options.onigLib);\n        this._ensureGrammarCache = new Map();\n    }\n    Registry.prototype.dispose = function () {\n        this._syncRegistry.dispose();\n    };\n    /**\n     * Change the theme. Once called, no previous `ruleStack` should be used anymore.\n     */\n    Registry.prototype.setTheme = function (theme, colorMap) {\n        this._syncRegistry.setTheme(theme_1.Theme.createFromRawTheme(theme, colorMap));\n    };\n    /**\n     * Returns a lookup array for color ids.\n     */\n    Registry.prototype.getColorMap = function () {\n        return this._syncRegistry.getColorMap();\n    };\n    /**\n     * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n     * Please do not use language id 0.\n     */\n    Registry.prototype.loadGrammarWithEmbeddedLanguages = function (initialScopeName, initialLanguage, embeddedLanguages) {\n        return this.loadGrammarWithConfiguration(initialScopeName, initialLanguage, { embeddedLanguages: embeddedLanguages });\n    };\n    /**\n     * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n     * Please do not use language id 0.\n     */\n    Registry.prototype.loadGrammarWithConfiguration = function (initialScopeName, initialLanguage, configuration) {\n        return this._loadGrammar(initialScopeName, initialLanguage, configuration.embeddedLanguages, configuration.tokenTypes);\n    };\n    /**\n     * Load the grammar for `scopeName` and all referenced included grammars asynchronously.\n     */\n    Registry.prototype.loadGrammar = function (initialScopeName) {\n        return this._loadGrammar(initialScopeName, 0, null, null);\n    };\n    Registry.prototype._doLoadSingleGrammar = function (scopeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var grammar, injections;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._options.loadGrammar(scopeName)];\n                    case 1:\n                        grammar = _a.sent();\n                        if (grammar) {\n                            injections = (typeof this._options.getInjections === 'function' ? this._options.getInjections(scopeName) : undefined);\n                            this._syncRegistry.addGrammar(grammar, injections);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Registry.prototype._loadSingleGrammar = function (scopeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (!this._ensureGrammarCache.has(scopeName)) {\n                    this._ensureGrammarCache.set(scopeName, this._doLoadSingleGrammar(scopeName));\n                }\n                return [2 /*return*/, this._ensureGrammarCache.get(scopeName)];\n            });\n        });\n    };\n    Registry.prototype._loadGrammar = function (initialScopeName, initialLanguage, embeddedLanguages, tokenTypes) {\n        return __awaiter(this, void 0, void 0, function () {\n            var dependencyProcessor;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        dependencyProcessor = new grammar_1.ScopeDependencyProcessor(this._syncRegistry, initialScopeName);\n                        _a.label = 1;\n                    case 1:\n                        if (!(dependencyProcessor.Q.length > 0)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, Promise.all(dependencyProcessor.Q.map(function (request) { return _this._loadSingleGrammar(request.scopeName); }))];\n                    case 2:\n                        _a.sent();\n                        dependencyProcessor.processQueue();\n                        return [3 /*break*/, 1];\n                    case 3: return [2 /*return*/, this.grammarForScopeName(initialScopeName, initialLanguage, embeddedLanguages, tokenTypes)];\n                }\n            });\n        });\n    };\n    /**\n     * Adds a rawGrammar.\n     */\n    Registry.prototype.addGrammar = function (rawGrammar, injections, initialLanguage, embeddedLanguages) {\n        if (injections === void 0) { injections = []; }\n        if (initialLanguage === void 0) { initialLanguage = 0; }\n        if (embeddedLanguages === void 0) { embeddedLanguages = null; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this._syncRegistry.addGrammar(rawGrammar, injections);\n                        return [4 /*yield*/, this.grammarForScopeName(rawGrammar.scopeName, initialLanguage, embeddedLanguages)];\n                    case 1: return [2 /*return*/, (_a.sent())];\n                }\n            });\n        });\n    };\n    /**\n     * Get the grammar for `scopeName`. The grammar must first be created via `loadGrammar` or `addGrammar`.\n     */\n    Registry.prototype.grammarForScopeName = function (scopeName, initialLanguage, embeddedLanguages, tokenTypes) {\n        if (initialLanguage === void 0) { initialLanguage = 0; }\n        if (embeddedLanguages === void 0) { embeddedLanguages = null; }\n        if (tokenTypes === void 0) { tokenTypes = null; }\n        return this._syncRegistry.grammarForScopeName(scopeName, initialLanguage, embeddedLanguages, tokenTypes);\n    };\n    return Registry;\n}());\nexports.Registry = Registry;\nexports.INITIAL = grammar_1.StackElement.NULL;\nexports.parseRawGrammar = grammarReader.parseRawGrammar;\n//# sourceMappingURL=main.js.map", "\"use strict\";\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMatchers = void 0;\nfunction createMatchers(selector, matchesName) {\n    var results = [];\n    var tokenizer = newTokenizer(selector);\n    var token = tokenizer.next();\n    while (token !== null) {\n        var priority = 0;\n        if (token.length === 2 && token.charAt(1) === ':') {\n            switch (token.charAt(0)) {\n                case 'R':\n                    priority = 1;\n                    break;\n                case 'L':\n                    priority = -1;\n                    break;\n                default:\n                    console.log(\"Unknown priority \" + token + \" in scope selector\");\n            }\n            token = tokenizer.next();\n        }\n        var matcher = parseConjunction();\n        results.push({ matcher: matcher, priority: priority });\n        if (token !== ',') {\n            break;\n        }\n        token = tokenizer.next();\n    }\n    return results;\n    function parseOperand() {\n        if (token === '-') {\n            token = tokenizer.next();\n            var expressionToNegate_1 = parseOperand();\n            return function (matcherInput) { return !!expressionToNegate_1 && !expressionToNegate_1(matcherInput); };\n        }\n        if (token === '(') {\n            token = tokenizer.next();\n            var expressionInParents = parseInnerExpression();\n            if (token === ')') {\n                token = tokenizer.next();\n            }\n            return expressionInParents;\n        }\n        if (isIdentifier(token)) {\n            var identifiers_1 = [];\n            do {\n                identifiers_1.push(token);\n                token = tokenizer.next();\n            } while (isIdentifier(token));\n            return function (matcherInput) { return matchesName(identifiers_1, matcherInput); };\n        }\n        return null;\n    }\n    function parseConjunction() {\n        var matchers = [];\n        var matcher = parseOperand();\n        while (matcher) {\n            matchers.push(matcher);\n            matcher = parseOperand();\n        }\n        return function (matcherInput) { return matchers.every(function (matcher) { return matcher(matcherInput); }); }; // and\n    }\n    function parseInnerExpression() {\n        var matchers = [];\n        var matcher = parseConjunction();\n        while (matcher) {\n            matchers.push(matcher);\n            if (token === '|' || token === ',') {\n                do {\n                    token = tokenizer.next();\n                } while (token === '|' || token === ','); // ignore subsequent commas\n            }\n            else {\n                break;\n            }\n            matcher = parseConjunction();\n        }\n        return function (matcherInput) { return matchers.some(function (matcher) { return matcher(matcherInput); }); }; // or\n    }\n}\nexports.createMatchers = createMatchers;\nfunction isIdentifier(token) {\n    return !!token && !!token.match(/[\\w\\.:]+/);\n}\nfunction newTokenizer(input) {\n    var regex = /([LR]:|[\\w\\.:][\\w\\.:\\-]*|[\\,\\|\\-\\(\\)])/g;\n    var match = regex.exec(input);\n    return {\n        next: function () {\n            if (!match) {\n                return null;\n            }\n            var res = match[0];\n            match = regex.exec(input);\n            return res;\n        }\n    };\n}\n//# sourceMappingURL=matcher.js.map", "\"use strict\";\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = exports.parseWithLocation = void 0;\nfunction parseWithLocation(content, filename, locationKeyName) {\n    return _parse(content, filename, locationKeyName);\n}\nexports.parseWithLocation = parseWithLocation;\n/**\n * A very fast plist parser\n */\nfunction parse(content) {\n    return _parse(content, null, null);\n}\nexports.parse = parse;\nfunction _parse(content, filename, locationKeyName) {\n    var len = content.length;\n    var pos = 0;\n    var line = 1;\n    var char = 0;\n    // Skip UTF8 BOM\n    if (len > 0 && content.charCodeAt(0) === 65279 /* BOM */) {\n        pos = 1;\n    }\n    function advancePosBy(by) {\n        if (locationKeyName === null) {\n            pos = pos + by;\n        }\n        else {\n            while (by > 0) {\n                var chCode = content.charCodeAt(pos);\n                if (chCode === 10 /* LINE_FEED */) {\n                    pos++;\n                    line++;\n                    char = 0;\n                }\n                else {\n                    pos++;\n                    char++;\n                }\n                by--;\n            }\n        }\n    }\n    function advancePosTo(to) {\n        if (locationKeyName === null) {\n            pos = to;\n        }\n        else {\n            advancePosBy(to - pos);\n        }\n    }\n    function skipWhitespace() {\n        while (pos < len) {\n            var chCode = content.charCodeAt(pos);\n            if (chCode !== 32 /* SPACE */ && chCode !== 9 /* TAB */ && chCode !== 13 /* CARRIAGE_RETURN */ && chCode !== 10 /* LINE_FEED */) {\n                break;\n            }\n            advancePosBy(1);\n        }\n    }\n    function advanceIfStartsWith(str) {\n        if (content.substr(pos, str.length) === str) {\n            advancePosBy(str.length);\n            return true;\n        }\n        return false;\n    }\n    function advanceUntil(str) {\n        var nextOccurence = content.indexOf(str, pos);\n        if (nextOccurence !== -1) {\n            advancePosTo(nextOccurence + str.length);\n        }\n        else {\n            // EOF\n            advancePosTo(len);\n        }\n    }\n    function captureUntil(str) {\n        var nextOccurence = content.indexOf(str, pos);\n        if (nextOccurence !== -1) {\n            var r = content.substring(pos, nextOccurence);\n            advancePosTo(nextOccurence + str.length);\n            return r;\n        }\n        else {\n            // EOF\n            var r = content.substr(pos);\n            advancePosTo(len);\n            return r;\n        }\n    }\n    var state = 0 /* ROOT_STATE */;\n    var cur = null;\n    var stateStack = [];\n    var objStack = [];\n    var curKey = null;\n    function pushState(newState, newCur) {\n        stateStack.push(state);\n        objStack.push(cur);\n        state = newState;\n        cur = newCur;\n    }\n    function popState() {\n        if (stateStack.length === 0) {\n            return fail('illegal state stack');\n        }\n        state = stateStack.pop();\n        cur = objStack.pop();\n    }\n    function fail(msg) {\n        throw new Error('Near offset ' + pos + ': ' + msg + ' ~~~' + content.substr(pos, 50) + '~~~');\n    }\n    var dictState = {\n        enterDict: function () {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            var newDict = {};\n            if (locationKeyName !== null) {\n                newDict[locationKeyName] = {\n                    filename: filename,\n                    line: line,\n                    char: char\n                };\n            }\n            cur[curKey] = newDict;\n            curKey = null;\n            pushState(1 /* DICT_STATE */, newDict);\n        },\n        enterArray: function () {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            var newArr = [];\n            cur[curKey] = newArr;\n            curKey = null;\n            pushState(2 /* ARR_STATE */, newArr);\n        }\n    };\n    var arrState = {\n        enterDict: function () {\n            var newDict = {};\n            if (locationKeyName !== null) {\n                newDict[locationKeyName] = {\n                    filename: filename,\n                    line: line,\n                    char: char\n                };\n            }\n            cur.push(newDict);\n            pushState(1 /* DICT_STATE */, newDict);\n        },\n        enterArray: function () {\n            var newArr = [];\n            cur.push(newArr);\n            pushState(2 /* ARR_STATE */, newArr);\n        }\n    };\n    function enterDict() {\n        if (state === 1 /* DICT_STATE */) {\n            dictState.enterDict();\n        }\n        else if (state === 2 /* ARR_STATE */) {\n            arrState.enterDict();\n        }\n        else { // ROOT_STATE\n            cur = {};\n            if (locationKeyName !== null) {\n                cur[locationKeyName] = {\n                    filename: filename,\n                    line: line,\n                    char: char\n                };\n            }\n            pushState(1 /* DICT_STATE */, cur);\n        }\n    }\n    function leaveDict() {\n        if (state === 1 /* DICT_STATE */) {\n            popState();\n        }\n        else if (state === 2 /* ARR_STATE */) {\n            return fail('unexpected </dict>');\n        }\n        else { // ROOT_STATE\n            return fail('unexpected </dict>');\n        }\n    }\n    function enterArray() {\n        if (state === 1 /* DICT_STATE */) {\n            dictState.enterArray();\n        }\n        else if (state === 2 /* ARR_STATE */) {\n            arrState.enterArray();\n        }\n        else { // ROOT_STATE\n            cur = [];\n            pushState(2 /* ARR_STATE */, cur);\n        }\n    }\n    function leaveArray() {\n        if (state === 1 /* DICT_STATE */) {\n            return fail('unexpected </array>');\n        }\n        else if (state === 2 /* ARR_STATE */) {\n            popState();\n        }\n        else { // ROOT_STATE\n            return fail('unexpected </array>');\n        }\n    }\n    function acceptKey(val) {\n        if (state === 1 /* DICT_STATE */) {\n            if (curKey !== null) {\n                return fail('too many <key>');\n            }\n            curKey = val;\n        }\n        else if (state === 2 /* ARR_STATE */) {\n            return fail('unexpected <key>');\n        }\n        else { // ROOT_STATE\n            return fail('unexpected <key>');\n        }\n    }\n    function acceptString(val) {\n        if (state === 1 /* DICT_STATE */) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 /* ARR_STATE */) {\n            cur.push(val);\n        }\n        else { // ROOT_STATE\n            cur = val;\n        }\n    }\n    function acceptReal(val) {\n        if (isNaN(val)) {\n            return fail('cannot parse float');\n        }\n        if (state === 1 /* DICT_STATE */) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 /* ARR_STATE */) {\n            cur.push(val);\n        }\n        else { // ROOT_STATE\n            cur = val;\n        }\n    }\n    function acceptInteger(val) {\n        if (isNaN(val)) {\n            return fail('cannot parse integer');\n        }\n        if (state === 1 /* DICT_STATE */) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 /* ARR_STATE */) {\n            cur.push(val);\n        }\n        else { // ROOT_STATE\n            cur = val;\n        }\n    }\n    function acceptDate(val) {\n        if (state === 1 /* DICT_STATE */) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 /* ARR_STATE */) {\n            cur.push(val);\n        }\n        else { // ROOT_STATE\n            cur = val;\n        }\n    }\n    function acceptData(val) {\n        if (state === 1 /* DICT_STATE */) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 /* ARR_STATE */) {\n            cur.push(val);\n        }\n        else { // ROOT_STATE\n            cur = val;\n        }\n    }\n    function acceptBool(val) {\n        if (state === 1 /* DICT_STATE */) {\n            if (curKey === null) {\n                return fail('missing <key>');\n            }\n            cur[curKey] = val;\n            curKey = null;\n        }\n        else if (state === 2 /* ARR_STATE */) {\n            cur.push(val);\n        }\n        else { // ROOT_STATE\n            cur = val;\n        }\n    }\n    function escapeVal(str) {\n        return str.replace(/&#([0-9]+);/g, function (_, m0) {\n            return String.fromCodePoint(parseInt(m0, 10));\n        }).replace(/&#x([0-9a-f]+);/g, function (_, m0) {\n            return String.fromCodePoint(parseInt(m0, 16));\n        }).replace(/&amp;|&lt;|&gt;|&quot;|&apos;/g, function (_) {\n            switch (_) {\n                case '&amp;': return '&';\n                case '&lt;': return '<';\n                case '&gt;': return '>';\n                case '&quot;': return '\"';\n                case '&apos;': return '\\'';\n            }\n            return _;\n        });\n    }\n    function parseOpenTag() {\n        var r = captureUntil('>');\n        var isClosed = false;\n        if (r.charCodeAt(r.length - 1) === 47 /* SLASH */) {\n            isClosed = true;\n            r = r.substring(0, r.length - 1);\n        }\n        return {\n            name: r.trim(),\n            isClosed: isClosed\n        };\n    }\n    function parseTagValue(tag) {\n        if (tag.isClosed) {\n            return '';\n        }\n        var val = captureUntil('</');\n        advanceUntil('>');\n        return escapeVal(val);\n    }\n    while (pos < len) {\n        skipWhitespace();\n        if (pos >= len) {\n            break;\n        }\n        var chCode = content.charCodeAt(pos);\n        advancePosBy(1);\n        if (chCode !== 60 /* LESS_THAN */) {\n            return fail('expected <');\n        }\n        if (pos >= len) {\n            return fail('unexpected end of input');\n        }\n        var peekChCode = content.charCodeAt(pos);\n        if (peekChCode === 63 /* QUESTION_MARK */) {\n            advancePosBy(1);\n            advanceUntil('?>');\n            continue;\n        }\n        if (peekChCode === 33 /* EXCLAMATION_MARK */) {\n            advancePosBy(1);\n            if (advanceIfStartsWith('--')) {\n                advanceUntil('-->');\n                continue;\n            }\n            advanceUntil('>');\n            continue;\n        }\n        if (peekChCode === 47 /* SLASH */) {\n            advancePosBy(1);\n            skipWhitespace();\n            if (advanceIfStartsWith('plist')) {\n                advanceUntil('>');\n                continue;\n            }\n            if (advanceIfStartsWith('dict')) {\n                advanceUntil('>');\n                leaveDict();\n                continue;\n            }\n            if (advanceIfStartsWith('array')) {\n                advanceUntil('>');\n                leaveArray();\n                continue;\n            }\n            return fail('unexpected closed tag');\n        }\n        var tag = parseOpenTag();\n        switch (tag.name) {\n            case 'dict':\n                enterDict();\n                if (tag.isClosed) {\n                    leaveDict();\n                }\n                continue;\n            case 'array':\n                enterArray();\n                if (tag.isClosed) {\n                    leaveArray();\n                }\n                continue;\n            case 'key':\n                acceptKey(parseTagValue(tag));\n                continue;\n            case 'string':\n                acceptString(parseTagValue(tag));\n                continue;\n            case 'real':\n                acceptReal(parseFloat(parseTagValue(tag)));\n                continue;\n            case 'integer':\n                acceptInteger(parseInt(parseTagValue(tag), 10));\n                continue;\n            case 'date':\n                acceptDate(new Date(parseTagValue(tag)));\n                continue;\n            case 'data':\n                acceptData(parseTagValue(tag));\n                continue;\n            case 'true':\n                parseTagValue(tag);\n                acceptBool(true);\n                continue;\n            case 'false':\n                parseTagValue(tag);\n                acceptBool(false);\n                continue;\n        }\n        if (/^plist/.test(tag.name)) {\n            continue;\n        }\n        return fail('unexpected opened tag ' + tag.name);\n    }\n    return cur;\n}\n//# sourceMappingURL=plist.js.map", "\"use strict\";\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SyncRegistry = void 0;\nvar grammar_1 = require(\"./grammar\");\nvar SyncRegistry = /** @class */ (function () {\n    function SyncRegistry(theme, onigLibPromise) {\n        this._theme = theme;\n        this._grammars = {};\n        this._rawGrammars = {};\n        this._injectionGrammars = {};\n        this._onigLibPromise = onigLibPromise;\n    }\n    SyncRegistry.prototype.dispose = function () {\n        for (var scopeName in this._grammars) {\n            if (this._grammars.hasOwnProperty(scopeName)) {\n                this._grammars[scopeName].dispose();\n            }\n        }\n    };\n    SyncRegistry.prototype.setTheme = function (theme) {\n        var _this = this;\n        this._theme = theme;\n        Object.keys(this._grammars).forEach(function (scopeName) {\n            var grammar = _this._grammars[scopeName];\n            grammar.onDidChangeTheme();\n        });\n    };\n    SyncRegistry.prototype.getColorMap = function () {\n        return this._theme.getColorMap();\n    };\n    /**\n     * Add `grammar` to registry and return a list of referenced scope names\n     */\n    SyncRegistry.prototype.addGrammar = function (grammar, injectionScopeNames) {\n        this._rawGrammars[grammar.scopeName] = grammar;\n        if (injectionScopeNames) {\n            this._injectionGrammars[grammar.scopeName] = injectionScopeNames;\n        }\n    };\n    /**\n     * Lookup a raw grammar.\n     */\n    SyncRegistry.prototype.lookup = function (scopeName) {\n        return this._rawGrammars[scopeName];\n    };\n    /**\n     * Returns the injections for the given grammar\n     */\n    SyncRegistry.prototype.injections = function (targetScope) {\n        return this._injectionGrammars[targetScope];\n    };\n    /**\n     * Get the default theme settings\n     */\n    SyncRegistry.prototype.getDefaults = function () {\n        return this._theme.getDefaults();\n    };\n    /**\n     * Match a scope in the theme.\n     */\n    SyncRegistry.prototype.themeMatch = function (scopeName) {\n        return this._theme.match(scopeName);\n    };\n    /**\n     * Lookup a grammar.\n     */\n    SyncRegistry.prototype.grammarForScopeName = function (scopeName, initialLanguage, embeddedLanguages, tokenTypes) {\n        return __awaiter(this, void 0, void 0, function () {\n            var rawGrammar, _a, _b, _c, _d;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        if (!!this._grammars[scopeName]) return [3 /*break*/, 2];\n                        rawGrammar = this._rawGrammars[scopeName];\n                        if (!rawGrammar) {\n                            return [2 /*return*/, null];\n                        }\n                        _a = this._grammars;\n                        _b = scopeName;\n                        _c = grammar_1.createGrammar;\n                        _d = [scopeName, rawGrammar, initialLanguage, embeddedLanguages, tokenTypes, this];\n                        return [4 /*yield*/, this._onigLibPromise];\n                    case 1:\n                        _a[_b] = _c.apply(void 0, _d.concat([_e.sent()]));\n                        _e.label = 2;\n                    case 2: return [2 /*return*/, this._grammars[scopeName]];\n                }\n            });\n        });\n    };\n    return SyncRegistry;\n}());\nexports.SyncRegistry = SyncRegistry;\n//# sourceMappingURL=registry.js.map", "\"use strict\";\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RuleFactory = exports.BeginWhileRule = exports.BeginEndRule = exports.IncludeOnlyRule = exports.MatchRule = exports.RegExpSourceList = exports.RegExpSource = exports.CaptureRule = exports.Rule = exports.CompiledRule = void 0;\nvar utils_1 = require(\"./utils\");\nvar HAS_BACK_REFERENCES = /\\\\(\\d+)/;\nvar BACK_REFERENCING_END = /\\\\(\\d+)/g;\nvar CompiledRule = /** @class */ (function () {\n    function CompiledRule(onigLib, regExps, rules) {\n        this.debugRegExps = regExps;\n        this.rules = rules;\n        this.scanner = onigLib.createOnigScanner(regExps);\n    }\n    CompiledRule.prototype.dispose = function () {\n        if (typeof this.scanner.dispose === 'function') {\n            this.scanner.dispose();\n        }\n    };\n    return CompiledRule;\n}());\nexports.CompiledRule = CompiledRule;\nvar Rule = /** @class */ (function () {\n    function Rule($location, id, name, contentName) {\n        this.$location = $location;\n        this.id = id;\n        this._name = name || null;\n        this._nameIsCapturing = utils_1.RegexSource.hasCaptures(this._name);\n        this._contentName = contentName || null;\n        this._contentNameIsCapturing = utils_1.RegexSource.hasCaptures(this._contentName);\n    }\n    Object.defineProperty(Rule.prototype, \"debugName\", {\n        get: function () {\n            var location = this.$location ? utils_1.basename(this.$location.filename) + \":\" + this.$location.line : 'unknown';\n            return this.constructor.name + \"#\" + this.id + \" @ \" + location;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Rule.prototype.getName = function (lineText, captureIndices) {\n        if (!this._nameIsCapturing || this._name === null || lineText === null || captureIndices === null) {\n            return this._name;\n        }\n        return utils_1.RegexSource.replaceCaptures(this._name, lineText, captureIndices);\n    };\n    Rule.prototype.getContentName = function (lineText, captureIndices) {\n        if (!this._contentNameIsCapturing || this._contentName === null) {\n            return this._contentName;\n        }\n        return utils_1.RegexSource.replaceCaptures(this._contentName, lineText, captureIndices);\n    };\n    return Rule;\n}());\nexports.Rule = Rule;\nvar CaptureRule = /** @class */ (function (_super) {\n    __extends(CaptureRule, _super);\n    function CaptureRule($location, id, name, contentName, retokenizeCapturedWithRuleId) {\n        var _this = _super.call(this, $location, id, name, contentName) || this;\n        _this.retokenizeCapturedWithRuleId = retokenizeCapturedWithRuleId;\n        return _this;\n    }\n    CaptureRule.prototype.dispose = function () {\n        // nothing to dispose\n    };\n    CaptureRule.prototype.collectPatternsRecursive = function (grammar, out, isFirst) {\n        throw new Error('Not supported!');\n    };\n    CaptureRule.prototype.compile = function (grammar, endRegexSource) {\n        throw new Error('Not supported!');\n    };\n    CaptureRule.prototype.compileAG = function (grammar, endRegexSource, allowA, allowG) {\n        throw new Error('Not supported!');\n    };\n    return CaptureRule;\n}(Rule));\nexports.CaptureRule = CaptureRule;\nvar RegExpSource = /** @class */ (function () {\n    function RegExpSource(regExpSource, ruleId, handleAnchors) {\n        if (handleAnchors === void 0) { handleAnchors = true; }\n        if (handleAnchors) {\n            if (regExpSource) {\n                var len = regExpSource.length;\n                var lastPushedPos = 0;\n                var output = [];\n                var hasAnchor = false;\n                for (var pos = 0; pos < len; pos++) {\n                    var ch = regExpSource.charAt(pos);\n                    if (ch === '\\\\') {\n                        if (pos + 1 < len) {\n                            var nextCh = regExpSource.charAt(pos + 1);\n                            if (nextCh === 'z') {\n                                output.push(regExpSource.substring(lastPushedPos, pos));\n                                output.push('$(?!\\\\n)(?<!\\\\n)');\n                                lastPushedPos = pos + 2;\n                            }\n                            else if (nextCh === 'A' || nextCh === 'G') {\n                                hasAnchor = true;\n                            }\n                            pos++;\n                        }\n                    }\n                }\n                this.hasAnchor = hasAnchor;\n                if (lastPushedPos === 0) {\n                    // No \\z hit\n                    this.source = regExpSource;\n                }\n                else {\n                    output.push(regExpSource.substring(lastPushedPos, len));\n                    this.source = output.join('');\n                }\n            }\n            else {\n                this.hasAnchor = false;\n                this.source = regExpSource;\n            }\n        }\n        else {\n            this.hasAnchor = false;\n            this.source = regExpSource;\n        }\n        if (this.hasAnchor) {\n            this._anchorCache = this._buildAnchorCache();\n        }\n        else {\n            this._anchorCache = null;\n        }\n        this.ruleId = ruleId;\n        this.hasBackReferences = HAS_BACK_REFERENCES.test(this.source);\n        // console.log('input: ' + regExpSource + ' => ' + this.source + ', ' + this.hasAnchor);\n    }\n    RegExpSource.prototype.clone = function () {\n        return new RegExpSource(this.source, this.ruleId, true);\n    };\n    RegExpSource.prototype.setSource = function (newSource) {\n        if (this.source === newSource) {\n            return;\n        }\n        this.source = newSource;\n        if (this.hasAnchor) {\n            this._anchorCache = this._buildAnchorCache();\n        }\n    };\n    RegExpSource.prototype.resolveBackReferences = function (lineText, captureIndices) {\n        var capturedValues = captureIndices.map(function (capture) {\n            return lineText.substring(capture.start, capture.end);\n        });\n        BACK_REFERENCING_END.lastIndex = 0;\n        return this.source.replace(BACK_REFERENCING_END, function (match, g1) {\n            return escapeRegExpCharacters(capturedValues[parseInt(g1, 10)] || '');\n        });\n    };\n    RegExpSource.prototype._buildAnchorCache = function () {\n        var A0_G0_result = [];\n        var A0_G1_result = [];\n        var A1_G0_result = [];\n        var A1_G1_result = [];\n        var pos, len, ch, nextCh;\n        for (pos = 0, len = this.source.length; pos < len; pos++) {\n            ch = this.source.charAt(pos);\n            A0_G0_result[pos] = ch;\n            A0_G1_result[pos] = ch;\n            A1_G0_result[pos] = ch;\n            A1_G1_result[pos] = ch;\n            if (ch === '\\\\') {\n                if (pos + 1 < len) {\n                    nextCh = this.source.charAt(pos + 1);\n                    if (nextCh === 'A') {\n                        A0_G0_result[pos + 1] = '\\uFFFF';\n                        A0_G1_result[pos + 1] = '\\uFFFF';\n                        A1_G0_result[pos + 1] = 'A';\n                        A1_G1_result[pos + 1] = 'A';\n                    }\n                    else if (nextCh === 'G') {\n                        A0_G0_result[pos + 1] = '\\uFFFF';\n                        A0_G1_result[pos + 1] = 'G';\n                        A1_G0_result[pos + 1] = '\\uFFFF';\n                        A1_G1_result[pos + 1] = 'G';\n                    }\n                    else {\n                        A0_G0_result[pos + 1] = nextCh;\n                        A0_G1_result[pos + 1] = nextCh;\n                        A1_G0_result[pos + 1] = nextCh;\n                        A1_G1_result[pos + 1] = nextCh;\n                    }\n                    pos++;\n                }\n            }\n        }\n        return {\n            A0_G0: A0_G0_result.join(''),\n            A0_G1: A0_G1_result.join(''),\n            A1_G0: A1_G0_result.join(''),\n            A1_G1: A1_G1_result.join('')\n        };\n    };\n    RegExpSource.prototype.resolveAnchors = function (allowA, allowG) {\n        if (!this.hasAnchor || !this._anchorCache) {\n            return this.source;\n        }\n        if (allowA) {\n            if (allowG) {\n                return this._anchorCache.A1_G1;\n            }\n            else {\n                return this._anchorCache.A1_G0;\n            }\n        }\n        else {\n            if (allowG) {\n                return this._anchorCache.A0_G1;\n            }\n            else {\n                return this._anchorCache.A0_G0;\n            }\n        }\n    };\n    return RegExpSource;\n}());\nexports.RegExpSource = RegExpSource;\nvar RegExpSourceList = /** @class */ (function () {\n    function RegExpSourceList() {\n        this._items = [];\n        this._hasAnchors = false;\n        this._cached = null;\n        this._anchorCache = {\n            A0_G0: null,\n            A0_G1: null,\n            A1_G0: null,\n            A1_G1: null\n        };\n    }\n    RegExpSourceList.prototype.dispose = function () {\n        this._disposeCaches();\n    };\n    RegExpSourceList.prototype._disposeCaches = function () {\n        if (this._cached) {\n            this._cached.dispose();\n            this._cached = null;\n        }\n        if (this._anchorCache.A0_G0) {\n            this._anchorCache.A0_G0.dispose();\n            this._anchorCache.A0_G0 = null;\n        }\n        if (this._anchorCache.A0_G1) {\n            this._anchorCache.A0_G1.dispose();\n            this._anchorCache.A0_G1 = null;\n        }\n        if (this._anchorCache.A1_G0) {\n            this._anchorCache.A1_G0.dispose();\n            this._anchorCache.A1_G0 = null;\n        }\n        if (this._anchorCache.A1_G1) {\n            this._anchorCache.A1_G1.dispose();\n            this._anchorCache.A1_G1 = null;\n        }\n    };\n    RegExpSourceList.prototype.push = function (item) {\n        this._items.push(item);\n        this._hasAnchors = this._hasAnchors || item.hasAnchor;\n    };\n    RegExpSourceList.prototype.unshift = function (item) {\n        this._items.unshift(item);\n        this._hasAnchors = this._hasAnchors || item.hasAnchor;\n    };\n    RegExpSourceList.prototype.length = function () {\n        return this._items.length;\n    };\n    RegExpSourceList.prototype.setSource = function (index, newSource) {\n        if (this._items[index].source !== newSource) {\n            // bust the cache\n            this._disposeCaches();\n            this._items[index].setSource(newSource);\n        }\n    };\n    RegExpSourceList.prototype.compile = function (onigLib) {\n        if (!this._cached) {\n            var regExps = this._items.map(function (e) { return e.source; });\n            this._cached = new CompiledRule(onigLib, regExps, this._items.map(function (e) { return e.ruleId; }));\n        }\n        return this._cached;\n    };\n    RegExpSourceList.prototype.compileAG = function (onigLib, allowA, allowG) {\n        if (!this._hasAnchors) {\n            return this.compile(onigLib);\n        }\n        else {\n            if (allowA) {\n                if (allowG) {\n                    if (!this._anchorCache.A1_G1) {\n                        this._anchorCache.A1_G1 = this._resolveAnchors(onigLib, allowA, allowG);\n                    }\n                    return this._anchorCache.A1_G1;\n                }\n                else {\n                    if (!this._anchorCache.A1_G0) {\n                        this._anchorCache.A1_G0 = this._resolveAnchors(onigLib, allowA, allowG);\n                    }\n                    return this._anchorCache.A1_G0;\n                }\n            }\n            else {\n                if (allowG) {\n                    if (!this._anchorCache.A0_G1) {\n                        this._anchorCache.A0_G1 = this._resolveAnchors(onigLib, allowA, allowG);\n                    }\n                    return this._anchorCache.A0_G1;\n                }\n                else {\n                    if (!this._anchorCache.A0_G0) {\n                        this._anchorCache.A0_G0 = this._resolveAnchors(onigLib, allowA, allowG);\n                    }\n                    return this._anchorCache.A0_G0;\n                }\n            }\n        }\n    };\n    RegExpSourceList.prototype._resolveAnchors = function (onigLib, allowA, allowG) {\n        var regExps = this._items.map(function (e) { return e.resolveAnchors(allowA, allowG); });\n        return new CompiledRule(onigLib, regExps, this._items.map(function (e) { return e.ruleId; }));\n    };\n    return RegExpSourceList;\n}());\nexports.RegExpSourceList = RegExpSourceList;\nvar MatchRule = /** @class */ (function (_super) {\n    __extends(MatchRule, _super);\n    function MatchRule($location, id, name, match, captures) {\n        var _this = _super.call(this, $location, id, name, null) || this;\n        _this._match = new RegExpSource(match, _this.id);\n        _this.captures = captures;\n        _this._cachedCompiledPatterns = null;\n        return _this;\n    }\n    MatchRule.prototype.dispose = function () {\n        if (this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns.dispose();\n            this._cachedCompiledPatterns = null;\n        }\n    };\n    Object.defineProperty(MatchRule.prototype, \"debugMatchRegExp\", {\n        get: function () {\n            return \"\" + this._match.source;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MatchRule.prototype.collectPatternsRecursive = function (grammar, out, isFirst) {\n        out.push(this._match);\n    };\n    MatchRule.prototype.compile = function (grammar, endRegexSource) {\n        return this._getCachedCompiledPatterns(grammar).compile(grammar);\n    };\n    MatchRule.prototype.compileAG = function (grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n    };\n    MatchRule.prototype._getCachedCompiledPatterns = function (grammar) {\n        if (!this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns = new RegExpSourceList();\n            this.collectPatternsRecursive(grammar, this._cachedCompiledPatterns, true);\n        }\n        return this._cachedCompiledPatterns;\n    };\n    return MatchRule;\n}(Rule));\nexports.MatchRule = MatchRule;\nvar IncludeOnlyRule = /** @class */ (function (_super) {\n    __extends(IncludeOnlyRule, _super);\n    function IncludeOnlyRule($location, id, name, contentName, patterns) {\n        var _this = _super.call(this, $location, id, name, contentName) || this;\n        _this.patterns = patterns.patterns;\n        _this.hasMissingPatterns = patterns.hasMissingPatterns;\n        _this._cachedCompiledPatterns = null;\n        return _this;\n    }\n    IncludeOnlyRule.prototype.dispose = function () {\n        if (this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns.dispose();\n            this._cachedCompiledPatterns = null;\n        }\n    };\n    IncludeOnlyRule.prototype.collectPatternsRecursive = function (grammar, out, isFirst) {\n        var i, len, rule;\n        for (i = 0, len = this.patterns.length; i < len; i++) {\n            rule = grammar.getRule(this.patterns[i]);\n            rule.collectPatternsRecursive(grammar, out, false);\n        }\n    };\n    IncludeOnlyRule.prototype.compile = function (grammar, endRegexSource) {\n        return this._getCachedCompiledPatterns(grammar).compile(grammar);\n    };\n    IncludeOnlyRule.prototype.compileAG = function (grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n    };\n    IncludeOnlyRule.prototype._getCachedCompiledPatterns = function (grammar) {\n        if (!this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns = new RegExpSourceList();\n            this.collectPatternsRecursive(grammar, this._cachedCompiledPatterns, true);\n        }\n        return this._cachedCompiledPatterns;\n    };\n    return IncludeOnlyRule;\n}(Rule));\nexports.IncludeOnlyRule = IncludeOnlyRule;\nfunction escapeRegExpCharacters(value) {\n    return value.replace(/[\\-\\\\\\{\\}\\*\\+\\?\\|\\^\\$\\.\\,\\[\\]\\(\\)\\#\\s]/g, '\\\\$&');\n}\nvar BeginEndRule = /** @class */ (function (_super) {\n    __extends(BeginEndRule, _super);\n    function BeginEndRule($location, id, name, contentName, begin, beginCaptures, end, endCaptures, applyEndPatternLast, patterns) {\n        var _this = _super.call(this, $location, id, name, contentName) || this;\n        _this._begin = new RegExpSource(begin, _this.id);\n        _this.beginCaptures = beginCaptures;\n        _this._end = new RegExpSource(end ? end : '\\uFFFF', -1);\n        _this.endHasBackReferences = _this._end.hasBackReferences;\n        _this.endCaptures = endCaptures;\n        _this.applyEndPatternLast = applyEndPatternLast || false;\n        _this.patterns = patterns.patterns;\n        _this.hasMissingPatterns = patterns.hasMissingPatterns;\n        _this._cachedCompiledPatterns = null;\n        return _this;\n    }\n    BeginEndRule.prototype.dispose = function () {\n        if (this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns.dispose();\n            this._cachedCompiledPatterns = null;\n        }\n    };\n    Object.defineProperty(BeginEndRule.prototype, \"debugBeginRegExp\", {\n        get: function () {\n            return \"\" + this._begin.source;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BeginEndRule.prototype, \"debugEndRegExp\", {\n        get: function () {\n            return \"\" + this._end.source;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BeginEndRule.prototype.getEndWithResolvedBackReferences = function (lineText, captureIndices) {\n        return this._end.resolveBackReferences(lineText, captureIndices);\n    };\n    BeginEndRule.prototype.collectPatternsRecursive = function (grammar, out, isFirst) {\n        if (isFirst) {\n            var i = void 0, len = void 0, rule = void 0;\n            for (i = 0, len = this.patterns.length; i < len; i++) {\n                rule = grammar.getRule(this.patterns[i]);\n                rule.collectPatternsRecursive(grammar, out, false);\n            }\n        }\n        else {\n            out.push(this._begin);\n        }\n    };\n    BeginEndRule.prototype.compile = function (grammar, endRegexSource) {\n        return this._getCachedCompiledPatterns(grammar, endRegexSource).compile(grammar);\n    };\n    BeginEndRule.prototype.compileAG = function (grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledPatterns(grammar, endRegexSource).compileAG(grammar, allowA, allowG);\n    };\n    BeginEndRule.prototype._getCachedCompiledPatterns = function (grammar, endRegexSource) {\n        if (!this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns = new RegExpSourceList();\n            this.collectPatternsRecursive(grammar, this._cachedCompiledPatterns, true);\n            if (this.applyEndPatternLast) {\n                this._cachedCompiledPatterns.push(this._end.hasBackReferences ? this._end.clone() : this._end);\n            }\n            else {\n                this._cachedCompiledPatterns.unshift(this._end.hasBackReferences ? this._end.clone() : this._end);\n            }\n        }\n        if (this._end.hasBackReferences) {\n            if (this.applyEndPatternLast) {\n                this._cachedCompiledPatterns.setSource(this._cachedCompiledPatterns.length() - 1, endRegexSource);\n            }\n            else {\n                this._cachedCompiledPatterns.setSource(0, endRegexSource);\n            }\n        }\n        return this._cachedCompiledPatterns;\n    };\n    return BeginEndRule;\n}(Rule));\nexports.BeginEndRule = BeginEndRule;\nvar BeginWhileRule = /** @class */ (function (_super) {\n    __extends(BeginWhileRule, _super);\n    function BeginWhileRule($location, id, name, contentName, begin, beginCaptures, _while, whileCaptures, patterns) {\n        var _this = _super.call(this, $location, id, name, contentName) || this;\n        _this._begin = new RegExpSource(begin, _this.id);\n        _this.beginCaptures = beginCaptures;\n        _this.whileCaptures = whileCaptures;\n        _this._while = new RegExpSource(_while, -2);\n        _this.whileHasBackReferences = _this._while.hasBackReferences;\n        _this.patterns = patterns.patterns;\n        _this.hasMissingPatterns = patterns.hasMissingPatterns;\n        _this._cachedCompiledPatterns = null;\n        _this._cachedCompiledWhilePatterns = null;\n        return _this;\n    }\n    BeginWhileRule.prototype.dispose = function () {\n        if (this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns.dispose();\n            this._cachedCompiledPatterns = null;\n        }\n        if (this._cachedCompiledWhilePatterns) {\n            this._cachedCompiledWhilePatterns.dispose();\n            this._cachedCompiledWhilePatterns = null;\n        }\n    };\n    Object.defineProperty(BeginWhileRule.prototype, \"debugBeginRegExp\", {\n        get: function () {\n            return \"\" + this._begin.source;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BeginWhileRule.prototype, \"debugWhileRegExp\", {\n        get: function () {\n            return \"\" + this._while.source;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BeginWhileRule.prototype.getWhileWithResolvedBackReferences = function (lineText, captureIndices) {\n        return this._while.resolveBackReferences(lineText, captureIndices);\n    };\n    BeginWhileRule.prototype.collectPatternsRecursive = function (grammar, out, isFirst) {\n        if (isFirst) {\n            var i = void 0, len = void 0, rule = void 0;\n            for (i = 0, len = this.patterns.length; i < len; i++) {\n                rule = grammar.getRule(this.patterns[i]);\n                rule.collectPatternsRecursive(grammar, out, false);\n            }\n        }\n        else {\n            out.push(this._begin);\n        }\n    };\n    BeginWhileRule.prototype.compile = function (grammar, endRegexSource) {\n        return this._getCachedCompiledPatterns(grammar).compile(grammar);\n    };\n    BeginWhileRule.prototype.compileAG = function (grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledPatterns(grammar).compileAG(grammar, allowA, allowG);\n    };\n    BeginWhileRule.prototype._getCachedCompiledPatterns = function (grammar) {\n        if (!this._cachedCompiledPatterns) {\n            this._cachedCompiledPatterns = new RegExpSourceList();\n            this.collectPatternsRecursive(grammar, this._cachedCompiledPatterns, true);\n        }\n        return this._cachedCompiledPatterns;\n    };\n    BeginWhileRule.prototype.compileWhile = function (grammar, endRegexSource) {\n        return this._getCachedCompiledWhilePatterns(grammar, endRegexSource).compile(grammar);\n    };\n    BeginWhileRule.prototype.compileWhileAG = function (grammar, endRegexSource, allowA, allowG) {\n        return this._getCachedCompiledWhilePatterns(grammar, endRegexSource).compileAG(grammar, allowA, allowG);\n    };\n    BeginWhileRule.prototype._getCachedCompiledWhilePatterns = function (grammar, endRegexSource) {\n        if (!this._cachedCompiledWhilePatterns) {\n            this._cachedCompiledWhilePatterns = new RegExpSourceList();\n            this._cachedCompiledWhilePatterns.push(this._while.hasBackReferences ? this._while.clone() : this._while);\n        }\n        if (this._while.hasBackReferences) {\n            this._cachedCompiledWhilePatterns.setSource(0, endRegexSource ? endRegexSource : '\\uFFFF');\n        }\n        return this._cachedCompiledWhilePatterns;\n    };\n    return BeginWhileRule;\n}(Rule));\nexports.BeginWhileRule = BeginWhileRule;\nvar RuleFactory = /** @class */ (function () {\n    function RuleFactory() {\n    }\n    RuleFactory.createCaptureRule = function (helper, $location, name, contentName, retokenizeCapturedWithRuleId) {\n        return helper.registerRule(function (id) {\n            return new CaptureRule($location, id, name, contentName, retokenizeCapturedWithRuleId);\n        });\n    };\n    RuleFactory.getCompiledRuleId = function (desc, helper, repository) {\n        if (!desc.id) {\n            helper.registerRule(function (id) {\n                desc.id = id;\n                if (desc.match) {\n                    return new MatchRule(desc.$vscodeTextmateLocation, desc.id, desc.name, desc.match, RuleFactory._compileCaptures(desc.captures, helper, repository));\n                }\n                if (typeof desc.begin === 'undefined') {\n                    if (desc.repository) {\n                        repository = utils_1.mergeObjects({}, repository, desc.repository);\n                    }\n                    var patterns = desc.patterns;\n                    if (typeof patterns === 'undefined' && desc.include) {\n                        patterns = [{ include: desc.include }];\n                    }\n                    return new IncludeOnlyRule(desc.$vscodeTextmateLocation, desc.id, desc.name, desc.contentName, RuleFactory._compilePatterns(patterns, helper, repository));\n                }\n                if (desc.while) {\n                    return new BeginWhileRule(desc.$vscodeTextmateLocation, desc.id, desc.name, desc.contentName, desc.begin, RuleFactory._compileCaptures(desc.beginCaptures || desc.captures, helper, repository), desc.while, RuleFactory._compileCaptures(desc.whileCaptures || desc.captures, helper, repository), RuleFactory._compilePatterns(desc.patterns, helper, repository));\n                }\n                return new BeginEndRule(desc.$vscodeTextmateLocation, desc.id, desc.name, desc.contentName, desc.begin, RuleFactory._compileCaptures(desc.beginCaptures || desc.captures, helper, repository), desc.end, RuleFactory._compileCaptures(desc.endCaptures || desc.captures, helper, repository), desc.applyEndPatternLast, RuleFactory._compilePatterns(desc.patterns, helper, repository));\n            });\n        }\n        return desc.id;\n    };\n    RuleFactory._compileCaptures = function (captures, helper, repository) {\n        var r = [];\n        if (captures) {\n            // Find the maximum capture id\n            var maximumCaptureId = 0;\n            for (var captureId in captures) {\n                if (captureId === '$vscodeTextmateLocation') {\n                    continue;\n                }\n                var numericCaptureId = parseInt(captureId, 10);\n                if (numericCaptureId > maximumCaptureId) {\n                    maximumCaptureId = numericCaptureId;\n                }\n            }\n            // Initialize result\n            for (var i = 0; i <= maximumCaptureId; i++) {\n                r[i] = null;\n            }\n            // Fill out result\n            for (var captureId in captures) {\n                if (captureId === '$vscodeTextmateLocation') {\n                    continue;\n                }\n                var numericCaptureId = parseInt(captureId, 10);\n                var retokenizeCapturedWithRuleId = 0;\n                if (captures[captureId].patterns) {\n                    retokenizeCapturedWithRuleId = RuleFactory.getCompiledRuleId(captures[captureId], helper, repository);\n                }\n                r[numericCaptureId] = RuleFactory.createCaptureRule(helper, captures[captureId].$vscodeTextmateLocation, captures[captureId].name, captures[captureId].contentName, retokenizeCapturedWithRuleId);\n            }\n        }\n        return r;\n    };\n    RuleFactory._compilePatterns = function (patterns, helper, repository) {\n        var r = [];\n        if (patterns) {\n            for (var i = 0, len = patterns.length; i < len; i++) {\n                var pattern = patterns[i];\n                var patternId = -1;\n                if (pattern.include) {\n                    if (pattern.include.charAt(0) === '#') {\n                        // Local include found in `repository`\n                        var localIncludedRule = repository[pattern.include.substr(1)];\n                        if (localIncludedRule) {\n                            patternId = RuleFactory.getCompiledRuleId(localIncludedRule, helper, repository);\n                        }\n                        else {\n                            // console.warn('CANNOT find rule for scopeName: ' + pattern.include + ', I am: ', repository['$base'].name);\n                        }\n                    }\n                    else if (pattern.include === '$base' || pattern.include === '$self') {\n                        // Special include also found in `repository`\n                        patternId = RuleFactory.getCompiledRuleId(repository[pattern.include], helper, repository);\n                    }\n                    else {\n                        var externalGrammarName = null;\n                        var externalGrammarInclude = null;\n                        var sharpIndex = pattern.include.indexOf('#');\n                        if (sharpIndex >= 0) {\n                            externalGrammarName = pattern.include.substring(0, sharpIndex);\n                            externalGrammarInclude = pattern.include.substring(sharpIndex + 1);\n                        }\n                        else {\n                            externalGrammarName = pattern.include;\n                        }\n                        // External include\n                        var externalGrammar = helper.getExternalGrammar(externalGrammarName, repository);\n                        if (externalGrammar) {\n                            if (externalGrammarInclude) {\n                                var externalIncludedRule = externalGrammar.repository[externalGrammarInclude];\n                                if (externalIncludedRule) {\n                                    patternId = RuleFactory.getCompiledRuleId(externalIncludedRule, helper, externalGrammar.repository);\n                                }\n                                else {\n                                    // console.warn('CANNOT find rule for scopeName: ' + pattern.include + ', I am: ', repository['$base'].name);\n                                }\n                            }\n                            else {\n                                patternId = RuleFactory.getCompiledRuleId(externalGrammar.repository.$self, helper, externalGrammar.repository);\n                            }\n                        }\n                        else {\n                            // console.warn('CANNOT find grammar for scopeName: ' + pattern.include + ', I am: ', repository['$base'].name);\n                        }\n                    }\n                }\n                else {\n                    patternId = RuleFactory.getCompiledRuleId(pattern, helper, repository);\n                }\n                if (patternId !== -1) {\n                    var rule = helper.getRule(patternId);\n                    var skipRule = false;\n                    if (rule instanceof IncludeOnlyRule || rule instanceof BeginEndRule || rule instanceof BeginWhileRule) {\n                        if (rule.hasMissingPatterns && rule.patterns.length === 0) {\n                            skipRule = true;\n                        }\n                    }\n                    if (skipRule) {\n                        // console.log('REMOVING RULE ENTIRELY DUE TO EMPTY PATTERNS THAT ARE MISSING');\n                        continue;\n                    }\n                    r.push(patternId);\n                }\n            }\n        }\n        return {\n            patterns: r,\n            hasMissingPatterns: ((patterns ? patterns.length : 0) !== r.length)\n        };\n    };\n    return RuleFactory;\n}());\nexports.RuleFactory = RuleFactory;\n//# sourceMappingURL=rule.js.map", "\"use strict\";\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ThemeTrieElement = exports.ThemeTrieElementRule = exports.strArrCmp = exports.strcmp = exports.Theme = exports.ColorMap = exports.parseTheme = exports.ParsedThemeRule = void 0;\nvar ParsedThemeRule = /** @class */ (function () {\n    function ParsedThemeRule(scope, parentScopes, index, fontStyle, foreground, background) {\n        this.scope = scope;\n        this.parentScopes = parentScopes;\n        this.index = index;\n        this.fontStyle = fontStyle;\n        this.foreground = foreground;\n        this.background = background;\n    }\n    return ParsedThemeRule;\n}());\nexports.ParsedThemeRule = ParsedThemeRule;\nfunction isValidHexColor(hex) {\n    if (/^#[0-9a-f]{6}$/i.test(hex)) {\n        // #rrggbb\n        return true;\n    }\n    if (/^#[0-9a-f]{8}$/i.test(hex)) {\n        // #rrggbbaa\n        return true;\n    }\n    if (/^#[0-9a-f]{3}$/i.test(hex)) {\n        // #rgb\n        return true;\n    }\n    if (/^#[0-9a-f]{4}$/i.test(hex)) {\n        // #rgba\n        return true;\n    }\n    return false;\n}\n/**\n * Parse a raw theme into rules.\n */\nfunction parseTheme(source) {\n    if (!source) {\n        return [];\n    }\n    if (!source.settings || !Array.isArray(source.settings)) {\n        return [];\n    }\n    var settings = source.settings;\n    var result = [], resultLen = 0;\n    for (var i = 0, len = settings.length; i < len; i++) {\n        var entry = settings[i];\n        if (!entry.settings) {\n            continue;\n        }\n        var scopes = void 0;\n        if (typeof entry.scope === 'string') {\n            var _scope = entry.scope;\n            // remove leading commas\n            _scope = _scope.replace(/^[,]+/, '');\n            // remove trailing commans\n            _scope = _scope.replace(/[,]+$/, '');\n            scopes = _scope.split(',');\n        }\n        else if (Array.isArray(entry.scope)) {\n            scopes = entry.scope;\n        }\n        else {\n            scopes = [''];\n        }\n        var fontStyle = -1 /* NotSet */;\n        if (typeof entry.settings.fontStyle === 'string') {\n            fontStyle = 0 /* None */;\n            var segments = entry.settings.fontStyle.split(' ');\n            for (var j = 0, lenJ = segments.length; j < lenJ; j++) {\n                var segment = segments[j];\n                switch (segment) {\n                    case 'italic':\n                        fontStyle = fontStyle | 1 /* Italic */;\n                        break;\n                    case 'bold':\n                        fontStyle = fontStyle | 2 /* Bold */;\n                        break;\n                    case 'underline':\n                        fontStyle = fontStyle | 4 /* Underline */;\n                        break;\n                    case 'strikethrough':\n                        fontStyle = fontStyle | 8 /* Strikethrough */;\n                        break;\n                }\n            }\n        }\n        var foreground = null;\n        if (typeof entry.settings.foreground === 'string' && isValidHexColor(entry.settings.foreground)) {\n            foreground = entry.settings.foreground;\n        }\n        var background = null;\n        if (typeof entry.settings.background === 'string' && isValidHexColor(entry.settings.background)) {\n            background = entry.settings.background;\n        }\n        for (var j = 0, lenJ = scopes.length; j < lenJ; j++) {\n            var _scope = scopes[j].trim();\n            var segments = _scope.split(' ');\n            var scope = segments[segments.length - 1];\n            var parentScopes = null;\n            if (segments.length > 1) {\n                parentScopes = segments.slice(0, segments.length - 1);\n                parentScopes.reverse();\n            }\n            result[resultLen++] = new ParsedThemeRule(scope, parentScopes, i, fontStyle, foreground, background);\n        }\n    }\n    return result;\n}\nexports.parseTheme = parseTheme;\n/**\n * Resolve rules (i.e. inheritance).\n */\nfunction resolveParsedThemeRules(parsedThemeRules, _colorMap) {\n    // Sort rules lexicographically, and then by index if necessary\n    parsedThemeRules.sort(function (a, b) {\n        var r = strcmp(a.scope, b.scope);\n        if (r !== 0) {\n            return r;\n        }\n        r = strArrCmp(a.parentScopes, b.parentScopes);\n        if (r !== 0) {\n            return r;\n        }\n        return a.index - b.index;\n    });\n    // Determine defaults\n    var defaultFontStyle = 0 /* None */;\n    var defaultForeground = '#000000';\n    var defaultBackground = '#ffffff';\n    while (parsedThemeRules.length >= 1 && parsedThemeRules[0].scope === '') {\n        var incomingDefaults = parsedThemeRules.shift();\n        if (incomingDefaults.fontStyle !== -1 /* NotSet */) {\n            defaultFontStyle = incomingDefaults.fontStyle;\n        }\n        if (incomingDefaults.foreground !== null) {\n            defaultForeground = incomingDefaults.foreground;\n        }\n        if (incomingDefaults.background !== null) {\n            defaultBackground = incomingDefaults.background;\n        }\n    }\n    var colorMap = new ColorMap(_colorMap);\n    var defaults = new ThemeTrieElementRule(0, null, defaultFontStyle, colorMap.getId(defaultForeground), colorMap.getId(defaultBackground));\n    var root = new ThemeTrieElement(new ThemeTrieElementRule(0, null, -1 /* NotSet */, 0, 0), []);\n    for (var i = 0, len = parsedThemeRules.length; i < len; i++) {\n        var rule = parsedThemeRules[i];\n        root.insert(0, rule.scope, rule.parentScopes, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n    }\n    return new Theme(colorMap, defaults, root);\n}\nvar ColorMap = /** @class */ (function () {\n    function ColorMap(_colorMap) {\n        this._lastColorId = 0;\n        this._id2color = [];\n        this._color2id = Object.create(null);\n        if (Array.isArray(_colorMap)) {\n            this._isFrozen = true;\n            for (var i = 0, len = _colorMap.length; i < len; i++) {\n                this._color2id[_colorMap[i]] = i;\n                this._id2color[i] = _colorMap[i];\n            }\n        }\n        else {\n            this._isFrozen = false;\n        }\n    }\n    ColorMap.prototype.getId = function (color) {\n        if (color === null) {\n            return 0;\n        }\n        color = color.toUpperCase();\n        var value = this._color2id[color];\n        if (value) {\n            return value;\n        }\n        if (this._isFrozen) {\n            throw new Error(\"Missing color in color map - \" + color);\n        }\n        value = ++this._lastColorId;\n        this._color2id[color] = value;\n        this._id2color[value] = color;\n        return value;\n    };\n    ColorMap.prototype.getColorMap = function () {\n        return this._id2color.slice(0);\n    };\n    return ColorMap;\n}());\nexports.ColorMap = ColorMap;\nvar Theme = /** @class */ (function () {\n    function Theme(colorMap, defaults, root) {\n        this._colorMap = colorMap;\n        this._root = root;\n        this._defaults = defaults;\n        this._cache = {};\n    }\n    Theme.createFromRawTheme = function (source, colorMap) {\n        return this.createFromParsedTheme(parseTheme(source), colorMap);\n    };\n    Theme.createFromParsedTheme = function (source, colorMap) {\n        return resolveParsedThemeRules(source, colorMap);\n    };\n    Theme.prototype.getColorMap = function () {\n        return this._colorMap.getColorMap();\n    };\n    Theme.prototype.getDefaults = function () {\n        return this._defaults;\n    };\n    Theme.prototype.match = function (scopeName) {\n        if (!this._cache.hasOwnProperty(scopeName)) {\n            this._cache[scopeName] = this._root.match(scopeName);\n        }\n        return this._cache[scopeName];\n    };\n    return Theme;\n}());\nexports.Theme = Theme;\nfunction strcmp(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\nexports.strcmp = strcmp;\nfunction strArrCmp(a, b) {\n    if (a === null && b === null) {\n        return 0;\n    }\n    if (!a) {\n        return -1;\n    }\n    if (!b) {\n        return 1;\n    }\n    var len1 = a.length;\n    var len2 = b.length;\n    if (len1 === len2) {\n        for (var i = 0; i < len1; i++) {\n            var res = strcmp(a[i], b[i]);\n            if (res !== 0) {\n                return res;\n            }\n        }\n        return 0;\n    }\n    return len1 - len2;\n}\nexports.strArrCmp = strArrCmp;\nvar ThemeTrieElementRule = /** @class */ (function () {\n    function ThemeTrieElementRule(scopeDepth, parentScopes, fontStyle, foreground, background) {\n        this.scopeDepth = scopeDepth;\n        this.parentScopes = parentScopes;\n        this.fontStyle = fontStyle;\n        this.foreground = foreground;\n        this.background = background;\n    }\n    ThemeTrieElementRule.prototype.clone = function () {\n        return new ThemeTrieElementRule(this.scopeDepth, this.parentScopes, this.fontStyle, this.foreground, this.background);\n    };\n    ThemeTrieElementRule.cloneArr = function (arr) {\n        var r = [];\n        for (var i = 0, len = arr.length; i < len; i++) {\n            r[i] = arr[i].clone();\n        }\n        return r;\n    };\n    ThemeTrieElementRule.prototype.acceptOverwrite = function (scopeDepth, fontStyle, foreground, background) {\n        if (this.scopeDepth > scopeDepth) {\n            console.log('how did this happen?');\n        }\n        else {\n            this.scopeDepth = scopeDepth;\n        }\n        // console.log('TODO -> my depth: ' + this.scopeDepth + ', overwriting depth: ' + scopeDepth);\n        if (fontStyle !== -1 /* NotSet */) {\n            this.fontStyle = fontStyle;\n        }\n        if (foreground !== 0) {\n            this.foreground = foreground;\n        }\n        if (background !== 0) {\n            this.background = background;\n        }\n    };\n    return ThemeTrieElementRule;\n}());\nexports.ThemeTrieElementRule = ThemeTrieElementRule;\nvar ThemeTrieElement = /** @class */ (function () {\n    function ThemeTrieElement(mainRule, rulesWithParentScopes, children) {\n        if (rulesWithParentScopes === void 0) { rulesWithParentScopes = []; }\n        if (children === void 0) { children = {}; }\n        this._mainRule = mainRule;\n        this._rulesWithParentScopes = rulesWithParentScopes;\n        this._children = children;\n    }\n    ThemeTrieElement._sortBySpecificity = function (arr) {\n        if (arr.length === 1) {\n            return arr;\n        }\n        arr.sort(this._cmpBySpecificity);\n        return arr;\n    };\n    ThemeTrieElement._cmpBySpecificity = function (a, b) {\n        if (a.scopeDepth === b.scopeDepth) {\n            var aParentScopes = a.parentScopes;\n            var bParentScopes = b.parentScopes;\n            var aParentScopesLen = aParentScopes === null ? 0 : aParentScopes.length;\n            var bParentScopesLen = bParentScopes === null ? 0 : bParentScopes.length;\n            if (aParentScopesLen === bParentScopesLen) {\n                for (var i = 0; i < aParentScopesLen; i++) {\n                    var aLen = aParentScopes[i].length;\n                    var bLen = bParentScopes[i].length;\n                    if (aLen !== bLen) {\n                        return bLen - aLen;\n                    }\n                }\n            }\n            return bParentScopesLen - aParentScopesLen;\n        }\n        return b.scopeDepth - a.scopeDepth;\n    };\n    ThemeTrieElement.prototype.match = function (scope) {\n        if (scope === '') {\n            return ThemeTrieElement._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));\n        }\n        var dotIndex = scope.indexOf('.');\n        var head;\n        var tail;\n        if (dotIndex === -1) {\n            head = scope;\n            tail = '';\n        }\n        else {\n            head = scope.substring(0, dotIndex);\n            tail = scope.substring(dotIndex + 1);\n        }\n        if (this._children.hasOwnProperty(head)) {\n            return this._children[head].match(tail);\n        }\n        return ThemeTrieElement._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));\n    };\n    ThemeTrieElement.prototype.insert = function (scopeDepth, scope, parentScopes, fontStyle, foreground, background) {\n        if (scope === '') {\n            this._doInsertHere(scopeDepth, parentScopes, fontStyle, foreground, background);\n            return;\n        }\n        var dotIndex = scope.indexOf('.');\n        var head;\n        var tail;\n        if (dotIndex === -1) {\n            head = scope;\n            tail = '';\n        }\n        else {\n            head = scope.substring(0, dotIndex);\n            tail = scope.substring(dotIndex + 1);\n        }\n        var child;\n        if (this._children.hasOwnProperty(head)) {\n            child = this._children[head];\n        }\n        else {\n            child = new ThemeTrieElement(this._mainRule.clone(), ThemeTrieElementRule.cloneArr(this._rulesWithParentScopes));\n            this._children[head] = child;\n        }\n        child.insert(scopeDepth + 1, tail, parentScopes, fontStyle, foreground, background);\n    };\n    ThemeTrieElement.prototype._doInsertHere = function (scopeDepth, parentScopes, fontStyle, foreground, background) {\n        if (parentScopes === null) {\n            // Merge into the main rule\n            this._mainRule.acceptOverwrite(scopeDepth, fontStyle, foreground, background);\n            return;\n        }\n        // Try to merge into existing rule\n        for (var i = 0, len = this._rulesWithParentScopes.length; i < len; i++) {\n            var rule = this._rulesWithParentScopes[i];\n            if (strArrCmp(rule.parentScopes, parentScopes) === 0) {\n                // bingo! => we get to merge this into an existing one\n                rule.acceptOverwrite(scopeDepth, fontStyle, foreground, background);\n                return;\n            }\n        }\n        // Must add a new rule\n        // Inherit from main rule\n        if (fontStyle === -1 /* NotSet */) {\n            fontStyle = this._mainRule.fontStyle;\n        }\n        if (foreground === 0) {\n            foreground = this._mainRule.foreground;\n        }\n        if (background === 0) {\n            background = this._mainRule.background;\n        }\n        this._rulesWithParentScopes.push(new ThemeTrieElementRule(scopeDepth, parentScopes, fontStyle, foreground, background));\n    };\n    return ThemeTrieElement;\n}());\nexports.ThemeTrieElement = ThemeTrieElement;\n//# sourceMappingURL=theme.js.map", "\"use strict\";\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map", "\"use strict\";\n/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RegexSource = exports.basename = exports.mergeObjects = exports.clone = void 0;\nfunction clone(something) {\n    return doClone(something);\n}\nexports.clone = clone;\nfunction doClone(something) {\n    if (Array.isArray(something)) {\n        return cloneArray(something);\n    }\n    if (typeof something === 'object') {\n        return cloneObj(something);\n    }\n    return something;\n}\nfunction cloneArray(arr) {\n    var r = [];\n    for (var i = 0, len = arr.length; i < len; i++) {\n        r[i] = doClone(arr[i]);\n    }\n    return r;\n}\nfunction cloneObj(obj) {\n    var r = {};\n    for (var key in obj) {\n        r[key] = doClone(obj[key]);\n    }\n    return r;\n}\nfunction mergeObjects(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    sources.forEach(function (source) {\n        for (var key in source) {\n            target[key] = source[key];\n        }\n    });\n    return target;\n}\nexports.mergeObjects = mergeObjects;\nfunction basename(path) {\n    var idx = ~path.lastIndexOf('/') || ~path.lastIndexOf('\\\\');\n    if (idx === 0) {\n        return path;\n    }\n    else if (~idx === path.length - 1) {\n        return basename(path.substring(0, path.length - 1));\n    }\n    else {\n        return path.substr(~idx + 1);\n    }\n}\nexports.basename = basename;\nvar CAPTURING_REGEX_SOURCE = /\\$(\\d+)|\\${(\\d+):\\/(downcase|upcase)}/g;\nvar RegexSource = /** @class */ (function () {\n    function RegexSource() {\n    }\n    RegexSource.hasCaptures = function (regexSource) {\n        if (regexSource === null) {\n            return false;\n        }\n        CAPTURING_REGEX_SOURCE.lastIndex = 0;\n        return CAPTURING_REGEX_SOURCE.test(regexSource);\n    };\n    RegexSource.replaceCaptures = function (regexSource, captureSource, captureIndices) {\n        return regexSource.replace(CAPTURING_REGEX_SOURCE, function (match, index, commandIndex, command) {\n            var capture = captureIndices[parseInt(index || commandIndex, 10)];\n            if (capture) {\n                var result = captureSource.substring(capture.start, capture.end);\n                // Remove leading dots that would make the selector invalid\n                while (result[0] === '.') {\n                    result = result.substring(1);\n                }\n                switch (command) {\n                    case 'downcase':\n                        return result.toLowerCase();\n                    case 'upcase':\n                        return result.toUpperCase();\n                    default:\n                        return result;\n                }\n            }\n            else {\n                return match;\n            }\n        });\n    };\n    return RegexSource;\n}());\nexports.RegexSource = RegexSource;\n//# sourceMappingURL=utils.js.map", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(787);\n", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar vscodeOniguruma = require('vscode-oniguruma');\nvar vscodeTextmate = require('vscode-textmate');\n\nconst themes = [\n  \"css-variables\",\n  \"dark-plus\",\n  \"dracula-soft\",\n  \"dracula\",\n  \"github-dark-dimmed\",\n  \"github-dark\",\n  \"github-light\",\n  \"hc_light\",\n  \"light-plus\",\n  \"material-darker\",\n  \"material-default\",\n  \"material-lighter\",\n  \"material-ocean\",\n  \"material-palenight\",\n  \"min-dark\",\n  \"min-light\",\n  \"monokai\",\n  \"nord\",\n  \"one-dark-pro\",\n  \"poimandres\",\n  \"rose-pine-dawn\",\n  \"rose-pine-moon\",\n  \"rose-pine\",\n  \"slack-dark\",\n  \"slack-ochin\",\n  \"solarized-dark\",\n  \"solarized-light\",\n  \"vitesse-dark\",\n  \"vitesse-light\"\n];\n\nconst languages = [\n  {\n    id: \"abap\",\n    scopeName: \"source.abap\",\n    path: \"abap.tmLanguage.json\",\n    samplePath: \"abap.sample\"\n  },\n  {\n    id: \"actionscript-3\",\n    scopeName: \"source.actionscript.3\",\n    path: \"actionscript-3.tmLanguage.json\",\n    samplePath: \"actionscript-3.sample\"\n  },\n  {\n    id: \"ada\",\n    scopeName: \"source.ada\",\n    path: \"ada.tmLanguage.json\",\n    samplePath: \"ada.sample\"\n  },\n  {\n    id: \"apache\",\n    scopeName: \"source.apacheconf\",\n    path: \"apache.tmLanguage.json\"\n  },\n  {\n    id: \"apex\",\n    scopeName: \"source.apex\",\n    path: \"apex.tmLanguage.json\",\n    samplePath: \"apex.sample\"\n  },\n  {\n    id: \"apl\",\n    scopeName: \"source.apl\",\n    path: \"apl.tmLanguage.json\",\n    embeddedLangs: [\"html\", \"xml\", \"css\", \"javascript\", \"json\"]\n  },\n  {\n    id: \"applescript\",\n    scopeName: \"source.applescript\",\n    path: \"applescript.tmLanguage.json\",\n    samplePath: \"applescript.sample\"\n  },\n  {\n    id: \"asm\",\n    scopeName: \"source.asm.x86_64\",\n    path: \"asm.tmLanguage.json\",\n    samplePath: \"asm.sample\"\n  },\n  {\n    id: \"astro\",\n    scopeName: \"source.astro\",\n    path: \"astro.tmLanguage.json\",\n    samplePath: \"astro.sample\",\n    embeddedLangs: [\"json\", \"javascript\", \"typescript\", \"tsx\", \"css\", \"less\", \"sass\", \"scss\", \"stylus\"]\n  },\n  {\n    id: \"awk\",\n    scopeName: \"source.awk\",\n    path: \"awk.tmLanguage.json\",\n    samplePath: \"awk.sample\"\n  },\n  {\n    id: \"ballerina\",\n    scopeName: \"source.ballerina\",\n    path: \"ballerina.tmLanguage.json\",\n    samplePath: \"ballerina.sample\"\n  },\n  {\n    id: \"bat\",\n    scopeName: \"source.batchfile\",\n    path: \"bat.tmLanguage.json\",\n    samplePath: \"bat.sample\",\n    aliases: [\"batch\"]\n  },\n  {\n    id: \"berry\",\n    scopeName: \"source.berry\",\n    path: \"berry.tmLanguage.json\",\n    samplePath: \"berry.sample\",\n    aliases: [\"be\"]\n  },\n  {\n    id: \"bibtex\",\n    scopeName: \"text.bibtex\",\n    path: \"bibtex.tmLanguage.json\"\n  },\n  {\n    id: \"bicep\",\n    scopeName: \"source.bicep\",\n    path: \"bicep.tmLanguage.json\",\n    samplePath: \"bicep.sample\"\n  },\n  {\n    id: \"blade\",\n    scopeName: \"text.html.php.blade\",\n    path: \"blade.tmLanguage.json\",\n    samplePath: \"blade.sample\",\n    embeddedLangs: [\"html\", \"xml\", \"sql\", \"javascript\", \"json\", \"css\"]\n  },\n  {\n    id: \"c\",\n    scopeName: \"source.c\",\n    path: \"c.tmLanguage.json\",\n    samplePath: \"c.sample\"\n  },\n  {\n    id: \"cadence\",\n    scopeName: \"source.cadence\",\n    path: \"cadence.tmLanguage.json\",\n    samplePath: \"cadence.sample\",\n    aliases: [\"cdc\"]\n  },\n  {\n    id: \"clarity\",\n    scopeName: \"source.clar\",\n    path: \"clarity.tmLanguage.json\",\n    samplePath: \"clarity.sample\"\n  },\n  {\n    id: \"clojure\",\n    scopeName: \"source.clojure\",\n    path: \"clojure.tmLanguage.json\",\n    samplePath: \"clojure.sample\",\n    aliases: [\"clj\"]\n  },\n  {\n    id: \"cmake\",\n    scopeName: \"source.cmake\",\n    path: \"cmake.tmLanguage.json\",\n    samplePath: \"cmake.sample\"\n  },\n  {\n    id: \"cobol\",\n    scopeName: \"source.cobol\",\n    path: \"cobol.tmLanguage.json\",\n    samplePath: \"cobol.sample\",\n    embeddedLangs: [\"sql\", \"html\", \"java\"]\n  },\n  {\n    id: \"codeql\",\n    scopeName: \"source.ql\",\n    path: \"codeql.tmLanguage.json\",\n    samplePath: \"codeql.sample\",\n    aliases: [\"ql\"]\n  },\n  {\n    id: \"coffee\",\n    scopeName: \"source.coffee\",\n    path: \"coffee.tmLanguage.json\",\n    samplePath: \"coffee.sample\",\n    embeddedLangs: [\"javascript\"]\n  },\n  {\n    id: \"cpp\",\n    scopeName: \"source.cpp\",\n    path: \"cpp.tmLanguage.json\",\n    samplePath: \"cpp.sample\",\n    embeddedLangs: [\"glsl\", \"sql\"]\n  },\n  {\n    id: \"crystal\",\n    scopeName: \"source.crystal\",\n    path: \"crystal.tmLanguage.json\",\n    samplePath: \"crystal.sample\",\n    embeddedLangs: [\"html\", \"sql\", \"css\", \"c\", \"javascript\", \"shellscript\"]\n  },\n  {\n    id: \"csharp\",\n    scopeName: \"source.cs\",\n    path: \"csharp.tmLanguage.json\",\n    samplePath: \"csharp.sample\",\n    aliases: [\"c#\"]\n  },\n  {\n    id: \"css\",\n    scopeName: \"source.css\",\n    path: \"css.tmLanguage.json\",\n    samplePath: \"css.sample\"\n  },\n  {\n    id: \"cue\",\n    scopeName: \"source.cue\",\n    path: \"cue.tmLanguage.json\",\n    samplePath: \"cue.sample\"\n  },\n  {\n    id: \"d\",\n    scopeName: \"source.d\",\n    path: \"d.tmLanguage.json\",\n    samplePath: \"d.sample\"\n  },\n  {\n    id: \"dart\",\n    scopeName: \"source.dart\",\n    path: \"dart.tmLanguage.json\",\n    samplePath: \"dart.sample\"\n  },\n  {\n    id: \"diff\",\n    scopeName: \"source.diff\",\n    path: \"diff.tmLanguage.json\",\n    samplePath: \"diff.sample\"\n  },\n  {\n    id: \"docker\",\n    scopeName: \"source.dockerfile\",\n    path: \"docker.tmLanguage.json\",\n    samplePath: \"docker.sample\"\n  },\n  {\n    id: \"dream-maker\",\n    scopeName: \"source.dm\",\n    path: \"dream-maker.tmLanguage.json\"\n  },\n  {\n    id: \"elixir\",\n    scopeName: \"source.elixir\",\n    path: \"elixir.tmLanguage.json\",\n    samplePath: \"elixir.sample\",\n    embeddedLangs: [\"html\"]\n  },\n  {\n    id: \"elm\",\n    scopeName: \"source.elm\",\n    path: \"elm.tmLanguage.json\",\n    samplePath: \"elm.sample\",\n    embeddedLangs: [\"glsl\"]\n  },\n  {\n    id: \"erb\",\n    scopeName: \"text.html.erb\",\n    path: \"erb.tmLanguage.json\",\n    samplePath: \"erb.sample\",\n    embeddedLangs: [\"html\", \"ruby\"]\n  },\n  {\n    id: \"erlang\",\n    scopeName: \"source.erlang\",\n    path: \"erlang.tmLanguage.json\",\n    samplePath: \"erlang.sample\"\n  },\n  {\n    id: \"fish\",\n    scopeName: \"source.fish\",\n    path: \"fish.tmLanguage.json\",\n    samplePath: \"fish.sample\"\n  },\n  {\n    id: \"fsharp\",\n    scopeName: \"source.fsharp\",\n    path: \"fsharp.tmLanguage.json\",\n    samplePath: \"fsharp.sample\",\n    aliases: [\"f#\"],\n    embeddedLangs: [\"markdown\"]\n  },\n  {\n    id: \"gherkin\",\n    scopeName: \"text.gherkin.feature\",\n    path: \"gherkin.tmLanguage.json\"\n  },\n  {\n    id: \"git-commit\",\n    scopeName: \"text.git-commit\",\n    path: \"git-commit.tmLanguage.json\",\n    embeddedLangs: [\"diff\"]\n  },\n  {\n    id: \"git-rebase\",\n    scopeName: \"text.git-rebase\",\n    path: \"git-rebase.tmLanguage.json\",\n    embeddedLangs: [\"shellscript\"]\n  },\n  {\n    id: \"glsl\",\n    scopeName: \"source.glsl\",\n    path: \"glsl.tmLanguage.json\",\n    samplePath: \"glsl.sample\",\n    embeddedLangs: [\"c\"]\n  },\n  {\n    id: \"gnuplot\",\n    scopeName: \"source.gnuplot\",\n    path: \"gnuplot.tmLanguage.json\"\n  },\n  {\n    id: \"go\",\n    scopeName: \"source.go\",\n    path: \"go.tmLanguage.json\",\n    samplePath: \"go.sample\"\n  },\n  {\n    id: \"graphql\",\n    scopeName: \"source.graphql\",\n    path: \"graphql.tmLanguage.json\",\n    embeddedLangs: [\"javascript\", \"typescript\", \"jsx\", \"tsx\"]\n  },\n  {\n    id: \"groovy\",\n    scopeName: \"source.groovy\",\n    path: \"groovy.tmLanguage.json\"\n  },\n  {\n    id: \"hack\",\n    scopeName: \"source.hack\",\n    path: \"hack.tmLanguage.json\",\n    embeddedLangs: [\"html\", \"sql\"]\n  },\n  {\n    id: \"haml\",\n    scopeName: \"text.haml\",\n    path: \"haml.tmLanguage.json\",\n    embeddedLangs: [\"ruby\", \"javascript\", \"sass\", \"coffee\", \"markdown\", \"css\"]\n  },\n  {\n    id: \"handlebars\",\n    scopeName: \"text.html.handlebars\",\n    path: \"handlebars.tmLanguage.json\",\n    aliases: [\"hbs\"],\n    embeddedLangs: [\"html\", \"css\", \"javascript\", \"yaml\"]\n  },\n  {\n    id: \"haskell\",\n    scopeName: \"source.haskell\",\n    path: \"haskell.tmLanguage.json\"\n  },\n  {\n    id: \"hcl\",\n    scopeName: \"source.hcl\",\n    path: \"hcl.tmLanguage.json\"\n  },\n  {\n    id: \"hlsl\",\n    scopeName: \"source.hlsl\",\n    path: \"hlsl.tmLanguage.json\"\n  },\n  {\n    id: \"html\",\n    scopeName: \"text.html.basic\",\n    path: \"html.tmLanguage.json\",\n    samplePath: \"html.sample\",\n    embeddedLangs: [\"javascript\", \"css\"]\n  },\n  {\n    id: \"ini\",\n    scopeName: \"source.ini\",\n    path: \"ini.tmLanguage.json\"\n  },\n  {\n    id: \"java\",\n    scopeName: \"source.java\",\n    path: \"java.tmLanguage.json\",\n    samplePath: \"java.sample\"\n  },\n  {\n    id: \"javascript\",\n    scopeName: \"source.js\",\n    path: \"javascript.tmLanguage.json\",\n    samplePath: \"javascript.sample\",\n    aliases: [\"js\"]\n  },\n  {\n    id: \"jinja-html\",\n    scopeName: \"text.html.jinja\",\n    path: \"jinja-html.tmLanguage.json\",\n    embeddedLangs: [\"html\"]\n  },\n  {\n    id: \"json\",\n    scopeName: \"source.json\",\n    path: \"json.tmLanguage.json\"\n  },\n  {\n    id: \"jsonc\",\n    scopeName: \"source.json.comments\",\n    path: \"jsonc.tmLanguage.json\"\n  },\n  {\n    id: \"jsonnet\",\n    scopeName: \"source.jsonnet\",\n    path: \"jsonnet.tmLanguage.json\"\n  },\n  {\n    id: \"jssm\",\n    scopeName: \"source.jssm\",\n    path: \"jssm.tmLanguage.json\",\n    samplePath: \"jssm.sample\",\n    aliases: [\"fsl\"]\n  },\n  {\n    id: \"jsx\",\n    scopeName: \"source.js.jsx\",\n    path: \"jsx.tmLanguage.json\"\n  },\n  {\n    id: \"julia\",\n    scopeName: \"source.julia\",\n    path: \"julia.tmLanguage.json\",\n    embeddedLangs: [\"cpp\", \"python\", \"javascript\", \"r\", \"sql\"]\n  },\n  {\n    id: \"kotlin\",\n    scopeName: \"source.kotlin\",\n    path: \"kotlin.tmLanguage.json\"\n  },\n  {\n    id: \"latex\",\n    scopeName: \"text.tex.latex\",\n    path: \"latex.tmLanguage.json\",\n    embeddedLangs: [\"tex\", \"css\", \"haskell\", \"html\", \"xml\", \"java\", \"lua\", \"julia\", \"ruby\", \"javascript\", \"typescript\", \"python\", \"yaml\", \"scala\", \"gnuplot\"]\n  },\n  {\n    id: \"less\",\n    scopeName: \"source.css.less\",\n    path: \"less.tmLanguage.json\",\n    embeddedLangs: [\"css\"]\n  },\n  {\n    id: \"liquid\",\n    scopeName: \"text.html.liquid\",\n    path: \"liquid.tmLanguage.json\",\n    samplePath: \"liquid.sample\",\n    embeddedLangs: [\"html\", \"css\", \"json\", \"javascript\"]\n  },\n  {\n    id: \"lisp\",\n    scopeName: \"source.lisp\",\n    path: \"lisp.tmLanguage.json\"\n  },\n  {\n    id: \"logo\",\n    scopeName: \"source.logo\",\n    path: \"logo.tmLanguage.json\"\n  },\n  {\n    id: \"lua\",\n    scopeName: \"source.lua\",\n    path: \"lua.tmLanguage.json\",\n    embeddedLangs: [\"c\"]\n  },\n  {\n    id: \"make\",\n    scopeName: \"source.makefile\",\n    path: \"make.tmLanguage.json\",\n    aliases: [\"makefile\"]\n  },\n  {\n    id: \"markdown\",\n    scopeName: \"text.html.markdown\",\n    path: \"markdown.tmLanguage.json\",\n    aliases: [\"md\"],\n    embeddedLangs: [\"css\", \"html\", \"ini\", \"java\", \"lua\", \"make\", \"perl\", \"r\", \"ruby\", \"php\", \"sql\", \"vb\", \"xml\", \"xsl\", \"yaml\", \"bat\", \"clojure\", \"coffee\", \"c\", \"cpp\", \"diff\", \"docker\", \"git-commit\", \"git-rebase\", \"go\", \"groovy\", \"pug\", \"javascript\", \"json\", \"jsonc\", \"less\", \"objective-c\", \"swift\", \"scss\", \"raku\", \"powershell\", \"python\", \"julia\", \"rust\", \"scala\", \"shellscript\", \"typescript\", \"tsx\", \"csharp\", \"fsharp\", \"dart\", \"handlebars\", \"erlang\", \"elixir\", \"latex\", \"bibtex\"]\n  },\n  {\n    id: \"marko\",\n    scopeName: \"text.marko\",\n    path: \"marko.tmLanguage.json\",\n    embeddedLangs: [\"css\", \"less\", \"scss\", \"typescript\"]\n  },\n  {\n    id: \"matlab\",\n    scopeName: \"source.matlab\",\n    path: \"matlab.tmLanguage.json\"\n  },\n  {\n    id: \"mdx\",\n    scopeName: \"text.html.markdown.jsx\",\n    path: \"mdx.tmLanguage.json\",\n    embeddedLangs: [\"jsx\", \"markdown\"]\n  },\n  {\n    id: \"mermaid\",\n    scopeName: \"source.mermaid\",\n    path: \"mermaid.tmLanguage.json\"\n  },\n  {\n    id: \"nginx\",\n    scopeName: \"source.nginx\",\n    path: \"nginx.tmLanguage.json\",\n    embeddedLangs: [\"lua\"]\n  },\n  {\n    id: \"nim\",\n    scopeName: \"source.nim\",\n    path: \"nim.tmLanguage.json\",\n    embeddedLangs: [\"c\", \"html\", \"xml\", \"javascript\", \"css\", \"glsl\", \"markdown\"]\n  },\n  {\n    id: \"nix\",\n    scopeName: \"source.nix\",\n    path: \"nix.tmLanguage.json\"\n  },\n  {\n    id: \"objective-c\",\n    scopeName: \"source.objc\",\n    path: \"objective-c.tmLanguage.json\",\n    aliases: [\"objc\"]\n  },\n  {\n    id: \"objective-cpp\",\n    scopeName: \"source.objcpp\",\n    path: \"objective-cpp.tmLanguage.json\"\n  },\n  {\n    id: \"ocaml\",\n    scopeName: \"source.ocaml\",\n    path: \"ocaml.tmLanguage.json\"\n  },\n  {\n    id: \"pascal\",\n    scopeName: \"source.pascal\",\n    path: \"pascal.tmLanguage.json\"\n  },\n  {\n    id: \"perl\",\n    scopeName: \"source.perl\",\n    path: \"perl.tmLanguage.json\",\n    embeddedLangs: [\"html\", \"xml\", \"css\", \"javascript\", \"sql\"]\n  },\n  {\n    id: \"php\",\n    scopeName: \"source.php\",\n    path: \"php.tmLanguage.json\",\n    embeddedLangs: [\"html\", \"xml\", \"sql\", \"javascript\", \"json\", \"css\"]\n  },\n  {\n    id: \"plsql\",\n    scopeName: \"source.plsql.oracle\",\n    path: \"plsql.tmLanguage.json\"\n  },\n  {\n    id: \"postcss\",\n    scopeName: \"source.css.postcss\",\n    path: \"postcss.tmLanguage.json\"\n  },\n  {\n    id: \"powershell\",\n    scopeName: \"source.powershell\",\n    path: \"powershell.tmLanguage.json\",\n    aliases: [\"ps\", \"ps1\"]\n  },\n  {\n    id: \"prisma\",\n    scopeName: \"source.prisma\",\n    path: \"prisma.tmLanguage.json\",\n    samplePath: \"prisma.sample\"\n  },\n  {\n    id: \"prolog\",\n    scopeName: \"source.prolog\",\n    path: \"prolog.tmLanguage.json\"\n  },\n  {\n    id: \"pug\",\n    scopeName: \"text.pug\",\n    path: \"pug.tmLanguage.json\",\n    aliases: [\"jade\"],\n    embeddedLangs: [\"javascript\", \"css\", \"sass\", \"stylus\", \"coffee\", \"html\"]\n  },\n  {\n    id: \"puppet\",\n    scopeName: \"source.puppet\",\n    path: \"puppet.tmLanguage.json\"\n  },\n  {\n    id: \"purescript\",\n    scopeName: \"source.purescript\",\n    path: \"purescript.tmLanguage.json\"\n  },\n  {\n    id: \"python\",\n    scopeName: \"source.python\",\n    path: \"python.tmLanguage.json\",\n    samplePath: \"python.sample\",\n    aliases: [\"py\"]\n  },\n  {\n    id: \"r\",\n    scopeName: \"source.r\",\n    path: \"r.tmLanguage.json\"\n  },\n  {\n    id: \"raku\",\n    scopeName: \"source.perl.6\",\n    path: \"raku.tmLanguage.json\",\n    aliases: [\"perl6\"]\n  },\n  {\n    id: \"razor\",\n    scopeName: \"text.aspnetcorerazor\",\n    path: \"razor.tmLanguage.json\",\n    embeddedLangs: [\"html\", \"csharp\"]\n  },\n  {\n    id: \"rel\",\n    scopeName: \"source.rel\",\n    path: \"rel.tmLanguage.json\",\n    samplePath: \"rel.sample\"\n  },\n  {\n    id: \"riscv\",\n    scopeName: \"source.riscv\",\n    path: \"riscv.tmLanguage.json\"\n  },\n  {\n    id: \"rst\",\n    scopeName: \"source.rst\",\n    path: \"rst.tmLanguage.json\",\n    embeddedLangs: [\"cpp\", \"python\", \"javascript\", \"shellscript\", \"yaml\", \"cmake\", \"ruby\"]\n  },\n  {\n    id: \"ruby\",\n    scopeName: \"source.ruby\",\n    path: \"ruby.tmLanguage.json\",\n    samplePath: \"ruby.sample\",\n    aliases: [\"rb\"],\n    embeddedLangs: [\"html\", \"xml\", \"sql\", \"css\", \"c\", \"javascript\", \"shellscript\", \"lua\"]\n  },\n  {\n    id: \"rust\",\n    scopeName: \"source.rust\",\n    path: \"rust.tmLanguage.json\",\n    aliases: [\"rs\"]\n  },\n  {\n    id: \"sas\",\n    scopeName: \"source.sas\",\n    path: \"sas.tmLanguage.json\",\n    embeddedLangs: [\"sql\"]\n  },\n  {\n    id: \"sass\",\n    scopeName: \"source.sass\",\n    path: \"sass.tmLanguage.json\"\n  },\n  {\n    id: \"scala\",\n    scopeName: \"source.scala\",\n    path: \"scala.tmLanguage.json\"\n  },\n  {\n    id: \"scheme\",\n    scopeName: \"source.scheme\",\n    path: \"scheme.tmLanguage.json\"\n  },\n  {\n    id: \"scss\",\n    scopeName: \"source.css.scss\",\n    path: \"scss.tmLanguage.json\",\n    embeddedLangs: [\"css\"]\n  },\n  {\n    id: \"shaderlab\",\n    scopeName: \"source.shaderlab\",\n    path: \"shaderlab.tmLanguage.json\",\n    aliases: [\"shader\"],\n    embeddedLangs: [\"hlsl\"]\n  },\n  {\n    id: \"shellscript\",\n    scopeName: \"source.shell\",\n    path: \"shellscript.tmLanguage.json\",\n    aliases: [\"shell\", \"bash\", \"sh\", \"zsh\"],\n    embeddedLangs: [\"ruby\", \"python\", \"applescript\", \"html\", \"markdown\"]\n  },\n  {\n    id: \"smalltalk\",\n    scopeName: \"source.smalltalk\",\n    path: \"smalltalk.tmLanguage.json\"\n  },\n  {\n    id: \"solidity\",\n    scopeName: \"source.solidity\",\n    path: \"solidity.tmLanguage.json\"\n  },\n  {\n    id: \"sparql\",\n    scopeName: \"source.sparql\",\n    path: \"sparql.tmLanguage.json\",\n    samplePath: \"sparql.sample\",\n    embeddedLangs: [\"turtle\"]\n  },\n  {\n    id: \"sql\",\n    scopeName: \"source.sql\",\n    path: \"sql.tmLanguage.json\"\n  },\n  {\n    id: \"ssh-config\",\n    scopeName: \"source.ssh-config\",\n    path: \"ssh-config.tmLanguage.json\"\n  },\n  {\n    id: \"stata\",\n    scopeName: \"source.stata\",\n    path: \"stata.tmLanguage.json\",\n    samplePath: \"stata.sample\",\n    embeddedLangs: [\"sql\"]\n  },\n  {\n    id: \"stylus\",\n    scopeName: \"source.stylus\",\n    path: \"stylus.tmLanguage.json\",\n    aliases: [\"styl\"]\n  },\n  {\n    id: \"svelte\",\n    scopeName: \"source.svelte\",\n    path: \"svelte.tmLanguage.json\",\n    embeddedLangs: [\"javascript\", \"typescript\", \"coffee\", \"stylus\", \"sass\", \"css\", \"scss\", \"less\", \"postcss\", \"pug\", \"markdown\"]\n  },\n  {\n    id: \"swift\",\n    scopeName: \"source.swift\",\n    path: \"swift.tmLanguage.json\"\n  },\n  {\n    id: \"system-verilog\",\n    scopeName: \"source.systemverilog\",\n    path: \"system-verilog.tmLanguage.json\"\n  },\n  {\n    id: \"tasl\",\n    scopeName: \"source.tasl\",\n    path: \"tasl.tmLanguage.json\",\n    samplePath: \"tasl.sample\"\n  },\n  {\n    id: \"tcl\",\n    scopeName: \"source.tcl\",\n    path: \"tcl.tmLanguage.json\"\n  },\n  {\n    id: \"tex\",\n    scopeName: \"text.tex\",\n    path: \"tex.tmLanguage.json\",\n    embeddedLangs: [\"r\"]\n  },\n  {\n    id: \"toml\",\n    scopeName: \"source.toml\",\n    path: \"toml.tmLanguage.json\"\n  },\n  {\n    id: \"tsx\",\n    scopeName: \"source.tsx\",\n    path: \"tsx.tmLanguage.json\",\n    samplePath: \"tsx.sample\"\n  },\n  {\n    id: \"turtle\",\n    scopeName: \"source.turtle\",\n    path: \"turtle.tmLanguage.json\",\n    samplePath: \"turtle.sample\"\n  },\n  {\n    id: \"twig\",\n    scopeName: \"text.html.twig\",\n    path: \"twig.tmLanguage.json\",\n    embeddedLangs: [\"css\", \"javascript\", \"php\", \"python\", \"ruby\"]\n  },\n  {\n    id: \"typescript\",\n    scopeName: \"source.ts\",\n    path: \"typescript.tmLanguage.json\",\n    aliases: [\"ts\"]\n  },\n  {\n    id: \"vb\",\n    scopeName: \"source.asp.vb.net\",\n    path: \"vb.tmLanguage.json\",\n    aliases: [\"cmd\"]\n  },\n  {\n    id: \"verilog\",\n    scopeName: \"source.verilog\",\n    path: \"verilog.tmLanguage.json\"\n  },\n  {\n    id: \"vhdl\",\n    scopeName: \"source.vhdl\",\n    path: \"vhdl.tmLanguage.json\"\n  },\n  {\n    id: \"viml\",\n    scopeName: \"source.viml\",\n    path: \"viml.tmLanguage.json\",\n    aliases: [\"vim\", \"vimscript\"]\n  },\n  {\n    id: \"vue-html\",\n    scopeName: \"text.html.vue-html\",\n    path: \"vue-html.tmLanguage.json\",\n    embeddedLangs: [\"vue\", \"javascript\"]\n  },\n  {\n    id: \"vue\",\n    scopeName: \"source.vue\",\n    path: \"vue.tmLanguage.json\",\n    embeddedLangs: [\"json\", \"markdown\", \"pug\", \"haml\", \"liquid\", \"vue-html\", \"sass\", \"scss\", \"less\", \"stylus\", \"postcss\", \"css\", \"typescript\", \"coffee\", \"javascript\"]\n  },\n  {\n    id: \"wasm\",\n    scopeName: \"source.wat\",\n    path: \"wasm.tmLanguage.json\"\n  },\n  {\n    id: \"wenyan\",\n    scopeName: \"source.wenyan\",\n    path: \"wenyan.tmLanguage.json\",\n    aliases: [\"\\u6587\\u8A00\"]\n  },\n  {\n    id: \"xml\",\n    scopeName: \"text.xml\",\n    path: \"xml.tmLanguage.json\",\n    embeddedLangs: [\"java\"]\n  },\n  {\n    id: \"xsl\",\n    scopeName: \"text.xml.xsl\",\n    path: \"xsl.tmLanguage.json\",\n    embeddedLangs: [\"xml\"]\n  },\n  {\n    id: \"yaml\",\n    scopeName: \"source.yaml\",\n    path: \"yaml.tmLanguage.json\"\n  },\n  {\n    id: \"zenscript\",\n    scopeName: \"source.zenscript\",\n    path: \"zenscript.tmLanguage.json\",\n    samplePath: \"zenscript.sample\"\n  }\n];\n\nvar FontStyle = /* @__PURE__ */ ((FontStyle2) => {\n  FontStyle2[FontStyle2[\"NotSet\"] = -1] = \"NotSet\";\n  FontStyle2[FontStyle2[\"None\"] = 0] = \"None\";\n  FontStyle2[FontStyle2[\"Italic\"] = 1] = \"Italic\";\n  FontStyle2[FontStyle2[\"Bold\"] = 2] = \"Bold\";\n  FontStyle2[FontStyle2[\"Underline\"] = 4] = \"Underline\";\n  return FontStyle2;\n})(FontStyle || {});\nclass StackElementMetadata {\n  static toBinaryStr(metadata) {\n    let r = metadata.toString(2);\n    while (r.length < 32) {\n      r = \"0\" + r;\n    }\n    return r;\n  }\n  static printMetadata(metadata) {\n    let languageId = StackElementMetadata.getLanguageId(metadata);\n    let tokenType = StackElementMetadata.getTokenType(metadata);\n    let fontStyle = StackElementMetadata.getFontStyle(metadata);\n    let foreground = StackElementMetadata.getForeground(metadata);\n    let background = StackElementMetadata.getBackground(metadata);\n    console.log({\n      languageId,\n      tokenType,\n      fontStyle,\n      foreground,\n      background\n    });\n  }\n  static getLanguageId(metadata) {\n    return (metadata & 255 /* LANGUAGEID_MASK */) >>> 0 /* LANGUAGEID_OFFSET */;\n  }\n  static getTokenType(metadata) {\n    return (metadata & 1792 /* TOKEN_TYPE_MASK */) >>> 8 /* TOKEN_TYPE_OFFSET */;\n  }\n  static getFontStyle(metadata) {\n    return (metadata & 14336 /* FONT_STYLE_MASK */) >>> 11 /* FONT_STYLE_OFFSET */;\n  }\n  static getForeground(metadata) {\n    return (metadata & 8372224 /* FOREGROUND_MASK */) >>> 14 /* FOREGROUND_OFFSET */;\n  }\n  static getBackground(metadata) {\n    return (metadata & 4286578688 /* BACKGROUND_MASK */) >>> 23 /* BACKGROUND_OFFSET */;\n  }\n  static set(metadata, languageId, tokenType, fontStyle, foreground, background) {\n    let _languageId = StackElementMetadata.getLanguageId(metadata);\n    let _tokenType = StackElementMetadata.getTokenType(metadata);\n    let _fontStyle = StackElementMetadata.getFontStyle(metadata);\n    let _foreground = StackElementMetadata.getForeground(metadata);\n    let _background = StackElementMetadata.getBackground(metadata);\n    if (languageId !== 0) {\n      _languageId = languageId;\n    }\n    if (tokenType !== 0 /* Other */) {\n      _tokenType = tokenType === 8 /* MetaEmbedded */ ? 0 /* Other */ : tokenType;\n    }\n    if (fontStyle !== -1 /* NotSet */) {\n      _fontStyle = fontStyle;\n    }\n    if (foreground !== 0) {\n      _foreground = foreground;\n    }\n    if (background !== 0) {\n      _background = background;\n    }\n    return (_languageId << 0 /* LANGUAGEID_OFFSET */ | _tokenType << 8 /* TOKEN_TYPE_OFFSET */ | _fontStyle << 11 /* FONT_STYLE_OFFSET */ | _foreground << 14 /* FOREGROUND_OFFSET */ | _background << 23 /* BACKGROUND_OFFSET */) >>> 0;\n  }\n}\n\nfunction trimEndSlash(str) {\n  if (str.endsWith(\"/\") || str.endsWith(\"\\\\\"))\n    return str.slice(0, -1);\n  return str;\n}\nfunction trimStartDot(str) {\n  if (str.startsWith(\"./\"))\n    return str.slice(2);\n  return str;\n}\nfunction dirpathparts(str) {\n  const parts = str.split(/[\\/\\\\]/g);\n  return parts.slice(0, parts.length - 1);\n}\nfunction join(...parts) {\n  return parts.map(trimEndSlash).map(trimStartDot).join(\"/\");\n}\nfunction groupBy(elements, keyGetter) {\n  const map = /* @__PURE__ */ new Map();\n  for (const element of elements) {\n    const key = keyGetter(element);\n    if (map.has(key)) {\n      const group = map.get(key);\n      group.push(element);\n    } else {\n      map.set(key, [element]);\n    }\n  }\n  return map;\n}\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nfunction createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var len = text.length;\n    var pos = 0, value = '', tokenOffset = 0, token = 16 /* Unknown */, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                var ch2 = text.charCodeAt(pos++);\n                switch (ch2) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch3 = scanHexDigits(4, true);\n                        if (ch3 >= 0) {\n                            result += String.fromCharCode(ch3);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        lineStartOffset = lineNumber;\n        prevTokenLineStartOffset = tokenLineStartOffset;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            lineNumber++;\n            tokenLineStartOffset = pos;\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var safeLength = len - 1; // For lookahead.\n                    var commentClosed = false;\n                    while (pos < safeLength) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                        if (isLineBreak(ch)) {\n                            if (ch === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                                pos++;\n                            }\n                            lineNumber++;\n                            tokenLineStartOffset = pos;\n                        }\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n            case 47 /* slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenStartLine: function () { return lineStartOffset; },\n        getTokenStartCharacter: function () { return tokenOffset - prevTokenLineStartOffset; },\n        getTokenError: function () { return scanError; },\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar ParseOptions;\n(function (ParseOptions) {\n    ParseOptions.DEFAULT = {\n        allowTrailingComma: false\n    };\n})(ParseOptions || (ParseOptions = {}));\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nfunction parse$1(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    if (options === void 0) { options = ParseOptions.DEFAULT; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty !== null) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nfunction visit(text, visitor, options) {\n    if (options === void 0) { options = ParseOptions.DEFAULT; }\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var tokenValue = _scanner.getTokenValue();\n                var value = Number(tokenValue);\n                if (isNaN(value)) {\n                    handleError(2 /* InvalidNumberFormat */);\n                    value = 0;\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        if (options.allowEmptyContent) {\n            return true;\n        }\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore, always check the errors list to find out if the input was valid.\n */\nvar parse = parse$1;\n\nvar __defProp$1 = Object.defineProperty;\nvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$1.call(b, prop))\n      __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b)) {\n      if (__propIsEnum$1.call(b, prop))\n        __defNormalProp$1(a, prop, b[prop]);\n    }\n  return a;\n};\nconst isWebWorker = typeof self !== \"undefined\" && typeof self.WorkerGlobalScope !== \"undefined\";\nconst isNode = \"process\" in globalThis && typeof process !== \"undefined\" && typeof process.release !== \"undefined\" && process.release.name === \"node\";\nconst isBrowser = isWebWorker || !isNode;\nlet CDN_ROOT = \"\";\nlet WASM = \"\";\nfunction setCDN(root) {\n  CDN_ROOT = root;\n}\nfunction setWasm(path) {\n  WASM = path;\n}\nlet _onigurumaPromise = null;\nasync function getOniguruma() {\n  if (!_onigurumaPromise) {\n    let loader;\n    if (isBrowser) {\n      if (typeof WASM === \"string\") {\n        loader = vscodeOniguruma.loadWASM({\n          data: await fetch(_resolvePath(\"dist/onig.wasm\")).then((r) => r.arrayBuffer())\n        });\n      } else {\n        loader = vscodeOniguruma.loadWASM(WASM);\n      }\n    } else {\n      const path = require(\"path\");\n      const wasmPath = path.join(require.resolve(\"vscode-oniguruma\"), \"../onig.wasm\");\n      const fs = require(\"fs\");\n      const wasmBin = fs.readFileSync(wasmPath).buffer;\n      loader = vscodeOniguruma.loadWASM(wasmBin);\n    }\n    _onigurumaPromise = loader.then(() => {\n      return {\n        createOnigScanner(patterns) {\n          return vscodeOniguruma.createOnigScanner(patterns);\n        },\n        createOnigString(s) {\n          return vscodeOniguruma.createOnigString(s);\n        }\n      };\n    });\n  }\n  return _onigurumaPromise;\n}\nfunction _resolvePath(filepath) {\n  if (isBrowser) {\n    if (!CDN_ROOT) {\n      console.warn(\"[Shiki] no CDN provider found, use `setCDN()` to specify the CDN for loading the resources before calling `getHighlighter()`\");\n    }\n    return `${CDN_ROOT}${filepath}`;\n  } else {\n    const path = require(\"path\");\n    if (path.isAbsolute(filepath)) {\n      return filepath;\n    } else {\n      return path.resolve(__dirname, \"..\", filepath);\n    }\n  }\n}\nasync function _fetchAssets(filepath) {\n  const path = _resolvePath(filepath);\n  if (isBrowser) {\n    return await fetch(path).then((r) => r.text());\n  } else {\n    const fs = require(\"fs\");\n    return await fs.promises.readFile(path, \"utf-8\");\n  }\n}\nasync function _fetchJSONAssets(filepath) {\n  const errors = [];\n  const rawTheme = parse(await _fetchAssets(filepath), errors, {\n    allowTrailingComma: true\n  });\n  if (errors.length) {\n    throw errors[0];\n  }\n  return rawTheme;\n}\nasync function fetchTheme(themePath) {\n  let theme = await _fetchJSONAssets(themePath);\n  const shikiTheme = toShikiTheme(theme);\n  if (shikiTheme.include) {\n    const includedTheme = await fetchTheme(join(...dirpathparts(themePath), shikiTheme.include));\n    if (includedTheme.settings) {\n      shikiTheme.settings = includedTheme.settings.concat(shikiTheme.settings);\n    }\n    if (includedTheme.bg && !shikiTheme.bg) {\n      shikiTheme.bg = includedTheme.bg;\n    }\n    if (includedTheme.colors) {\n      shikiTheme.colors = __spreadValues$1(__spreadValues$1({}, includedTheme.colors), shikiTheme.colors);\n    }\n    delete shikiTheme.include;\n  }\n  return shikiTheme;\n}\nasync function fetchGrammar(filepath) {\n  return await _fetchJSONAssets(filepath);\n}\nfunction repairTheme(theme) {\n  if (!theme.settings)\n    theme.settings = [];\n  if (theme.settings[0] && theme.settings[0].settings && !theme.settings[0].scope) {\n    return;\n  }\n  theme.settings.unshift({\n    settings: {\n      foreground: theme.fg,\n      background: theme.bg\n    }\n  });\n}\nfunction toShikiTheme(rawTheme) {\n  const type = rawTheme.type || \"dark\";\n  const shikiTheme = __spreadValues$1(__spreadValues$1({\n    name: rawTheme.name,\n    type\n  }, rawTheme), getThemeDefaultColors(rawTheme));\n  if (rawTheme.include) {\n    shikiTheme.include = rawTheme.include;\n  }\n  if (rawTheme.tokenColors) {\n    shikiTheme.settings = rawTheme.tokenColors;\n    delete shikiTheme.tokenColors;\n  }\n  repairTheme(shikiTheme);\n  return shikiTheme;\n}\nconst VSCODE_FALLBACK_EDITOR_FG = { light: \"#333333\", dark: \"#bbbbbb\" };\nconst VSCODE_FALLBACK_EDITOR_BG = { light: \"#fffffe\", dark: \"#1e1e1e\" };\nfunction getThemeDefaultColors(theme) {\n  var _a, _b, _c, _d;\n  let fg, bg;\n  let settings = theme.settings ? theme.settings : theme.tokenColors;\n  const globalSetting = settings ? settings.find((s) => {\n    return !s.name && !s.scope;\n  }) : void 0;\n  if ((_a = globalSetting == null ? void 0 : globalSetting.settings) == null ? void 0 : _a.foreground) {\n    fg = globalSetting.settings.foreground;\n  }\n  if ((_b = globalSetting == null ? void 0 : globalSetting.settings) == null ? void 0 : _b.background) {\n    bg = globalSetting.settings.background;\n  }\n  if (!fg && ((_c = theme == null ? void 0 : theme.colors) == null ? void 0 : _c[\"editor.foreground\"])) {\n    fg = theme.colors[\"editor.foreground\"];\n  }\n  if (!bg && ((_d = theme == null ? void 0 : theme.colors) == null ? void 0 : _d[\"editor.background\"])) {\n    bg = theme.colors[\"editor.background\"];\n  }\n  if (!fg) {\n    fg = theme.type === \"light\" ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;\n  }\n  if (!bg) {\n    bg = theme.type === \"light\" ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;\n  }\n  return {\n    fg,\n    bg\n  };\n}\n\nclass Resolver {\n  constructor(onigLibPromise, onigLibName) {\n    this.languagesPath = \"languages/\";\n    this.languageMap = {};\n    this.scopeToLangMap = {};\n    this._onigLibPromise = onigLibPromise;\n    this._onigLibName = onigLibName;\n  }\n  get onigLib() {\n    return this._onigLibPromise;\n  }\n  getOnigLibName() {\n    return this._onigLibName;\n  }\n  getLangRegistration(langIdOrAlias) {\n    return this.languageMap[langIdOrAlias];\n  }\n  async loadGrammar(scopeName) {\n    const lang = this.scopeToLangMap[scopeName];\n    if (!lang) {\n      return null;\n    }\n    if (lang.grammar) {\n      return lang.grammar;\n    }\n    const g = await fetchGrammar(languages.includes(lang) ? `${this.languagesPath}${lang.path}` : lang.path);\n    lang.grammar = g;\n    return g;\n  }\n  addLanguage(l) {\n    this.languageMap[l.id] = l;\n    if (l.aliases) {\n      l.aliases.forEach((a) => {\n        this.languageMap[a] = l;\n      });\n    }\n    this.scopeToLangMap[l.scopeName] = l;\n  }\n}\n\nfunction tokenizeWithTheme(theme, colorMap, fileContents, grammar, options) {\n  let lines = fileContents.split(/\\r\\n|\\r|\\n/);\n  let ruleStack = vscodeTextmate.INITIAL;\n  let actual = [];\n  let final = [];\n  for (let i = 0, len = lines.length; i < len; i++) {\n    let line = lines[i];\n    if (line === \"\") {\n      actual = [];\n      final.push([]);\n      continue;\n    }\n    let resultWithScopes;\n    let tokensWithScopes;\n    let tokensWithScopesIndex;\n    if (options.includeExplanation) {\n      resultWithScopes = grammar.tokenizeLine(line, ruleStack);\n      tokensWithScopes = resultWithScopes.tokens;\n      tokensWithScopesIndex = 0;\n    }\n    let result = grammar.tokenizeLine2(line, ruleStack);\n    let tokensLength = result.tokens.length / 2;\n    for (let j = 0; j < tokensLength; j++) {\n      let startIndex = result.tokens[2 * j];\n      let nextStartIndex = j + 1 < tokensLength ? result.tokens[2 * j + 2] : line.length;\n      if (startIndex === nextStartIndex) {\n        continue;\n      }\n      let metadata = result.tokens[2 * j + 1];\n      let foreground = StackElementMetadata.getForeground(metadata);\n      let foregroundColor = colorMap[foreground];\n      let fontStyle = StackElementMetadata.getFontStyle(metadata);\n      let explanation = [];\n      if (options.includeExplanation) {\n        let offset = 0;\n        while (startIndex + offset < nextStartIndex) {\n          let tokenWithScopes = tokensWithScopes[tokensWithScopesIndex];\n          let tokenWithScopesText = line.substring(tokenWithScopes.startIndex, tokenWithScopes.endIndex);\n          offset += tokenWithScopesText.length;\n          explanation.push({\n            content: tokenWithScopesText,\n            scopes: explainThemeScopes(theme, tokenWithScopes.scopes)\n          });\n          tokensWithScopesIndex++;\n        }\n      }\n      actual.push({\n        content: line.substring(startIndex, nextStartIndex),\n        color: foregroundColor,\n        fontStyle,\n        explanation\n      });\n    }\n    final.push(actual);\n    actual = [];\n    ruleStack = result.ruleStack;\n  }\n  return final;\n}\nfunction explainThemeScopes(theme, scopes) {\n  let result = [];\n  for (let i = 0, len = scopes.length; i < len; i++) {\n    let parentScopes = scopes.slice(0, i);\n    let scope = scopes[i];\n    result[i] = {\n      scopeName: scope,\n      themeMatches: explainThemeScope(theme, scope, parentScopes)\n    };\n  }\n  return result;\n}\nfunction matchesOne(selector, scope) {\n  let selectorPrefix = selector + \".\";\n  if (selector === scope || scope.substring(0, selectorPrefix.length) === selectorPrefix) {\n    return true;\n  }\n  return false;\n}\nfunction matches(selector, selectorParentScopes, scope, parentScopes) {\n  if (!matchesOne(selector, scope)) {\n    return false;\n  }\n  let selectorParentIndex = selectorParentScopes.length - 1;\n  let parentIndex = parentScopes.length - 1;\n  while (selectorParentIndex >= 0 && parentIndex >= 0) {\n    if (matchesOne(selectorParentScopes[selectorParentIndex], parentScopes[parentIndex])) {\n      selectorParentIndex--;\n    }\n    parentIndex--;\n  }\n  if (selectorParentIndex === -1) {\n    return true;\n  }\n  return false;\n}\nfunction explainThemeScope(theme, scope, parentScopes) {\n  let result = [], resultLen = 0;\n  for (let i = 0, len = theme.settings.length; i < len; i++) {\n    let setting = theme.settings[i];\n    let selectors;\n    if (typeof setting.scope === \"string\") {\n      selectors = setting.scope.split(/,/).map((scope2) => scope2.trim());\n    } else if (Array.isArray(setting.scope)) {\n      selectors = setting.scope;\n    } else {\n      continue;\n    }\n    for (let j = 0, lenJ = selectors.length; j < lenJ; j++) {\n      let rawSelector = selectors[j];\n      let rawSelectorPieces = rawSelector.split(/ /);\n      let selector = rawSelectorPieces[rawSelectorPieces.length - 1];\n      let selectorParentScopes = rawSelectorPieces.slice(0, rawSelectorPieces.length - 1);\n      if (matches(selector, selectorParentScopes, scope, parentScopes)) {\n        result[resultLen++] = setting;\n        j = lenJ;\n      }\n    }\n  }\n  return result;\n}\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst defaultElements = {\n  pre({ className, style, children }) {\n    return `<pre class=\"${className}\" style=\"${style}\">${children}</pre>`;\n  },\n  code({ children }) {\n    return `<code>${children}</code>`;\n  },\n  line({ className, children }) {\n    return `<span class=\"${className}\">${children}</span>`;\n  },\n  token({ style, children }) {\n    return `<span style=\"${style}\">${children}</span>`;\n  }\n};\nfunction renderToHtml(lines, options = {}) {\n  var _a;\n  const bg = options.bg || \"#fff\";\n  const optionsByLineNumber = groupBy((_a = options.lineOptions) != null ? _a : [], (option) => option.line);\n  const userElements = options.elements || {};\n  function h(type = \"\", props = {}, children) {\n    const element = userElements[type] || defaultElements[type];\n    if (element) {\n      children = children.filter(Boolean);\n      return element(__spreadProps(__spreadValues({}, props), {\n        children: type === \"code\" ? children.join(\"\\n\") : children.join(\"\")\n      }));\n    }\n    return \"\";\n  }\n  return h(\"pre\", { className: \"shiki\", style: `background-color: ${bg}` }, [\n    options.langId ? `<div class=\"language-id\">${options.langId}</div>` : \"\",\n    h(\"code\", {}, lines.map((line, index) => {\n      var _a2;\n      const lineNumber = index + 1;\n      const lineOptions = (_a2 = optionsByLineNumber.get(lineNumber)) != null ? _a2 : [];\n      const lineClasses = getLineClasses(lineOptions).join(\" \");\n      return h(\"line\", {\n        className: lineClasses,\n        lines,\n        line,\n        index\n      }, line.map((token, index2) => {\n        const cssDeclarations = [`color: ${token.color || options.fg}`];\n        if (token.fontStyle & FontStyle.Italic) {\n          cssDeclarations.push(\"font-style: italic\");\n        }\n        if (token.fontStyle & FontStyle.Bold) {\n          cssDeclarations.push(\"font-weight: bold\");\n        }\n        if (token.fontStyle & FontStyle.Underline) {\n          cssDeclarations.push(\"text-decoration: underline\");\n        }\n        return h(\"token\", {\n          style: cssDeclarations.join(\"; \"),\n          tokens: line,\n          token,\n          index: index2\n        }, [escapeHtml(token.content)]);\n      }));\n    }))\n  ]);\n}\nconst htmlEscapes = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\"\n};\nfunction escapeHtml(html) {\n  return html.replace(/[&<>\"']/g, (chr) => htmlEscapes[chr]);\n}\nfunction getLineClasses(lineOptions) {\n  var _a;\n  const lineClasses = /* @__PURE__ */ new Set([\"line\"]);\n  for (const lineOption of lineOptions) {\n    for (const lineClass of (_a = lineOption.classes) != null ? _a : []) {\n      lineClasses.add(lineClass);\n    }\n  }\n  return Array.from(lineClasses);\n}\n\nclass Registry extends vscodeTextmate.Registry {\n  constructor(_resolver) {\n    super(_resolver);\n    this._resolver = _resolver;\n    this.themesPath = \"themes/\";\n    this._resolvedThemes = {};\n    this._resolvedGrammars = {};\n  }\n  getTheme(theme) {\n    if (typeof theme === \"string\") {\n      return this._resolvedThemes[theme];\n    } else {\n      return theme;\n    }\n  }\n  async loadTheme(theme) {\n    if (typeof theme === \"string\") {\n      if (!this._resolvedThemes[theme]) {\n        this._resolvedThemes[theme] = await fetchTheme(`${this.themesPath}${theme}.json`);\n      }\n      return this._resolvedThemes[theme];\n    } else {\n      theme = toShikiTheme(theme);\n      if (theme.name) {\n        this._resolvedThemes[theme.name] = theme;\n      }\n      return theme;\n    }\n  }\n  async loadThemes(themes) {\n    return await Promise.all(themes.map((theme) => this.loadTheme(theme)));\n  }\n  getLoadedThemes() {\n    return Object.keys(this._resolvedThemes);\n  }\n  getGrammar(name) {\n    return this._resolvedGrammars[name];\n  }\n  async loadLanguage(lang) {\n    const g = await this.loadGrammar(lang.scopeName);\n    this._resolvedGrammars[lang.id] = g;\n    if (lang.aliases) {\n      lang.aliases.forEach((la) => {\n        this._resolvedGrammars[la] = g;\n      });\n    }\n  }\n  async loadLanguages(langs) {\n    for (const lang of langs) {\n      this._resolver.addLanguage(lang);\n    }\n    for (const lang of langs) {\n      await this.loadLanguage(lang);\n    }\n  }\n  getLoadedLanguages() {\n    return Object.keys(this._resolvedGrammars);\n  }\n}\n\nfunction resolveLang(lang) {\n  return typeof lang === \"string\" ? languages.find((l) => {\n    var _a;\n    return l.id === lang || ((_a = l.aliases) == null ? void 0 : _a.includes(lang));\n  }) : lang;\n}\nfunction resolveOptions(options) {\n  let _languages = languages;\n  let _themes = options.themes || [];\n  if (options.langs) {\n    _languages = options.langs.map(resolveLang);\n  }\n  if (options.theme) {\n    _themes.unshift(options.theme);\n  }\n  if (!_themes.length) {\n    _themes = [\"nord\"];\n  }\n  return { _languages, _themes };\n}\nasync function getHighlighter(options) {\n  var _a, _b;\n  const { _languages, _themes } = resolveOptions(options);\n  const _resolver = new Resolver(getOniguruma(), \"vscode-oniguruma\");\n  const _registry = new Registry(_resolver);\n  if ((_a = options.paths) == null ? void 0 : _a.themes) {\n    _registry.themesPath = options.paths.themes;\n  }\n  if ((_b = options.paths) == null ? void 0 : _b.languages) {\n    _resolver.languagesPath = options.paths.languages;\n  }\n  const themes = await _registry.loadThemes(_themes);\n  const _defaultTheme = themes[0];\n  let _currentTheme;\n  await _registry.loadLanguages(_languages);\n  let COLOR_REPLACEMENTS = {\n    \"#000001\": \"var(--shiki-color-text)\",\n    \"#000002\": \"var(--shiki-color-background)\",\n    \"#000004\": \"var(--shiki-token-constant)\",\n    \"#000005\": \"var(--shiki-token-string)\",\n    \"#000006\": \"var(--shiki-token-comment)\",\n    \"#000007\": \"var(--shiki-token-keyword)\",\n    \"#000008\": \"var(--shiki-token-parameter)\",\n    \"#000009\": \"var(--shiki-token-function)\",\n    \"#000010\": \"var(--shiki-token-string-expression)\",\n    \"#000011\": \"var(--shiki-token-punctuation)\",\n    \"#000012\": \"var(--shiki-token-link)\"\n  };\n  function setColorReplacements(map) {\n    COLOR_REPLACEMENTS = map;\n  }\n  function fixCssVariablesTheme(theme, colorMap) {\n    theme.bg = COLOR_REPLACEMENTS[theme.bg] || theme.bg;\n    theme.fg = COLOR_REPLACEMENTS[theme.fg] || theme.fg;\n    colorMap.forEach((val, i) => {\n      colorMap[i] = COLOR_REPLACEMENTS[val] || val;\n    });\n  }\n  function getTheme(theme) {\n    const _theme = theme ? _registry.getTheme(theme) : _defaultTheme;\n    if (!_theme) {\n      throw Error(`No theme registration for ${theme}`);\n    }\n    if (!_currentTheme || _currentTheme.name !== _theme.name) {\n      _registry.setTheme(_theme);\n      _currentTheme = _theme;\n    }\n    const _colorMap = _registry.getColorMap();\n    if (_theme.type === \"css\") {\n      fixCssVariablesTheme(_theme, _colorMap);\n    }\n    return { _theme, _colorMap };\n  }\n  function getGrammar(lang) {\n    const _grammar = _registry.getGrammar(lang);\n    if (!_grammar) {\n      throw Error(`No language registration for ${lang}`);\n    }\n    return { _grammar };\n  }\n  function codeToThemedTokens(code, lang = \"text\", theme, options2 = { includeExplanation: true }) {\n    if (isPlaintext(lang)) {\n      const lines = code.split(/\\r\\n|\\r|\\n/);\n      return [...lines.map((line) => [{ content: line }])];\n    }\n    const { _grammar } = getGrammar(lang);\n    const { _theme, _colorMap } = getTheme(theme);\n    return tokenizeWithTheme(_theme, _colorMap, code, _grammar, options2);\n  }\n  function codeToHtml(code, arg1 = \"text\", arg2) {\n    let options2;\n    if (typeof arg1 === \"object\") {\n      options2 = arg1;\n    } else {\n      options2 = {\n        lang: arg1,\n        theme: arg2\n      };\n    }\n    const tokens = codeToThemedTokens(code, options2.lang, options2.theme, {\n      includeExplanation: false\n    });\n    const { _theme } = getTheme(options2.theme);\n    return renderToHtml(tokens, {\n      fg: _theme.fg,\n      bg: _theme.bg,\n      lineOptions: options2 == null ? void 0 : options2.lineOptions\n    });\n  }\n  async function loadTheme(theme) {\n    await _registry.loadTheme(theme);\n  }\n  async function loadLanguage(lang) {\n    const _lang = resolveLang(lang);\n    _resolver.addLanguage(_lang);\n    await _registry.loadLanguage(_lang);\n  }\n  function getLoadedThemes() {\n    return _registry.getLoadedThemes();\n  }\n  function getLoadedLanguages() {\n    return _registry.getLoadedLanguages();\n  }\n  function getBackgroundColor(theme) {\n    const { _theme } = getTheme(theme);\n    return _theme.bg;\n  }\n  function getForegroundColor(theme) {\n    const { _theme } = getTheme(theme);\n    return _theme.fg;\n  }\n  return {\n    codeToThemedTokens,\n    codeToHtml,\n    getTheme: (theme) => {\n      return getTheme(theme)._theme;\n    },\n    loadTheme,\n    loadLanguage,\n    getBackgroundColor,\n    getForegroundColor,\n    getLoadedThemes,\n    getLoadedLanguages,\n    setColorReplacements\n  };\n}\nfunction isPlaintext(lang) {\n  return !lang || [\"plaintext\", \"txt\", \"text\"].includes(lang);\n}\n\nfunction setOnigasmWASM(path) {\n  setWasm(path);\n}\n\nexports.BUNDLED_LANGUAGES = languages;\nexports.BUNDLED_THEMES = themes;\nexports.FontStyle = FontStyle;\nexports.getHighlighter = getHighlighter;\nexports.loadTheme = fetchTheme;\nexports.renderToHtml = renderToHtml;\nexports.setCDN = setCDN;\nexports.setOnigasmWASM = setOnigasmWASM;\nexports.setWasm = setWasm;\nexports.toShikiTheme = toShikiTheme;\n", "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n", "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n", "/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n", "/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(function (key) {\n  return /^debug_/i.test(key);\n}).reduce(function (obj, key) {\n  // camel-case\n  var prop = key\n    .substring(6)\n    .toLowerCase()\n    .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });\n\n  // coerce string value into JS value\n  var val = process.env[key];\n  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;\n  else if (/^(no|off|false|disabled)$/i.test(val)) val = false;\n  else if (val === 'null') val = null;\n  else val = Number(val);\n\n  obj[prop] = val;\n  return obj;\n}, {});\n\n/**\n * The file descriptor to write the `debug()` calls to.\n * Set the `DEBUG_FD` env variable to override with another value. i.e.:\n *\n *   $ DEBUG_FD=3 node script.js 3>debug.log\n */\n\nvar fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n\nif (1 !== fd && 2 !== fd) {\n  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()\n}\n\nvar stream = 1 === fd ? process.stdout :\n             2 === fd ? process.stderr :\n             createWritableStdioStream(fd);\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n  return 'colors' in exports.inspectOpts\n    ? Boolean(exports.inspectOpts.colors)\n    : tty.isatty(fd);\n}\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nexports.formatters.o = function(v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts)\n    .split('\\n').map(function(str) {\n      return str.trim()\n    }).join(' ');\n};\n\n/**\n * Map %o to `util.inspect()`, allowing multiple lines if needed.\n */\n\nexports.formatters.O = function(v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts);\n};\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var name = this.namespace;\n  var useColors = this.useColors;\n\n  if (useColors) {\n    var c = this.color;\n    var prefix = '  \\u001b[3' + c + ';1m' + name + ' ' + '\\u001b[0m';\n\n    args[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n    args.push('\\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\\u001b[0m');\n  } else {\n    args[0] = new Date().toUTCString()\n      + ' ' + name + ' ' + args[0];\n  }\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to `stream`.\n */\n\nfunction log() {\n  return stream.write(util.format.apply(util, arguments) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  if (null == namespaces) {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete process.env.DEBUG;\n  } else {\n    process.env.DEBUG = namespaces;\n  }\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  return process.env.DEBUG;\n}\n\n/**\n * Copied from `node/src/node.js`.\n *\n * XXX: It's lame that node doesn't expose this API out-of-the-box. It also\n * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.\n */\n\nfunction createWritableStdioStream (fd) {\n  var stream;\n  var tty_wrap = process.binding('tty_wrap');\n\n  // Note stream._type is used for test-module-load-list.js\n\n  switch (tty_wrap.guessHandleType(fd)) {\n    case 'TTY':\n      stream = new tty.WriteStream(fd);\n      stream._type = 'tty';\n\n      // Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n\n    case 'FILE':\n      var fs = require('fs');\n      stream = new fs.SyncWriteStream(fd, { autoClose: false });\n      stream._type = 'fs';\n      break;\n\n    case 'PIPE':\n    case 'TCP':\n      var net = require('net');\n      stream = new net.Socket({\n        fd: fd,\n        readable: false,\n        writable: true\n      });\n\n      // FIXME Should probably have an option in net.Socket to create a\n      // stream from an existing fd which is writable only. But for now\n      // we'll just add this hack and set the `readable` member to false.\n      // Test: ./node test/fixtures/echo.js < /etc/passwd\n      stream.readable = false;\n      stream.read = null;\n      stream._type = 'pipe';\n\n      // FIXME Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n\n    default:\n      // Probably an error on in uv_guess_handle()\n      throw new Error('Implement me. Unknown stream file type!');\n  }\n\n  // For supporting legacy API we put the FD here.\n  stream.fd = fd;\n\n  stream._isStdio = true;\n\n  return stream;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init (debug) {\n  debug.inspectOpts = {};\n\n  var keys = Object.keys(exports.inspectOpts);\n  for (var i = 0; i < keys.length; i++) {\n    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n  }\n}\n\n/**\n * Enable namespaces listed in `process.env.DEBUG` initially.\n */\n\nexports.enable(load());\n", "/**\n * Detect Electron renderer process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process !== 'undefined' && process.type === 'renderer') {\n  module.exports = require('./browser.js');\n} else {\n  module.exports = require('./node.js');\n}\n", "var noop = exports.noop = function(){};\n\nexports.extend = function extend(dest, source) {\n    for (var prop in source) {\n        dest[prop] = source[prop];\n    }\n};\n\nexports.eventEmitterListenerCount =\n    require('events').EventEmitter.listenerCount ||\n    function(emitter, type) { return emitter.listeners(type).length; };\n\nexports.bufferAllocUnsafe = Buffer.allocUnsafe ?\n    Buffer.allocUnsafe :\n    function oldBufferAllocUnsafe(size) { return new Buffer(size); };\n\nexports.bufferFromString = Buffer.from ?\n    Buffer.from :\n    function oldBufferFromString(string, encoding) {\n      return new Buffer(string, encoding);\n    };\n\nexports.BufferingLogger = function createBufferingLogger(identifier, uniqueID) {\n    var logFunction = require('debug')(identifier);\n    if (logFunction.enabled) {\n        var logger = new BufferingLogger(identifier, uniqueID, logFunction);\n        var debug = logger.log.bind(logger);\n        debug.printOutput = logger.printOutput.bind(logger);\n        debug.enabled = logFunction.enabled;\n        return debug;\n    }\n    logFunction.printOutput = noop;\n    return logFunction;\n};\n\nfunction BufferingLogger(identifier, uniqueID, logFunction) {\n    this.logFunction = logFunction;\n    this.identifier = identifier;\n    this.uniqueID = uniqueID;\n    this.buffer = [];\n}\n\nBufferingLogger.prototype.log = function() {\n  this.buffer.push([ new Date(), Array.prototype.slice.call(arguments) ]);\n  return this;\n};\n\nBufferingLogger.prototype.clear = function() {\n  this.buffer = [];\n  return this;\n};\n\nBufferingLogger.prototype.printOutput = function(logFunction) {\n    if (!logFunction) { logFunction = this.logFunction; }\n    var uniqueID = this.uniqueID;\n    this.buffer.forEach(function(entry) {\n        var date = entry[0].toLocaleString();\n        var args = entry[1].slice();\n        var formatString = args[0];\n        if (formatString !== (void 0) && formatString !== null) {\n            formatString = '%s - %s - ' + formatString.toString();\n            args.splice(0, 1, formatString, date, uniqueID);\n            logFunction.apply(global, args);\n        }\n    });\n};\n", "var fs = require('fs')\nvar path = require('path')\nvar os = require('os')\n\n// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'\nvar runtimeRequire = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require // eslint-disable-line\n\nvar vars = (process.config && process.config.variables) || {}\nvar prebuildsOnly = !!process.env.PREBUILDS_ONLY\nvar abi = process.versions.modules // TODO: support old node where this is undef\nvar runtime = isElectron() ? 'electron' : (isNwjs() ? 'node-webkit' : 'node')\n\nvar arch = process.env.npm_config_arch || os.arch()\nvar platform = process.env.npm_config_platform || os.platform()\nvar libc = process.env.LIBC || (isAlpine(platform) ? 'musl' : 'glibc')\nvar armv = process.env.ARM_VERSION || (arch === 'arm64' ? '8' : vars.arm_version) || ''\nvar uv = (process.versions.uv || '').split('.')[0]\n\nmodule.exports = load\n\nfunction load (dir) {\n  return runtimeRequire(load.resolve(dir))\n}\n\nload.resolve = load.path = function (dir) {\n  dir = path.resolve(dir || '.')\n\n  try {\n    var name = runtimeRequire(path.join(dir, 'package.json')).name.toUpperCase().replace(/-/g, '_')\n    if (process.env[name + '_PREBUILD']) dir = process.env[name + '_PREBUILD']\n  } catch (err) {}\n\n  if (!prebuildsOnly) {\n    var release = getFirst(path.join(dir, 'build/Release'), matchBuild)\n    if (release) return release\n\n    var debug = getFirst(path.join(dir, 'build/Debug'), matchBuild)\n    if (debug) return debug\n  }\n\n  var prebuild = resolve(dir)\n  if (prebuild) return prebuild\n\n  var nearby = resolve(path.dirname(process.execPath))\n  if (nearby) return nearby\n\n  var target = [\n    'platform=' + platform,\n    'arch=' + arch,\n    'runtime=' + runtime,\n    'abi=' + abi,\n    'uv=' + uv,\n    armv ? 'armv=' + armv : '',\n    'libc=' + libc,\n    'node=' + process.versions.node,\n    process.versions.electron ? 'electron=' + process.versions.electron : '',\n    typeof __webpack_require__ === 'function' ? 'webpack=true' : '' // eslint-disable-line\n  ].filter(Boolean).join(' ')\n\n  throw new Error('No native build was found for ' + target + '\\n    loaded from: ' + dir + '\\n')\n\n  function resolve (dir) {\n    // Find matching \"prebuilds/<platform>-<arch>\" directory\n    var tuples = readdirSync(path.join(dir, 'prebuilds')).map(parseTuple)\n    var tuple = tuples.filter(matchTuple(platform, arch)).sort(compareTuples)[0]\n    if (!tuple) return\n\n    // Find most specific flavor first\n    var prebuilds = path.join(dir, 'prebuilds', tuple.name)\n    var parsed = readdirSync(prebuilds).map(parseTags)\n    var candidates = parsed.filter(matchTags(runtime, abi))\n    var winner = candidates.sort(compareTags(runtime))[0]\n    if (winner) return path.join(prebuilds, winner.file)\n  }\n}\n\nfunction readdirSync (dir) {\n  try {\n    return fs.readdirSync(dir)\n  } catch (err) {\n    return []\n  }\n}\n\nfunction getFirst (dir, filter) {\n  var files = readdirSync(dir).filter(filter)\n  return files[0] && path.join(dir, files[0])\n}\n\nfunction matchBuild (name) {\n  return /\\.node$/.test(name)\n}\n\nfunction parseTuple (name) {\n  // Example: darwin-x64+arm64\n  var arr = name.split('-')\n  if (arr.length !== 2) return\n\n  var platform = arr[0]\n  var architectures = arr[1].split('+')\n\n  if (!platform) return\n  if (!architectures.length) return\n  if (!architectures.every(Boolean)) return\n\n  return { name, platform, architectures }\n}\n\nfunction matchTuple (platform, arch) {\n  return function (tuple) {\n    if (tuple == null) return false\n    if (tuple.platform !== platform) return false\n    return tuple.architectures.includes(arch)\n  }\n}\n\nfunction compareTuples (a, b) {\n  // Prefer single-arch prebuilds over multi-arch\n  return a.architectures.length - b.architectures.length\n}\n\nfunction parseTags (file) {\n  var arr = file.split('.')\n  var extension = arr.pop()\n  var tags = { file: file, specificity: 0 }\n\n  if (extension !== 'node') return\n\n  for (var i = 0; i < arr.length; i++) {\n    var tag = arr[i]\n\n    if (tag === 'node' || tag === 'electron' || tag === 'node-webkit') {\n      tags.runtime = tag\n    } else if (tag === 'napi') {\n      tags.napi = true\n    } else if (tag.slice(0, 3) === 'abi') {\n      tags.abi = tag.slice(3)\n    } else if (tag.slice(0, 2) === 'uv') {\n      tags.uv = tag.slice(2)\n    } else if (tag.slice(0, 4) === 'armv') {\n      tags.armv = tag.slice(4)\n    } else if (tag === 'glibc' || tag === 'musl') {\n      tags.libc = tag\n    } else {\n      continue\n    }\n\n    tags.specificity++\n  }\n\n  return tags\n}\n\nfunction matchTags (runtime, abi) {\n  return function (tags) {\n    if (tags == null) return false\n    if (tags.runtime !== runtime && !runtimeAgnostic(tags)) return false\n    if (tags.abi !== abi && !tags.napi) return false\n    if (tags.uv && tags.uv !== uv) return false\n    if (tags.armv && tags.armv !== armv) return false\n    if (tags.libc && tags.libc !== libc) return false\n\n    return true\n  }\n}\n\nfunction runtimeAgnostic (tags) {\n  return tags.runtime === 'node' && tags.napi\n}\n\nfunction compareTags (runtime) {\n  // Precedence: non-agnostic runtime, abi over napi, then by specificity.\n  return function (a, b) {\n    if (a.runtime !== b.runtime) {\n      return a.runtime === runtime ? -1 : 1\n    } else if (a.abi !== b.abi) {\n      return a.abi ? -1 : 1\n    } else if (a.specificity !== b.specificity) {\n      return a.specificity > b.specificity ? -1 : 1\n    } else {\n      return 0\n    }\n  }\n}\n\nfunction isNwjs () {\n  return !!(process.versions && process.versions.nw)\n}\n\nfunction isElectron () {\n  if (process.versions && process.versions.electron) return true\n  if (process.env.ELECTRON_RUN_AS_NODE) return true\n  return typeof window !== 'undefined' && window.process && window.process.type === 'renderer'\n}\n\nfunction isAlpine (platform) {\n  return platform === 'linux' && fs.existsSync('/etc/alpine-release')\n}\n\n// Exposed for unit tests\n// TODO: move to lib\nload.parseTags = parseTags\nload.matchTags = matchTags\nload.compareTags = compareTags\nload.parseTuple = parseTuple\nload.matchTuple = matchTuple\nload.compareTuples = compareTuples\n", "if (typeof process.addon === 'function') { // if the platform supports native resolving prefer that\n  module.exports = process.addon.bind(process)\n} else { // else use the runtime version here\n  module.exports = require('./node-gyp-build.js')\n}\n", "'use strict';\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nconst mask = (source, mask, output, offset, length) => {\n  for (var i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n};\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nconst unmask = (buffer, mask) => {\n  // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n  const length = buffer.length;\n  for (var i = 0; i < length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n};\n\nmodule.exports = { mask, unmask };\n", "'use strict';\n\ntry {\n  module.exports = require('node-gyp-build')(__dirname);\n} catch (e) {\n  module.exports = require('./fallback');\n}\n", "/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/\n\nvar bufferUtil = require('bufferutil');\nvar bufferAllocUnsafe = require('./utils').bufferAllocUnsafe;\n\nconst DECODE_HEADER = 1;\nconst WAITING_FOR_16_BIT_LENGTH = 2;\nconst WAITING_FOR_64_BIT_LENGTH = 3;\nconst WAITING_FOR_MASK_KEY = 4;\nconst WAITING_FOR_PAYLOAD = 5;\nconst COMPLETE = 6;\n\n// WebSocketConnection will pass shared buffer objects for maskBytes and\n// frameHeader into the constructor to avoid tons of small memory allocations\n// for each frame we have to parse.  This is only used for parsing frames\n// we receive off the wire.\nfunction WebSocketFrame(maskBytes, frameHeader, config) {\n    this.maskBytes = maskBytes;\n    this.frameHeader = frameHeader;\n    this.config = config;\n    this.maxReceivedFrameSize = config.maxReceivedFrameSize;\n    this.protocolError = false;\n    this.frameTooLarge = false;\n    this.invalidCloseFrameLength = false;\n    this.parseState = DECODE_HEADER;\n    this.closeStatus = -1;\n}\n\nWebSocketFrame.prototype.addData = function(bufferList) {\n    if (this.parseState === DECODE_HEADER) {\n        if (bufferList.length >= 2) {\n            bufferList.joinInto(this.frameHeader, 0, 0, 2);\n            bufferList.advance(2);\n            var firstByte = this.frameHeader[0];\n            var secondByte = this.frameHeader[1];\n\n            this.fin     = Boolean(firstByte  & 0x80);\n            this.rsv1    = Boolean(firstByte  & 0x40);\n            this.rsv2    = Boolean(firstByte  & 0x20);\n            this.rsv3    = Boolean(firstByte  & 0x10);\n            this.mask    = Boolean(secondByte & 0x80);\n\n            this.opcode  = firstByte  & 0x0F;\n            this.length = secondByte & 0x7F;\n\n            // Control frame sanity check\n            if (this.opcode >= 0x08) {\n                if (this.length > 125) {\n                    this.protocolError = true;\n                    this.dropReason = 'Illegal control frame longer than 125 bytes.';\n                    return true;\n                }\n                if (!this.fin) {\n                    this.protocolError = true;\n                    this.dropReason = 'Control frames must not be fragmented.';\n                    return true;\n                }\n            }\n\n            if (this.length === 126) {\n                this.parseState = WAITING_FOR_16_BIT_LENGTH;\n            }\n            else if (this.length === 127) {\n                this.parseState = WAITING_FOR_64_BIT_LENGTH;\n            }\n            else {\n                this.parseState = WAITING_FOR_MASK_KEY;\n            }\n        }\n    }\n    if (this.parseState === WAITING_FOR_16_BIT_LENGTH) {\n        if (bufferList.length >= 2) {\n            bufferList.joinInto(this.frameHeader, 2, 0, 2);\n            bufferList.advance(2);\n            this.length = this.frameHeader.readUInt16BE(2);\n            this.parseState = WAITING_FOR_MASK_KEY;\n        }\n    }\n    else if (this.parseState === WAITING_FOR_64_BIT_LENGTH) {\n        if (bufferList.length >= 8) {\n            bufferList.joinInto(this.frameHeader, 2, 0, 8);\n            bufferList.advance(8);\n            var lengthPair = [\n              this.frameHeader.readUInt32BE(2),\n              this.frameHeader.readUInt32BE(2+4)\n            ];\n\n            if (lengthPair[0] !== 0) {\n                this.protocolError = true;\n                this.dropReason = 'Unsupported 64-bit length frame received';\n                return true;\n            }\n            this.length = lengthPair[1];\n            this.parseState = WAITING_FOR_MASK_KEY;\n        }\n    }\n\n    if (this.parseState === WAITING_FOR_MASK_KEY) {\n        if (this.mask) {\n            if (bufferList.length >= 4) {\n                bufferList.joinInto(this.maskBytes, 0, 0, 4);\n                bufferList.advance(4);\n                this.parseState = WAITING_FOR_PAYLOAD;\n            }\n        }\n        else {\n            this.parseState = WAITING_FOR_PAYLOAD;\n        }\n    }\n\n    if (this.parseState === WAITING_FOR_PAYLOAD) {\n        if (this.length > this.maxReceivedFrameSize) {\n            this.frameTooLarge = true;\n            this.dropReason = 'Frame size of ' + this.length.toString(10) +\n                              ' bytes exceeds maximum accepted frame size';\n            return true;\n        }\n\n        if (this.length === 0) {\n            this.binaryPayload = bufferAllocUnsafe(0);\n            this.parseState = COMPLETE;\n            return true;\n        }\n        if (bufferList.length >= this.length) {\n            this.binaryPayload = bufferList.take(this.length);\n            bufferList.advance(this.length);\n            if (this.mask) {\n                bufferUtil.unmask(this.binaryPayload, this.maskBytes);\n                // xor(this.binaryPayload, this.maskBytes, 0);\n            }\n\n            if (this.opcode === 0x08) { // WebSocketOpcode.CONNECTION_CLOSE\n                if (this.length === 1) {\n                    // Invalid length for a close frame.  Must be zero or at least two.\n                    this.binaryPayload = bufferAllocUnsafe(0);\n                    this.invalidCloseFrameLength = true;\n                }\n                if (this.length >= 2) {\n                    this.closeStatus = this.binaryPayload.readUInt16BE(0);\n                    this.binaryPayload = this.binaryPayload.slice(2);\n                }\n            }\n\n            this.parseState = COMPLETE;\n            return true;\n        }\n    }\n    return false;\n};\n\nWebSocketFrame.prototype.throwAwayPayload = function(bufferList) {\n    if (bufferList.length >= this.length) {\n        bufferList.advance(this.length);\n        this.parseState = COMPLETE;\n        return true;\n    }\n    return false;\n};\n\nWebSocketFrame.prototype.toBuffer = function(nullMask) {\n    var maskKey;\n    var headerLength = 2;\n    var data;\n    var outputPos;\n    var firstByte = 0x00;\n    var secondByte = 0x00;\n\n    if (this.fin) {\n        firstByte |= 0x80;\n    }\n    if (this.rsv1) {\n        firstByte |= 0x40;\n    }\n    if (this.rsv2) {\n        firstByte |= 0x20;\n    }\n    if (this.rsv3) {\n        firstByte |= 0x10;\n    }\n    if (this.mask) {\n        secondByte |= 0x80;\n    }\n\n    firstByte |= (this.opcode & 0x0F);\n\n    // the close frame is a special case because the close reason is\n    // prepended to the payload data.\n    if (this.opcode === 0x08) {\n        this.length = 2;\n        if (this.binaryPayload) {\n            this.length += this.binaryPayload.length;\n        }\n        data = bufferAllocUnsafe(this.length);\n        data.writeUInt16BE(this.closeStatus, 0);\n        if (this.length > 2) {\n            this.binaryPayload.copy(data, 2);\n        }\n    }\n    else if (this.binaryPayload) {\n        data = this.binaryPayload;\n        this.length = data.length;\n    }\n    else {\n        this.length = 0;\n    }\n\n    if (this.length <= 125) {\n        // encode the length directly into the two-byte frame header\n        secondByte |= (this.length & 0x7F);\n    }\n    else if (this.length > 125 && this.length <= 0xFFFF) {\n        // Use 16-bit length\n        secondByte |= 126;\n        headerLength += 2;\n    }\n    else if (this.length > 0xFFFF) {\n        // Use 64-bit length\n        secondByte |= 127;\n        headerLength += 8;\n    }\n\n    var output = bufferAllocUnsafe(this.length + headerLength + (this.mask ? 4 : 0));\n\n    // write the frame header\n    output[0] = firstByte;\n    output[1] = secondByte;\n\n    outputPos = 2;\n\n    if (this.length > 125 && this.length <= 0xFFFF) {\n        // write 16-bit length\n        output.writeUInt16BE(this.length, outputPos);\n        outputPos += 2;\n    }\n    else if (this.length > 0xFFFF) {\n        // write 64-bit length\n        output.writeUInt32BE(0x00000000, outputPos);\n        output.writeUInt32BE(this.length, outputPos + 4);\n        outputPos += 8;\n    }\n\n    if (this.mask) {\n        maskKey = nullMask ? 0 : ((Math.random() * 0xFFFFFFFF) >>> 0);\n        this.maskBytes.writeUInt32BE(maskKey, 0);\n\n        // write the mask key\n        this.maskBytes.copy(output, outputPos);\n        outputPos += 4;\n\n        if (data) {\n          bufferUtil.mask(data, this.maskBytes, output, outputPos, this.length);\n        }\n    }\n    else if (data) {\n        data.copy(output, outputPos);\n    }\n\n    return output;\n};\n\nWebSocketFrame.prototype.toString = function() {\n    return 'Opcode: ' + this.opcode + ', fin: ' + this.fin + ', length: ' + this.length + ', hasPayload: ' + Boolean(this.binaryPayload) + ', masked: ' + this.mask;\n};\n\n\nmodule.exports = WebSocketFrame;\n", "// This file was copied from https://github.com/substack/node-bufferlist\n// and modified to be able to copy bytes from the bufferlist directly into\n// a pre-existing fixed-size buffer without an additional memory allocation.\n\n// bufferlist.js\n// Treat a linked list of buffers as a single variable-size buffer.\nvar Buffer = require('buffer').Buffer;\nvar EventEmitter = require('events').EventEmitter;\nvar bufferAllocUnsafe = require('../lib/utils').bufferAllocUnsafe;\n\nmodule.exports = BufferList;\nmodule.exports.BufferList = BufferList; // backwards compatibility\n\nfunction BufferList(opts) {\n    if (!(this instanceof BufferList)) return new BufferList(opts);\n    EventEmitter.call(this);\n    var self = this;\n    \n    if (typeof(opts) == 'undefined') opts = {};\n    \n    // default encoding to use for take(). Leaving as 'undefined'\n    // makes take() return a Buffer instead.\n    self.encoding = opts.encoding;\n    \n    var head = { next : null, buffer : null };\n    var last = { next : null, buffer : null };\n    \n    // length can get negative when advanced past the end\n    // and this is the desired behavior\n    var length = 0;\n    self.__defineGetter__('length', function () {\n        return length;\n    });\n    \n    // keep an offset of the head to decide when to head = head.next\n    var offset = 0;\n    \n    // Write to the bufferlist. Emits 'write'. Always returns true.\n    self.write = function (buf) {\n        if (!head.buffer) {\n            head.buffer = buf;\n            last = head;\n        }\n        else {\n            last.next = { next : null, buffer : buf };\n            last = last.next;\n        }\n        length += buf.length;\n        self.emit('write', buf);\n        return true;\n    };\n    \n    self.end = function (buf) {\n        if (Buffer.isBuffer(buf)) self.write(buf);\n    };\n    \n    // Push buffers to the end of the linked list. (deprecated)\n    // Return this (self).\n    self.push = function () {\n        var args = [].concat.apply([], arguments);\n        args.forEach(self.write);\n        return self;\n    };\n    \n    // For each buffer, perform some action.\n    // If fn's result is a true value, cut out early.\n    // Returns this (self).\n    self.forEach = function (fn) {\n        if (!head.buffer) return bufferAllocUnsafe(0);\n        \n        if (head.buffer.length - offset <= 0) return self;\n        var firstBuf = head.buffer.slice(offset);\n        \n        var b = { buffer : firstBuf, next : head.next };\n        \n        while (b && b.buffer) {\n            var r = fn(b.buffer);\n            if (r) break;\n            b = b.next;\n        }\n        \n        return self;\n    };\n    \n    // Create a single Buffer out of all the chunks or some subset specified by\n    // start and one-past the end (like slice) in bytes.\n    self.join = function (start, end) {\n        if (!head.buffer) return bufferAllocUnsafe(0);\n        if (start == undefined) start = 0;\n        if (end == undefined) end = self.length;\n        \n        var big = bufferAllocUnsafe(end - start);\n        var ix = 0;\n        self.forEach(function (buffer) {\n            if (start < (ix + buffer.length) && ix < end) {\n                // at least partially contained in the range\n                buffer.copy(\n                    big,\n                    Math.max(0, ix - start),\n                    Math.max(0, start - ix),\n                    Math.min(buffer.length, end - ix)\n                );\n            }\n            ix += buffer.length;\n            if (ix > end) return true; // stop processing past end\n        });\n        \n        return big;\n    };\n    \n    self.joinInto = function (targetBuffer, targetStart, sourceStart, sourceEnd) {\n        if (!head.buffer) return new bufferAllocUnsafe(0);\n        if (sourceStart == undefined) sourceStart = 0;\n        if (sourceEnd == undefined) sourceEnd = self.length;\n        \n        var big = targetBuffer;\n        if (big.length - targetStart < sourceEnd - sourceStart) {\n            throw new Error(\"Insufficient space available in target Buffer.\");\n        }\n        var ix = 0;\n        self.forEach(function (buffer) {\n            if (sourceStart < (ix + buffer.length) && ix < sourceEnd) {\n                // at least partially contained in the range\n                buffer.copy(\n                    big,\n                    Math.max(targetStart, targetStart + ix - sourceStart),\n                    Math.max(0, sourceStart - ix),\n                    Math.min(buffer.length, sourceEnd - ix)\n                );\n            }\n            ix += buffer.length;\n            if (ix > sourceEnd) return true; // stop processing past end\n        });\n        \n        return big;\n    };\n    \n    // Advance the buffer stream by n bytes.\n    // If n the aggregate advance offset passes the end of the buffer list,\n    // operations such as .take() will return empty strings until enough data is\n    // pushed.\n    // Returns this (self).\n    self.advance = function (n) {\n        offset += n;\n        length -= n;\n        while (head.buffer && offset >= head.buffer.length) {\n            offset -= head.buffer.length;\n            head = head.next\n                ? head.next\n                : { buffer : null, next : null }\n            ;\n        }\n        if (head.buffer === null) last = { next : null, buffer : null };\n        self.emit('advance', n);\n        return self;\n    };\n    \n    // Take n bytes from the start of the buffers.\n    // Returns a string.\n    // If there are less than n bytes in all the buffers or n is undefined,\n    // returns the entire concatenated buffer string.\n    self.take = function (n, encoding) {\n        if (n == undefined) n = self.length;\n        else if (typeof n !== 'number') {\n            encoding = n;\n            n = self.length;\n        }\n        var b = head;\n        if (!encoding) encoding = self.encoding;\n        if (encoding) {\n            var acc = '';\n            self.forEach(function (buffer) {\n                if (n <= 0) return true;\n                acc += buffer.toString(\n                    encoding, 0, Math.min(n,buffer.length)\n                );\n                n -= buffer.length;\n            });\n            return acc;\n        } else {\n            // If no 'encoding' is specified, then return a Buffer.\n            return self.join(0, n);\n        }\n    };\n    \n    // The entire concatenated buffer as a string.\n    self.toString = function () {\n        return self.take('binary');\n    };\n}\nrequire('util').inherits(BufferList, EventEmitter);\n", "'use strict';\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0x00) {  // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {  // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0  // overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {  // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80 ||  // overlong\n        buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0  // surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {  // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80 ||  // overlong\n        buf[i] === 0xf4 && buf[i + 1] > 0x8f || buf[i] > 0xf4  // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = isValidUTF8;\n", "'use strict';\n\ntry {\n  module.exports = require('node-gyp-build')(__dirname);\n} catch (e) {\n  module.exports = require('./fallback');\n}\n", "/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/\n\nvar util = require('util');\nvar utils = require('./utils');\nvar EventEmitter = require('events').EventEmitter;\nvar WebSocketFrame = require('./WebSocketFrame');\nvar BufferList = require('../vendor/FastBufferList');\nvar isValidUTF8 = require('utf-8-validate');\nvar bufferAllocUnsafe = utils.bufferAllocUnsafe;\nvar bufferFromString = utils.bufferFromString;\n\n// Connected, fully-open, ready to send and receive frames\nconst STATE_OPEN = 'open';\n// Received a close frame from the remote peer\nconst STATE_PEER_REQUESTED_CLOSE = 'peer_requested_close';\n// Sent close frame to remote peer.  No further data can be sent.\nconst STATE_ENDING = 'ending';\n// Connection is fully closed.  No further data can be sent or received.\nconst STATE_CLOSED = 'closed';\n\nvar setImmediateImpl = ('setImmediate' in global) ?\n                            global.setImmediate.bind(global) :\n                            process.nextTick.bind(process);\n\nvar idCounter = 0;\n\nfunction WebSocketConnection(socket, extensions, protocol, maskOutgoingPackets, config) {\n    this._debug = utils.BufferingLogger('websocket:connection', ++idCounter);\n    this._debug('constructor');\n    \n    if (this._debug.enabled) {\n        instrumentSocketForDebugging(this, socket);\n    }\n    \n    // Superclass Constructor\n    EventEmitter.call(this);\n\n    this._pingListenerCount = 0;\n    this.on('newListener', function(ev) {\n        if (ev === 'ping'){\n            this._pingListenerCount++;\n        }\n      }).on('removeListener', function(ev) {\n        if (ev === 'ping') {\n            this._pingListenerCount--;\n        }\n    });\n\n    this.config = config;\n    this.socket = socket;\n    this.protocol = protocol;\n    this.extensions = extensions;\n    this.remoteAddress = socket.remoteAddress;\n    this.closeReasonCode = -1;\n    this.closeDescription = null;\n    this.closeEventEmitted = false;\n\n    // We have to mask outgoing packets if we're acting as a WebSocket client.\n    this.maskOutgoingPackets = maskOutgoingPackets;\n\n    // We re-use the same buffers for the mask and frame header for all frames\n    // received on each connection to avoid a small memory allocation for each\n    // frame.\n    this.maskBytes = bufferAllocUnsafe(4);\n    this.frameHeader = bufferAllocUnsafe(10);\n\n    // the BufferList will handle the data streaming in\n    this.bufferList = new BufferList();\n\n    // Prepare for receiving first frame\n    this.currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    this.fragmentationSize = 0; // data received so far...\n    this.frameQueue = [];\n    \n    // Various bits of connection state\n    this.connected = true;\n    this.state = STATE_OPEN;\n    this.waitingForCloseResponse = false;\n    // Received TCP FIN, socket's readable stream is finished.\n    this.receivedEnd = false;\n\n    this.closeTimeout = this.config.closeTimeout;\n    this.assembleFragments = this.config.assembleFragments;\n    this.maxReceivedMessageSize = this.config.maxReceivedMessageSize;\n\n    this.outputBufferFull = false;\n    this.inputPaused = false;\n    this.receivedDataHandler = this.processReceivedData.bind(this);\n    this._closeTimerHandler = this.handleCloseTimer.bind(this);\n\n    // Disable nagle algorithm?\n    this.socket.setNoDelay(this.config.disableNagleAlgorithm);\n\n    // Make sure there is no socket inactivity timeout\n    this.socket.setTimeout(0);\n\n    if (this.config.keepalive && !this.config.useNativeKeepalive) {\n        if (typeof(this.config.keepaliveInterval) !== 'number') {\n            throw new Error('keepaliveInterval must be specified and numeric ' +\n                            'if keepalive is true.');\n        }\n        this._keepaliveTimerHandler = this.handleKeepaliveTimer.bind(this);\n        this.setKeepaliveTimer();\n\n        if (this.config.dropConnectionOnKeepaliveTimeout) {\n            if (typeof(this.config.keepaliveGracePeriod) !== 'number') {\n                throw new Error('keepaliveGracePeriod  must be specified and ' +\n                                'numeric if dropConnectionOnKeepaliveTimeout ' +\n                                'is true.');\n            }\n            this._gracePeriodTimerHandler = this.handleGracePeriodTimer.bind(this);\n        }\n    }\n    else if (this.config.keepalive && this.config.useNativeKeepalive) {\n        if (!('setKeepAlive' in this.socket)) {\n            throw new Error('Unable to use native keepalive: unsupported by ' +\n                            'this version of Node.');\n        }\n        this.socket.setKeepAlive(true, this.config.keepaliveInterval);\n    }\n    \n    // The HTTP Client seems to subscribe to socket error events\n    // and re-dispatch them in such a way that doesn't make sense\n    // for users of our client, so we want to make sure nobody\n    // else is listening for error events on the socket besides us.\n    this.socket.removeAllListeners('error');\n}\n\nWebSocketConnection.CLOSE_REASON_NORMAL = 1000;\nWebSocketConnection.CLOSE_REASON_GOING_AWAY = 1001;\nWebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR = 1002;\nWebSocketConnection.CLOSE_REASON_UNPROCESSABLE_INPUT = 1003;\nWebSocketConnection.CLOSE_REASON_RESERVED = 1004; // Reserved value.  Undefined meaning.\nWebSocketConnection.CLOSE_REASON_NOT_PROVIDED = 1005; // Not to be used on the wire\nWebSocketConnection.CLOSE_REASON_ABNORMAL = 1006; // Not to be used on the wire\nWebSocketConnection.CLOSE_REASON_INVALID_DATA = 1007;\nWebSocketConnection.CLOSE_REASON_POLICY_VIOLATION = 1008;\nWebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG = 1009;\nWebSocketConnection.CLOSE_REASON_EXTENSION_REQUIRED = 1010;\nWebSocketConnection.CLOSE_REASON_INTERNAL_SERVER_ERROR = 1011;\nWebSocketConnection.CLOSE_REASON_TLS_HANDSHAKE_FAILED = 1015; // Not to be used on the wire\n\nWebSocketConnection.CLOSE_DESCRIPTIONS = {\n    1000: 'Normal connection closure',\n    1001: 'Remote peer is going away',\n    1002: 'Protocol error',\n    1003: 'Unprocessable input',\n    1004: 'Reserved',\n    1005: 'Reason not provided',\n    1006: 'Abnormal closure, no further detail available',\n    1007: 'Invalid data received',\n    1008: 'Policy violation',\n    1009: 'Message too big',\n    1010: 'Extension requested by client is required',\n    1011: 'Internal Server Error',\n    1015: 'TLS Handshake Failed'\n};\n\nfunction validateCloseReason(code) {\n    if (code < 1000) {\n        // Status codes in the range 0-999 are not used\n        return false;\n    }\n    if (code >= 1000 && code <= 2999) {\n        // Codes from 1000 - 2999 are reserved for use by the protocol.  Only\n        // a few codes are defined, all others are currently illegal.\n        return [1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015].indexOf(code) !== -1;\n    }\n    if (code >= 3000 && code <= 3999) {\n        // Reserved for use by libraries, frameworks, and applications.\n        // Should be registered with IANA.  Interpretation of these codes is\n        // undefined by the WebSocket protocol.\n        return true;\n    }\n    if (code >= 4000 && code <= 4999) {\n        // Reserved for private use.  Interpretation of these codes is\n        // undefined by the WebSocket protocol.\n        return true;\n    }\n    if (code >= 5000) {\n        return false;\n    }\n}\n\nutil.inherits(WebSocketConnection, EventEmitter);\n\nWebSocketConnection.prototype._addSocketEventListeners = function() {\n    this.socket.on('error', this.handleSocketError.bind(this));\n    this.socket.on('end', this.handleSocketEnd.bind(this));\n    this.socket.on('close', this.handleSocketClose.bind(this));\n    this.socket.on('drain', this.handleSocketDrain.bind(this));\n    this.socket.on('pause', this.handleSocketPause.bind(this));\n    this.socket.on('resume', this.handleSocketResume.bind(this));\n    this.socket.on('data', this.handleSocketData.bind(this));\n};\n\n// set or reset the keepalive timer when data is received.\nWebSocketConnection.prototype.setKeepaliveTimer = function() {\n    this._debug('setKeepaliveTimer');\n    if (!this.config.keepalive  || this.config.useNativeKeepalive) { return; }\n    this.clearKeepaliveTimer();\n    this.clearGracePeriodTimer();\n    this._keepaliveTimeoutID = setTimeout(this._keepaliveTimerHandler, this.config.keepaliveInterval);\n};\n\nWebSocketConnection.prototype.clearKeepaliveTimer = function() {\n    if (this._keepaliveTimeoutID) {\n        clearTimeout(this._keepaliveTimeoutID);\n    }\n};\n\n// No data has been received within config.keepaliveTimeout ms.\nWebSocketConnection.prototype.handleKeepaliveTimer = function() {\n    this._debug('handleKeepaliveTimer');\n    this._keepaliveTimeoutID = null;\n    this.ping();\n\n    // If we are configured to drop connections if the client doesn't respond\n    // then set the grace period timer.\n    if (this.config.dropConnectionOnKeepaliveTimeout) {\n        this.setGracePeriodTimer();\n    }\n    else {\n        // Otherwise reset the keepalive timer to send the next ping.\n        this.setKeepaliveTimer();\n    }\n};\n\nWebSocketConnection.prototype.setGracePeriodTimer = function() {\n    this._debug('setGracePeriodTimer');\n    this.clearGracePeriodTimer();\n    this._gracePeriodTimeoutID = setTimeout(this._gracePeriodTimerHandler, this.config.keepaliveGracePeriod);\n};\n\nWebSocketConnection.prototype.clearGracePeriodTimer = function() {\n    if (this._gracePeriodTimeoutID) {\n        clearTimeout(this._gracePeriodTimeoutID);\n    }\n};\n\nWebSocketConnection.prototype.handleGracePeriodTimer = function() {\n    this._debug('handleGracePeriodTimer');\n    // If this is called, the client has not responded and is assumed dead.\n    this._gracePeriodTimeoutID = null;\n    this.drop(WebSocketConnection.CLOSE_REASON_ABNORMAL, 'Peer not responding.', true);\n};\n\nWebSocketConnection.prototype.handleSocketData = function(data) {\n    this._debug('handleSocketData');\n    // Reset the keepalive timer when receiving data of any kind.\n    this.setKeepaliveTimer();\n\n    // Add received data to our bufferList, which efficiently holds received\n    // data chunks in a linked list of Buffer objects.\n    this.bufferList.write(data);\n\n    this.processReceivedData();\n};\n\nWebSocketConnection.prototype.processReceivedData = function() {\n    this._debug('processReceivedData');\n    // If we're not connected, we should ignore any data remaining on the buffer.\n    if (!this.connected) { return; }\n\n    // Receiving/parsing is expected to be halted when paused.\n    if (this.inputPaused) { return; }\n\n    var frame = this.currentFrame;\n\n    // WebSocketFrame.prototype.addData returns true if all data necessary to\n    // parse the frame was available.  It returns false if we are waiting for\n    // more data to come in on the wire.\n    if (!frame.addData(this.bufferList)) { this._debug('-- insufficient data for frame'); return; }\n\n    var self = this;\n\n    // Handle possible parsing errors\n    if (frame.protocolError) {\n        // Something bad happened.. get rid of this client.\n        this._debug('-- protocol error');\n        process.nextTick(function() {\n            self.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, frame.dropReason);\n        });\n        return;\n    }\n    else if (frame.frameTooLarge) {\n        this._debug('-- frame too large');\n        process.nextTick(function() {\n            self.drop(WebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG, frame.dropReason);\n        });\n        return;\n    }\n\n    // For now since we don't support extensions, all RSV bits are illegal\n    if (frame.rsv1 || frame.rsv2 || frame.rsv3) {\n        this._debug('-- illegal rsv flag');\n        process.nextTick(function() {\n            self.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR,\n              'Unsupported usage of rsv bits without negotiated extension.');\n        });\n        return;\n    }\n\n    if (!this.assembleFragments) {\n        this._debug('-- emitting frame');\n        process.nextTick(function() { self.emit('frame', frame); });\n    }\n\n    process.nextTick(function() { self.processFrame(frame); });\n    \n    this.currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n\n    // If there's data remaining, schedule additional processing, but yield\n    // for now so that other connections have a chance to have their data\n    // processed.  We use setImmediate here instead of process.nextTick to\n    // explicitly indicate that we wish for other I/O to be handled first.\n    if (this.bufferList.length > 0) {\n        setImmediateImpl(this.receivedDataHandler);\n    }\n};\n\nWebSocketConnection.prototype.handleSocketError = function(error) {\n    this._debug('handleSocketError: %j', error);\n    if (this.state === STATE_CLOSED) {\n\t\t// See https://github.com/theturtle32/WebSocket-Node/issues/288\n        this._debug('  --- Socket \\'error\\' after \\'close\\'');\n        return;\n    }\n    this.closeReasonCode = WebSocketConnection.CLOSE_REASON_ABNORMAL;\n    this.closeDescription = 'Socket Error: ' + error.syscall + ' ' + error.code;\n    this.connected = false;\n    this.state = STATE_CLOSED;\n    this.fragmentationSize = 0;\n    if (utils.eventEmitterListenerCount(this, 'error') > 0) {\n        this.emit('error', error);\n    }\n    this.socket.destroy();\n    this._debug.printOutput();\n};\n\nWebSocketConnection.prototype.handleSocketEnd = function() {\n    this._debug('handleSocketEnd: received socket end.  state = %s', this.state);\n    this.receivedEnd = true;\n    if (this.state === STATE_CLOSED) {\n        // When using the TLS module, sometimes the socket will emit 'end'\n        // after it emits 'close'.  I don't think that's correct behavior,\n        // but we should deal with it gracefully by ignoring it.\n        this._debug('  --- Socket \\'end\\' after \\'close\\'');\n        return;\n    }\n    if (this.state !== STATE_PEER_REQUESTED_CLOSE &&\n        this.state !== STATE_ENDING) {\n      this._debug('  --- UNEXPECTED socket end.');\n      this.socket.end();\n    }\n};\n\nWebSocketConnection.prototype.handleSocketClose = function(hadError) {\n    this._debug('handleSocketClose: received socket close');\n    this.socketHadError = hadError;\n    this.connected = false;\n    this.state = STATE_CLOSED;\n    // If closeReasonCode is still set to -1 at this point then we must\n    // not have received a close frame!!\n    if (this.closeReasonCode === -1) {\n        this.closeReasonCode = WebSocketConnection.CLOSE_REASON_ABNORMAL;\n        this.closeDescription = 'Connection dropped by remote peer.';\n    }\n    this.clearCloseTimer();\n    this.clearKeepaliveTimer();\n    this.clearGracePeriodTimer();\n    if (!this.closeEventEmitted) {\n        this.closeEventEmitted = true;\n        this._debug('-- Emitting WebSocketConnection close event');\n        this.emit('close', this.closeReasonCode, this.closeDescription);\n    }\n};\n\nWebSocketConnection.prototype.handleSocketDrain = function() {\n    this._debug('handleSocketDrain: socket drain event');\n    this.outputBufferFull = false;\n    this.emit('drain');\n};\n\nWebSocketConnection.prototype.handleSocketPause = function() {\n    this._debug('handleSocketPause: socket pause event');\n    this.inputPaused = true;\n    this.emit('pause');\n};\n\nWebSocketConnection.prototype.handleSocketResume = function() {\n    this._debug('handleSocketResume: socket resume event');\n    this.inputPaused = false;\n    this.emit('resume');\n    this.processReceivedData();\n};\n\nWebSocketConnection.prototype.pause = function() {\n    this._debug('pause: pause requested');\n    this.socket.pause();\n};\n\nWebSocketConnection.prototype.resume = function() {\n    this._debug('resume: resume requested');\n    this.socket.resume();\n};\n\nWebSocketConnection.prototype.close = function(reasonCode, description) {\n    if (this.connected) {\n        this._debug('close: Initating clean WebSocket close sequence.');\n        if ('number' !== typeof reasonCode) {\n            reasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n        }\n        if (!validateCloseReason(reasonCode)) {\n            throw new Error('Close code ' + reasonCode + ' is not valid.');\n        }\n        if ('string' !== typeof description) {\n            description = WebSocketConnection.CLOSE_DESCRIPTIONS[reasonCode];\n        }\n        this.closeReasonCode = reasonCode;\n        this.closeDescription = description;\n        this.setCloseTimer();\n        this.sendCloseFrame(this.closeReasonCode, this.closeDescription);\n        this.state = STATE_ENDING;\n        this.connected = false;\n    }\n};\n\nWebSocketConnection.prototype.drop = function(reasonCode, description, skipCloseFrame) {\n    this._debug('drop');\n    if (typeof(reasonCode) !== 'number') {\n        reasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n    }\n\n    if (typeof(description) !== 'string') {\n        // If no description is provided, try to look one up based on the\n        // specified reasonCode.\n        description = WebSocketConnection.CLOSE_DESCRIPTIONS[reasonCode];\n    }\n\n    this._debug('Forcefully dropping connection. skipCloseFrame: %s, code: %d, description: %s',\n        skipCloseFrame, reasonCode, description\n    );\n\n    this.closeReasonCode = reasonCode;\n    this.closeDescription = description;\n    this.frameQueue = [];\n    this.fragmentationSize = 0;\n    if (!skipCloseFrame) {\n        this.sendCloseFrame(reasonCode, description);\n    }\n    this.connected = false;\n    this.state = STATE_CLOSED;\n    this.clearCloseTimer();\n    this.clearKeepaliveTimer();\n    this.clearGracePeriodTimer();\n\n    if (!this.closeEventEmitted) {\n        this.closeEventEmitted = true;\n        this._debug('Emitting WebSocketConnection close event');\n        this.emit('close', this.closeReasonCode, this.closeDescription);\n    }\n    \n    this._debug('Drop: destroying socket');\n    this.socket.destroy();\n};\n\nWebSocketConnection.prototype.setCloseTimer = function() {\n    this._debug('setCloseTimer');\n    this.clearCloseTimer();\n    this._debug('Setting close timer');\n    this.waitingForCloseResponse = true;\n    this.closeTimer = setTimeout(this._closeTimerHandler, this.closeTimeout);\n};\n\nWebSocketConnection.prototype.clearCloseTimer = function() {\n    this._debug('clearCloseTimer');\n    if (this.closeTimer) {\n        this._debug('Clearing close timer');\n        clearTimeout(this.closeTimer);\n        this.waitingForCloseResponse = false;\n        this.closeTimer = null;\n    }\n};\n\nWebSocketConnection.prototype.handleCloseTimer = function() {\n    this._debug('handleCloseTimer');\n    this.closeTimer = null;\n    if (this.waitingForCloseResponse) {\n        this._debug('Close response not received from client.  Forcing socket end.');\n        this.waitingForCloseResponse = false;\n        this.state = STATE_CLOSED;\n        this.socket.end();\n    }\n};\n\nWebSocketConnection.prototype.processFrame = function(frame) {\n    this._debug('processFrame');\n    this._debug(' -- frame: %s', frame);\n    \n    // Any non-control opcode besides 0x00 (continuation) received in the\n    // middle of a fragmented message is illegal.\n    if (this.frameQueue.length !== 0 && (frame.opcode > 0x00 && frame.opcode < 0x08)) {\n        this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR,\n          'Illegal frame opcode 0x' + frame.opcode.toString(16) + ' ' +\n          'received in middle of fragmented message.');\n        return;\n    }\n\n    switch(frame.opcode) {\n        case 0x02: // WebSocketFrame.BINARY_FRAME\n            this._debug('-- Binary Frame');\n            if (this.assembleFragments) {\n                if (frame.fin) {\n                    // Complete single-frame message received\n                    this._debug('---- Emitting \\'message\\' event');\n                    this.emit('message', {\n                        type: 'binary',\n                        binaryData: frame.binaryPayload\n                    });\n                }\n                else {\n                    // beginning of a fragmented message\n                    this.frameQueue.push(frame);\n                    this.fragmentationSize = frame.length;\n                }\n            }\n            break;\n        case 0x01: // WebSocketFrame.TEXT_FRAME\n            this._debug('-- Text Frame');\n            if (this.assembleFragments) {\n                if (frame.fin) {\n                    if (!isValidUTF8(frame.binaryPayload)) {\n                        this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA,\n                          'Invalid UTF-8 Data Received');\n                        return;\n                    }\n                    // Complete single-frame message received\n                    this._debug('---- Emitting \\'message\\' event');\n                    this.emit('message', {\n                        type: 'utf8',\n                        utf8Data: frame.binaryPayload.toString('utf8')\n                    });\n                }\n                else {\n                    // beginning of a fragmented message\n                    this.frameQueue.push(frame);\n                    this.fragmentationSize = frame.length;\n                }\n            }\n            break;\n        case 0x00: // WebSocketFrame.CONTINUATION\n            this._debug('-- Continuation Frame');\n            if (this.assembleFragments) {\n                if (this.frameQueue.length === 0) {\n                    this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR,\n                      'Unexpected Continuation Frame');\n                    return;\n                }\n\n                this.fragmentationSize += frame.length;\n\n                if (this.fragmentationSize > this.maxReceivedMessageSize) {\n                    this.drop(WebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG,\n                      'Maximum message size exceeded.');\n                    return;\n                }\n\n                this.frameQueue.push(frame);\n\n                if (frame.fin) {\n                    // end of fragmented message, so we process the whole\n                    // message now.  We also have to decode the utf-8 data\n                    // for text frames after combining all the fragments.\n                    var bytesCopied = 0;\n                    var binaryPayload = bufferAllocUnsafe(this.fragmentationSize);\n                    var opcode = this.frameQueue[0].opcode;\n                    this.frameQueue.forEach(function (currentFrame) {\n                        currentFrame.binaryPayload.copy(binaryPayload, bytesCopied);\n                        bytesCopied += currentFrame.binaryPayload.length;\n                    });\n                    this.frameQueue = [];\n                    this.fragmentationSize = 0;\n\n                    switch (opcode) {\n                        case 0x02: // WebSocketOpcode.BINARY_FRAME\n                            this.emit('message', {\n                                type: 'binary',\n                                binaryData: binaryPayload\n                            });\n                            break;\n                        case 0x01: // WebSocketOpcode.TEXT_FRAME\n                            if (!isValidUTF8(binaryPayload)) {\n                                this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA,\n                                  'Invalid UTF-8 Data Received');\n                                return;\n                            }\n                            this.emit('message', {\n                                type: 'utf8',\n                                utf8Data: binaryPayload.toString('utf8')\n                            });\n                            break;\n                        default:\n                            this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR,\n                              'Unexpected first opcode in fragmentation sequence: 0x' + opcode.toString(16));\n                            return;\n                    }\n                }\n            }\n            break;\n        case 0x09: // WebSocketFrame.PING\n            this._debug('-- Ping Frame');\n\n            if (this._pingListenerCount > 0) {\n                // logic to emit the ping frame: this is only done when a listener is known to exist\n                // Expose a function allowing the user to override the default ping() behavior\n                var cancelled = false;\n                var cancel = function() { \n                  cancelled = true; \n                };\n                this.emit('ping', cancel, frame.binaryPayload);\n\n                // Only send a pong if the client did not indicate that he would like to cancel\n                if (!cancelled) {\n                    this.pong(frame.binaryPayload);\n                }\n            }\n            else {\n                this.pong(frame.binaryPayload);\n            }\n\n            break;\n        case 0x0A: // WebSocketFrame.PONG\n            this._debug('-- Pong Frame');\n            this.emit('pong', frame.binaryPayload);\n            break;\n        case 0x08: // WebSocketFrame.CONNECTION_CLOSE\n            this._debug('-- Close Frame');\n            if (this.waitingForCloseResponse) {\n                // Got response to our request to close the connection.\n                // Close is complete, so we just hang up.\n                this._debug('---- Got close response from peer.  Completing closing handshake.');\n                this.clearCloseTimer();\n                this.waitingForCloseResponse = false;\n                this.state = STATE_CLOSED;\n                this.socket.end();\n                return;\n            }\n            \n            this._debug('---- Closing handshake initiated by peer.');\n            // Got request from other party to close connection.\n            // Send back acknowledgement and then hang up.\n            this.state = STATE_PEER_REQUESTED_CLOSE;\n            var respondCloseReasonCode;\n\n            // Make sure the close reason provided is legal according to\n            // the protocol spec.  Providing no close status is legal.\n            // WebSocketFrame sets closeStatus to -1 by default, so if it\n            // is still -1, then no status was provided.\n            if (frame.invalidCloseFrameLength) {\n                this.closeReasonCode = 1005; // 1005 = No reason provided.\n                respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n            }\n            else if (frame.closeStatus === -1 || validateCloseReason(frame.closeStatus)) {\n                this.closeReasonCode = frame.closeStatus;\n                respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n            }\n            else {\n                this.closeReasonCode = frame.closeStatus;\n                respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n            }\n            \n            // If there is a textual description in the close frame, extract it.\n            if (frame.binaryPayload.length > 1) {\n                if (!isValidUTF8(frame.binaryPayload)) {\n                    this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA,\n                      'Invalid UTF-8 Data Received');\n                    return;\n                }\n                this.closeDescription = frame.binaryPayload.toString('utf8');\n            }\n            else {\n                this.closeDescription = WebSocketConnection.CLOSE_DESCRIPTIONS[this.closeReasonCode];\n            }\n            this._debug(\n                '------ Remote peer %s - code: %d - %s - close frame payload length: %d',\n                this.remoteAddress, this.closeReasonCode,\n                this.closeDescription, frame.length\n            );\n            this._debug('------ responding to remote peer\\'s close request.');\n            this.sendCloseFrame(respondCloseReasonCode, null);\n            this.connected = false;\n            break;\n        default:\n            this._debug('-- Unrecognized Opcode %d', frame.opcode);\n            this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR,\n              'Unrecognized Opcode: 0x' + frame.opcode.toString(16));\n            break;\n    }\n};\n\nWebSocketConnection.prototype.send = function(data, cb) {\n    this._debug('send');\n    if (Buffer.isBuffer(data)) {\n        this.sendBytes(data, cb);\n    }\n    else if (typeof(data['toString']) === 'function') {\n        this.sendUTF(data, cb);\n    }\n    else {\n        throw new Error('Data provided must either be a Node Buffer or implement toString()');\n    }\n};\n\nWebSocketConnection.prototype.sendUTF = function(data, cb) {\n    data = bufferFromString(data.toString(), 'utf8');\n    this._debug('sendUTF: %d bytes', data.length);\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x01; // WebSocketOpcode.TEXT_FRAME\n    frame.binaryPayload = data;\n    this.fragmentAndSend(frame, cb);\n};\n\nWebSocketConnection.prototype.sendBytes = function(data, cb) {\n    this._debug('sendBytes');\n    if (!Buffer.isBuffer(data)) {\n        throw new Error('You must pass a Node Buffer object to WebSocketConnection.prototype.sendBytes()');\n    }\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x02; // WebSocketOpcode.BINARY_FRAME\n    frame.binaryPayload = data;\n    this.fragmentAndSend(frame, cb);\n};\n\nWebSocketConnection.prototype.ping = function(data) {\n    this._debug('ping');\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x09; // WebSocketOpcode.PING\n    frame.fin = true;\n    if (data) {\n        if (!Buffer.isBuffer(data)) {\n            data = bufferFromString(data.toString(), 'utf8');\n        }\n        if (data.length > 125) {\n            this._debug('WebSocket: Data for ping is longer than 125 bytes.  Truncating.');\n            data = data.slice(0,124);\n        }\n        frame.binaryPayload = data;\n    }\n    this.sendFrame(frame);\n};\n\n// Pong frames have to echo back the contents of the data portion of the\n// ping frame exactly, byte for byte.\nWebSocketConnection.prototype.pong = function(binaryPayload) {\n    this._debug('pong');\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x0A; // WebSocketOpcode.PONG\n    if (Buffer.isBuffer(binaryPayload) && binaryPayload.length > 125) {\n        this._debug('WebSocket: Data for pong is longer than 125 bytes.  Truncating.');\n        binaryPayload = binaryPayload.slice(0,124);\n    }\n    frame.binaryPayload = binaryPayload;\n    frame.fin = true;\n    this.sendFrame(frame);\n};\n\nWebSocketConnection.prototype.fragmentAndSend = function(frame, cb) {\n    this._debug('fragmentAndSend');\n    if (frame.opcode > 0x07) {\n        throw new Error('You cannot fragment control frames.');\n    }\n\n    var threshold = this.config.fragmentationThreshold;\n    var length = frame.binaryPayload.length;\n\n    // Send immediately if fragmentation is disabled or the message is not\n    // larger than the fragmentation threshold.\n    if (!this.config.fragmentOutgoingMessages || (frame.binaryPayload && length <= threshold)) {\n        frame.fin = true;\n        this.sendFrame(frame, cb);\n        return;\n    }\n    \n    var numFragments = Math.ceil(length / threshold);\n    var sentFragments = 0;\n    var sentCallback = function fragmentSentCallback(err) {\n        if (err) {\n            if (typeof cb === 'function') {\n                // pass only the first error\n                cb(err);\n                cb = null;\n            }\n            return;\n        }\n        ++sentFragments;\n        if ((sentFragments === numFragments) && (typeof cb === 'function')) {\n            cb();\n        }\n    };\n    for (var i=1; i <= numFragments; i++) {\n        var currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n        \n        // continuation opcode except for first frame.\n        currentFrame.opcode = (i === 1) ? frame.opcode : 0x00;\n        \n        // fin set on last frame only\n        currentFrame.fin = (i === numFragments);\n        \n        // length is likely to be shorter on the last fragment\n        var currentLength = (i === numFragments) ? length - (threshold * (i-1)) : threshold;\n        var sliceStart = threshold * (i-1);\n        \n        // Slice the right portion of the original payload\n        currentFrame.binaryPayload = frame.binaryPayload.slice(sliceStart, sliceStart + currentLength);\n        \n        this.sendFrame(currentFrame, sentCallback);\n    }\n};\n\nWebSocketConnection.prototype.sendCloseFrame = function(reasonCode, description, cb) {\n    if (typeof(reasonCode) !== 'number') {\n        reasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n    }\n    \n    this._debug('sendCloseFrame state: %s, reasonCode: %d, description: %s', this.state, reasonCode, description);\n    \n    if (this.state !== STATE_OPEN && this.state !== STATE_PEER_REQUESTED_CLOSE) { return; }\n    \n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.fin = true;\n    frame.opcode = 0x08; // WebSocketOpcode.CONNECTION_CLOSE\n    frame.closeStatus = reasonCode;\n    if (typeof(description) === 'string') {\n        frame.binaryPayload = bufferFromString(description, 'utf8');\n    }\n    \n    this.sendFrame(frame, cb);\n    this.socket.end();\n};\n\nWebSocketConnection.prototype.sendFrame = function(frame, cb) {\n    this._debug('sendFrame');\n    frame.mask = this.maskOutgoingPackets;\n    var flushed = this.socket.write(frame.toBuffer(), cb);\n    this.outputBufferFull = !flushed;\n    return flushed;\n};\n\nmodule.exports = WebSocketConnection;\n\n\n\nfunction instrumentSocketForDebugging(connection, socket) {\n    /* jshint loopfunc: true */\n    if (!connection._debug.enabled) { return; }\n    \n    var originalSocketEmit = socket.emit;\n    socket.emit = function(event) {\n        connection._debug('||| Socket Event  \\'%s\\'', event);\n        originalSocketEmit.apply(this, arguments);\n    };\n    \n    for (var key in socket) {\n        if ('function' !== typeof(socket[key])) { continue; }\n        if (['emit'].indexOf(key) !== -1) { continue; }\n        (function(key) {\n            var original = socket[key];\n            if (key === 'on') {\n                socket[key] = function proxyMethod__EventEmitter__On() {\n                    connection._debug('||| Socket method called:  %s (%s)', key, arguments[0]);\n                    return original.apply(this, arguments);\n                };\n                return;\n            }\n            socket[key] = function proxyMethod() {\n                connection._debug('||| Socket method called:  %s', key);\n                return original.apply(this, arguments);\n            };\n        })(key);\n    }\n}\n", "/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/\n\nvar crypto = require('crypto');\nvar util = require('util');\nvar url = require('url');\nvar EventEmitter = require('events').EventEmitter;\nvar WebSocketConnection = require('./WebSocketConnection');\n\nvar headerValueSplitRegExp = /,\\s*/;\nvar headerParamSplitRegExp = /;\\s*/;\nvar headerSanitizeRegExp = /[\\r\\n]/g;\nvar xForwardedForSeparatorRegExp = /,\\s*/;\nvar separators = [\n    '(', ')', '<', '>', '@',\n    ',', ';', ':', '\\\\', '\\\"',\n    '/', '[', ']', '?', '=',\n    '{', '}', ' ', String.fromCharCode(9)\n];\nvar controlChars = [String.fromCharCode(127) /* DEL */];\nfor (var i=0; i < 31; i ++) {\n    /* US-ASCII Control Characters */\n    controlChars.push(String.fromCharCode(i));\n}\n\nvar cookieNameValidateRegEx = /([\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2f\\x3a-\\x3f\\x40\\x5b-\\x5e\\x7b\\x7d\\x7f])/;\nvar cookieValueValidateRegEx = /[^\\x21\\x23-\\x2b\\x2d-\\x3a\\x3c-\\x5b\\x5d-\\x7e]/;\nvar cookieValueDQuoteValidateRegEx = /^\"[^\"]*\"$/;\nvar controlCharsAndSemicolonRegEx = /[\\x00-\\x20\\x3b]/g;\n\nvar cookieSeparatorRegEx = /[;,] */;\n\nvar httpStatusDescriptions = {\n    100: 'Continue',\n    101: 'Switching Protocols',\n    200: 'OK',\n    201: 'Created',\n    203: 'Non-Authoritative Information',\n    204: 'No Content',\n    205: 'Reset Content',\n    206: 'Partial Content',\n    300: 'Multiple Choices',\n    301: 'Moved Permanently',\n    302: 'Found',\n    303: 'See Other',\n    304: 'Not Modified',\n    305: 'Use Proxy',\n    307: 'Temporary Redirect',\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found',\n    406: 'Not Acceptable',\n    407: 'Proxy Authorization Required',\n    408: 'Request Timeout',\n    409: 'Conflict',\n    410: 'Gone',\n    411: 'Length Required',\n    412: 'Precondition Failed',\n    413: 'Request Entity Too Long',\n    414: 'Request-URI Too Long',\n    415: 'Unsupported Media Type',\n    416: 'Requested Range Not Satisfiable',\n    417: 'Expectation Failed',\n    426: 'Upgrade Required',\n    500: 'Internal Server Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Gateway Timeout',\n    505: 'HTTP Version Not Supported'\n};\n\nfunction WebSocketRequest(socket, httpRequest, serverConfig) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n\n    this.socket = socket;\n    this.httpRequest = httpRequest;\n    this.resource = httpRequest.url;\n    this.remoteAddress = socket.remoteAddress;\n    this.remoteAddresses = [this.remoteAddress];\n    this.serverConfig = serverConfig;\n\n    // Watch for the underlying TCP socket closing before we call accept\n    this._socketIsClosing = false;\n    this._socketCloseHandler = this._handleSocketCloseBeforeAccept.bind(this);\n    this.socket.on('end', this._socketCloseHandler);\n    this.socket.on('close', this._socketCloseHandler);\n\n    this._resolved = false;\n}\n\nutil.inherits(WebSocketRequest, EventEmitter);\n\nWebSocketRequest.prototype.readHandshake = function() {\n    var self = this;\n    var request = this.httpRequest;\n\n    // Decode URL\n    this.resourceURL = url.parse(this.resource, true);\n\n    this.host = request.headers['host'];\n    if (!this.host) {\n        throw new Error('Client must provide a Host header.');\n    }\n\n    this.key = request.headers['sec-websocket-key'];\n    if (!this.key) {\n        throw new Error('Client must provide a value for Sec-WebSocket-Key.');\n    }\n\n    this.webSocketVersion = parseInt(request.headers['sec-websocket-version'], 10);\n\n    if (!this.webSocketVersion || isNaN(this.webSocketVersion)) {\n        throw new Error('Client must provide a value for Sec-WebSocket-Version.');\n    }\n\n    switch (this.webSocketVersion) {\n        case 8:\n        case 13:\n            break;\n        default:\n            var e = new Error('Unsupported websocket client version: ' + this.webSocketVersion +\n                              'Only versions 8 and 13 are supported.');\n            e.httpCode = 426;\n            e.headers = {\n                'Sec-WebSocket-Version': '13'\n            };\n            throw e;\n    }\n\n    if (this.webSocketVersion === 13) {\n        this.origin = request.headers['origin'];\n    }\n    else if (this.webSocketVersion === 8) {\n        this.origin = request.headers['sec-websocket-origin'];\n    }\n\n    // Protocol is optional.\n    var protocolString = request.headers['sec-websocket-protocol'];\n    this.protocolFullCaseMap = {};\n    this.requestedProtocols = [];\n    if (protocolString) {\n        var requestedProtocolsFullCase = protocolString.split(headerValueSplitRegExp);\n        requestedProtocolsFullCase.forEach(function(protocol) {\n            var lcProtocol = protocol.toLocaleLowerCase();\n            self.requestedProtocols.push(lcProtocol);\n            self.protocolFullCaseMap[lcProtocol] = protocol;\n        });\n    }\n\n    if (!this.serverConfig.ignoreXForwardedFor &&\n        request.headers['x-forwarded-for']) {\n        var immediatePeerIP = this.remoteAddress;\n        this.remoteAddresses = request.headers['x-forwarded-for']\n            .split(xForwardedForSeparatorRegExp);\n        this.remoteAddresses.push(immediatePeerIP);\n        this.remoteAddress = this.remoteAddresses[0];\n    }\n\n    // Extensions are optional.\n    if (this.serverConfig.parseExtensions) {\n        var extensionsString = request.headers['sec-websocket-extensions'];\n        this.requestedExtensions = this.parseExtensions(extensionsString);\n    } else {\n        this.requestedExtensions = [];\n    }\n\n    // Cookies are optional\n    if (this.serverConfig.parseCookies) {\n        var cookieString = request.headers['cookie'];\n        this.cookies = this.parseCookies(cookieString);\n    } else {\n        this.cookies = [];\n    }\n};\n\nWebSocketRequest.prototype.parseExtensions = function(extensionsString) {\n    if (!extensionsString || extensionsString.length === 0) {\n        return [];\n    }\n    var extensions = extensionsString.toLocaleLowerCase().split(headerValueSplitRegExp);\n    extensions.forEach(function(extension, index, array) {\n        var params = extension.split(headerParamSplitRegExp);\n        var extensionName = params[0];\n        var extensionParams = params.slice(1);\n        extensionParams.forEach(function(rawParam, index, array) {\n            var arr = rawParam.split('=');\n            var obj = {\n                name: arr[0],\n                value: arr[1]\n            };\n            array.splice(index, 1, obj);\n        });\n        var obj = {\n            name: extensionName,\n            params: extensionParams\n        };\n        array.splice(index, 1, obj);\n    });\n    return extensions;\n};\n\n// This function adapted from node-cookie\n// https://github.com/shtylman/node-cookie\nWebSocketRequest.prototype.parseCookies = function(str) {\n    // Sanity Check\n    if (!str || typeof(str) !== 'string') {\n        return [];\n    }\n\n    var cookies = [];\n    var pairs = str.split(cookieSeparatorRegEx);\n\n    pairs.forEach(function(pair) {\n        var eq_idx = pair.indexOf('=');\n        if (eq_idx === -1) {\n            cookies.push({\n                name: pair,\n                value: null\n            });\n            return;\n        }\n\n        var key = pair.substr(0, eq_idx).trim();\n        var val = pair.substr(++eq_idx, pair.length).trim();\n\n        // quoted values\n        if ('\"' === val[0]) {\n            val = val.slice(1, -1);\n        }\n\n        cookies.push({\n            name: key,\n            value: decodeURIComponent(val)\n        });\n    });\n\n    return cookies;\n};\n\nWebSocketRequest.prototype.accept = function(acceptedProtocol, allowedOrigin, cookies) {\n    this._verifyResolution();\n\n    // TODO: Handle extensions\n\n    var protocolFullCase;\n\n    if (acceptedProtocol) {\n        protocolFullCase = this.protocolFullCaseMap[acceptedProtocol.toLocaleLowerCase()];\n        if (typeof(protocolFullCase) === 'undefined') {\n            protocolFullCase = acceptedProtocol;\n        }\n    }\n    else {\n        protocolFullCase = acceptedProtocol;\n    }\n    this.protocolFullCaseMap = null;\n\n    // Create key validation hash\n    var sha1 = crypto.createHash('sha1');\n    sha1.update(this.key + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11');\n    var acceptKey = sha1.digest('base64');\n\n    var response = 'HTTP/1.1 101 Switching Protocols\\r\\n' +\n                   'Upgrade: websocket\\r\\n' +\n                   'Connection: Upgrade\\r\\n' +\n                   'Sec-WebSocket-Accept: ' + acceptKey + '\\r\\n';\n\n    if (protocolFullCase) {\n        // validate protocol\n        for (var i=0; i < protocolFullCase.length; i++) {\n            var charCode = protocolFullCase.charCodeAt(i);\n            var character = protocolFullCase.charAt(i);\n            if (charCode < 0x21 || charCode > 0x7E || separators.indexOf(character) !== -1) {\n                this.reject(500);\n                throw new Error('Illegal character \"' + String.fromCharCode(character) + '\" in subprotocol.');\n            }\n        }\n        if (this.requestedProtocols.indexOf(acceptedProtocol) === -1) {\n            this.reject(500);\n            throw new Error('Specified protocol was not requested by the client.');\n        }\n\n        protocolFullCase = protocolFullCase.replace(headerSanitizeRegExp, '');\n        response += 'Sec-WebSocket-Protocol: ' + protocolFullCase + '\\r\\n';\n    }\n    this.requestedProtocols = null;\n\n    if (allowedOrigin) {\n        allowedOrigin = allowedOrigin.replace(headerSanitizeRegExp, '');\n        if (this.webSocketVersion === 13) {\n            response += 'Origin: ' + allowedOrigin + '\\r\\n';\n        }\n        else if (this.webSocketVersion === 8) {\n            response += 'Sec-WebSocket-Origin: ' + allowedOrigin + '\\r\\n';\n        }\n    }\n\n    if (cookies) {\n        if (!Array.isArray(cookies)) {\n            this.reject(500);\n            throw new Error('Value supplied for \"cookies\" argument must be an array.');\n        }\n        var seenCookies = {};\n        cookies.forEach(function(cookie) {\n            if (!cookie.name || !cookie.value) {\n                this.reject(500);\n                throw new Error('Each cookie to set must at least provide a \"name\" and \"value\"');\n            }\n\n            // Make sure there are no \\r\\n sequences inserted\n            cookie.name = cookie.name.replace(controlCharsAndSemicolonRegEx, '');\n            cookie.value = cookie.value.replace(controlCharsAndSemicolonRegEx, '');\n\n            if (seenCookies[cookie.name]) {\n                this.reject(500);\n                throw new Error('You may not specify the same cookie name twice.');\n            }\n            seenCookies[cookie.name] = true;\n\n            // token (RFC 2616, Section 2.2)\n            var invalidChar = cookie.name.match(cookieNameValidateRegEx);\n            if (invalidChar) {\n                this.reject(500);\n                throw new Error('Illegal character ' + invalidChar[0] + ' in cookie name');\n            }\n\n            // RFC 6265, Section 4.1.1\n            // *cookie-octet / ( DQUOTE *cookie-octet DQUOTE ) | %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n            if (cookie.value.match(cookieValueDQuoteValidateRegEx)) {\n                invalidChar = cookie.value.slice(1, -1).match(cookieValueValidateRegEx);\n            } else {\n                invalidChar = cookie.value.match(cookieValueValidateRegEx);\n            }\n            if (invalidChar) {\n                this.reject(500);\n                throw new Error('Illegal character ' + invalidChar[0] + ' in cookie value');\n            }\n\n            var cookieParts = [cookie.name + '=' + cookie.value];\n\n            // RFC 6265, Section 4.1.1\n            // 'Path=' path-value | <any CHAR except CTLs or ';'>\n            if(cookie.path){\n                invalidChar = cookie.path.match(controlCharsAndSemicolonRegEx);\n                if (invalidChar) {\n                    this.reject(500);\n                    throw new Error('Illegal character ' + invalidChar[0] + ' in cookie path');\n                }\n                cookieParts.push('Path=' + cookie.path);\n            }\n\n            // RFC 6265, Section 4.1.2.3\n            // 'Domain=' subdomain\n            if (cookie.domain) {\n                if (typeof(cookie.domain) !== 'string') {\n                    this.reject(500);\n                    throw new Error('Domain must be specified and must be a string.');\n                }\n                invalidChar = cookie.domain.match(controlCharsAndSemicolonRegEx);\n                if (invalidChar) {\n                    this.reject(500);\n                    throw new Error('Illegal character ' + invalidChar[0] + ' in cookie domain');\n                }\n                cookieParts.push('Domain=' + cookie.domain.toLowerCase());\n            }\n\n            // RFC 6265, Section 4.1.1\n            //'Expires=' sane-cookie-date | Force Date object requirement by using only epoch\n            if (cookie.expires) {\n                if (!(cookie.expires instanceof Date)){\n                    this.reject(500);\n                    throw new Error('Value supplied for cookie \"expires\" must be a vaild date object');\n                }\n                cookieParts.push('Expires=' + cookie.expires.toGMTString());\n            }\n\n            // RFC 6265, Section 4.1.1\n            //'Max-Age=' non-zero-digit *DIGIT\n            if (cookie.maxage) {\n                var maxage = cookie.maxage;\n                if (typeof(maxage) === 'string') {\n                    maxage = parseInt(maxage, 10);\n                }\n                if (isNaN(maxage) || maxage <= 0 ) {\n                    this.reject(500);\n                    throw new Error('Value supplied for cookie \"maxage\" must be a non-zero number');\n                }\n                maxage = Math.round(maxage);\n                cookieParts.push('Max-Age=' + maxage.toString(10));\n            }\n\n            // RFC 6265, Section 4.1.1\n            //'Secure;'\n            if (cookie.secure) {\n                if (typeof(cookie.secure) !== 'boolean') {\n                    this.reject(500);\n                    throw new Error('Value supplied for cookie \"secure\" must be of type boolean');\n                }\n                cookieParts.push('Secure');\n            }\n\n            // RFC 6265, Section 4.1.1\n            //'HttpOnly;'\n            if (cookie.httponly) {\n                if (typeof(cookie.httponly) !== 'boolean') {\n                    this.reject(500);\n                    throw new Error('Value supplied for cookie \"httponly\" must be of type boolean');\n                }\n                cookieParts.push('HttpOnly');\n            }\n\n            response += ('Set-Cookie: ' + cookieParts.join(';') + '\\r\\n');\n        }.bind(this));\n    }\n\n    // TODO: handle negotiated extensions\n    // if (negotiatedExtensions) {\n    //     response += 'Sec-WebSocket-Extensions: ' + negotiatedExtensions.join(', ') + '\\r\\n';\n    // }\n\n    // Mark the request resolved now so that the user can't call accept or\n    // reject a second time.\n    this._resolved = true;\n    this.emit('requestResolved', this);\n\n    response += '\\r\\n';\n\n    var connection = new WebSocketConnection(this.socket, [], acceptedProtocol, false, this.serverConfig);\n    connection.webSocketVersion = this.webSocketVersion;\n    connection.remoteAddress = this.remoteAddress;\n    connection.remoteAddresses = this.remoteAddresses;\n\n    var self = this;\n\n    if (this._socketIsClosing) {\n        // Handle case when the client hangs up before we get a chance to\n        // accept the connection and send our side of the opening handshake.\n        cleanupFailedConnection(connection);\n    }\n    else {\n        this.socket.write(response, 'ascii', function(error) {\n            if (error) {\n                cleanupFailedConnection(connection);\n                return;\n            }\n\n            self._removeSocketCloseListeners();\n            connection._addSocketEventListeners();\n        });\n    }\n\n    this.emit('requestAccepted', connection);\n    return connection;\n};\n\nWebSocketRequest.prototype.reject = function(status, reason, extraHeaders) {\n    this._verifyResolution();\n\n    // Mark the request resolved now so that the user can't call accept or\n    // reject a second time.\n    this._resolved = true;\n    this.emit('requestResolved', this);\n\n    if (typeof(status) !== 'number') {\n        status = 403;\n    }\n    var response = 'HTTP/1.1 ' + status + ' ' + httpStatusDescriptions[status] + '\\r\\n' +\n                   'Connection: close\\r\\n';\n    if (reason) {\n        reason = reason.replace(headerSanitizeRegExp, '');\n        response += 'X-WebSocket-Reject-Reason: ' + reason + '\\r\\n';\n    }\n\n    if (extraHeaders) {\n        for (var key in extraHeaders) {\n            var sanitizedValue = extraHeaders[key].toString().replace(headerSanitizeRegExp, '');\n            var sanitizedKey = key.replace(headerSanitizeRegExp, '');\n            response += (sanitizedKey + ': ' + sanitizedValue + '\\r\\n');\n        }\n    }\n\n    response += '\\r\\n';\n    this.socket.end(response, 'ascii');\n\n    this.emit('requestRejected', this);\n};\n\nWebSocketRequest.prototype._handleSocketCloseBeforeAccept = function() {\n    this._socketIsClosing = true;\n    this._removeSocketCloseListeners();\n};\n\nWebSocketRequest.prototype._removeSocketCloseListeners = function() {\n    this.socket.removeListener('end', this._socketCloseHandler);\n    this.socket.removeListener('close', this._socketCloseHandler);\n};\n\nWebSocketRequest.prototype._verifyResolution = function() {\n    if (this._resolved) {\n        throw new Error('WebSocketRequest may only be accepted or rejected one time.');\n    }\n};\n\nfunction cleanupFailedConnection(connection) {\n    // Since we have to return a connection object even if the socket is\n    // already dead in order not to break the API, we schedule a 'close'\n    // event on the connection object to occur immediately.\n    process.nextTick(function() {\n        // WebSocketConnection.CLOSE_REASON_ABNORMAL = 1006\n        // Third param: Skip sending the close frame to a dead socket\n        connection.drop(1006, 'TCP connection lost before handshake completed.', true);\n    });\n}\n\nmodule.exports = WebSocketRequest;\n", "/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/\n\nvar extend = require('./utils').extend;\nvar utils = require('./utils');\nvar util = require('util');\nvar debug = require('debug')('websocket:server');\nvar EventEmitter = require('events').EventEmitter;\nvar WebSocketRequest = require('./WebSocketRequest');\n\nvar WebSocketServer = function WebSocketServer(config) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n\n    this._handlers = {\n        upgrade: this.handleUpgrade.bind(this),\n        requestAccepted: this.handleRequestAccepted.bind(this),\n        requestResolved: this.handleRequestResolved.bind(this)\n    };\n    this.connections = [];\n    this.pendingRequests = [];\n    if (config) {\n        this.mount(config);\n    }\n};\n\nutil.inherits(WebSocketServer, EventEmitter);\n\nWebSocketServer.prototype.mount = function(config) {\n    this.config = {\n        // The http server instance to attach to.  Required.\n        httpServer: null,\n\n        // 64KiB max frame size.\n        maxReceivedFrameSize: 0x10000,\n\n        // 1MiB max message size, only applicable if\n        // assembleFragments is true\n        maxReceivedMessageSize: 0x100000,\n\n        // Outgoing messages larger than fragmentationThreshold will be\n        // split into multiple fragments.\n        fragmentOutgoingMessages: true,\n\n        // Outgoing frames are fragmented if they exceed this threshold.\n        // Default is 16KiB\n        fragmentationThreshold: 0x4000,\n\n        // If true, the server will automatically send a ping to all\n        // clients every 'keepaliveInterval' milliseconds.  The timer is\n        // reset on any received data from the client.\n        keepalive: true,\n\n        // The interval to send keepalive pings to connected clients if the\n        // connection is idle.  Any received data will reset the counter.\n        keepaliveInterval: 20000,\n\n        // If true, the server will consider any connection that has not\n        // received any data within the amount of time specified by\n        // 'keepaliveGracePeriod' after a keepalive ping has been sent to\n        // be dead, and will drop the connection.\n        // Ignored if keepalive is false.\n        dropConnectionOnKeepaliveTimeout: true,\n\n        // The amount of time to wait after sending a keepalive ping before\n        // closing the connection if the connected peer does not respond.\n        // Ignored if keepalive is false.\n        keepaliveGracePeriod: 10000,\n\n        // Whether to use native TCP keep-alive instead of WebSockets ping\n        // and pong packets.  Native TCP keep-alive sends smaller packets\n        // on the wire and so uses bandwidth more efficiently.  This may\n        // be more important when talking to mobile devices.\n        // If this value is set to true, then these values will be ignored:\n        //   keepaliveGracePeriod\n        //   dropConnectionOnKeepaliveTimeout\n        useNativeKeepalive: false,\n\n        // If true, fragmented messages will be automatically assembled\n        // and the full message will be emitted via a 'message' event.\n        // If false, each frame will be emitted via a 'frame' event and\n        // the application will be responsible for aggregating multiple\n        // fragmented frames.  Single-frame messages will emit a 'message'\n        // event in addition to the 'frame' event.\n        // Most users will want to leave this set to 'true'\n        assembleFragments: true,\n\n        // If this is true, websocket connections will be accepted\n        // regardless of the path and protocol specified by the client.\n        // The protocol accepted will be the first that was requested\n        // by the client.  Clients from any origin will be accepted.\n        // This should only be used in the simplest of cases.  You should\n        // probably leave this set to 'false' and inspect the request\n        // object to make sure it's acceptable before accepting it.\n        autoAcceptConnections: false,\n\n        // Whether or not the X-Forwarded-For header should be respected.\n        // It's important to set this to 'true' when accepting connections\n        // from untrusted clients, as a malicious client could spoof its\n        // IP address by simply setting this header.  It's meant to be added\n        // by a trusted proxy or other intermediary within your own\n        // infrastructure.\n        // See:  http://en.wikipedia.org/wiki/X-Forwarded-For\n        ignoreXForwardedFor: false,\n\n        // If this is true, 'cookie' headers are parsed and exposed as WebSocketRequest.cookies\n        parseCookies: true,\n\n        // If this is true, 'sec-websocket-extensions' headers are parsed and exposed as WebSocketRequest.requestedExtensions\n        parseExtensions: true,\n\n        // The Nagle Algorithm makes more efficient use of network resources\n        // by introducing a small delay before sending small packets so that\n        // multiple messages can be batched together before going onto the\n        // wire.  This however comes at the cost of latency, so the default\n        // is to disable it.  If you don't need low latency and are streaming\n        // lots of small messages, you can change this to 'false'\n        disableNagleAlgorithm: true,\n\n        // The number of milliseconds to wait after sending a close frame\n        // for an acknowledgement to come back before giving up and just\n        // closing the socket.\n        closeTimeout: 5000\n    };\n    extend(this.config, config);\n\n    if (this.config.httpServer) {\n        if (!Array.isArray(this.config.httpServer)) {\n            this.config.httpServer = [this.config.httpServer];\n        }\n        var upgradeHandler = this._handlers.upgrade;\n        this.config.httpServer.forEach(function(httpServer) {\n            httpServer.on('upgrade', upgradeHandler);\n        });\n    }\n    else {\n        throw new Error('You must specify an httpServer on which to mount the WebSocket server.');\n    }\n};\n\nWebSocketServer.prototype.unmount = function() {\n    var upgradeHandler = this._handlers.upgrade;\n    this.config.httpServer.forEach(function(httpServer) {\n        httpServer.removeListener('upgrade', upgradeHandler);\n    });\n};\n\nWebSocketServer.prototype.closeAllConnections = function() {\n    this.connections.forEach(function(connection) {\n        connection.close();\n    });\n    this.pendingRequests.forEach(function(request) {\n        process.nextTick(function() {\n          request.reject(503); // HTTP 503 Service Unavailable\n        });\n    });\n};\n\nWebSocketServer.prototype.broadcast = function(data) {\n    if (Buffer.isBuffer(data)) {\n        this.broadcastBytes(data);\n    }\n    else if (typeof(data.toString) === 'function') {\n        this.broadcastUTF(data);\n    }\n};\n\nWebSocketServer.prototype.broadcastUTF = function(utfData) {\n    this.connections.forEach(function(connection) {\n        connection.sendUTF(utfData);\n    });\n};\n\nWebSocketServer.prototype.broadcastBytes = function(binaryData) {\n    this.connections.forEach(function(connection) {\n        connection.sendBytes(binaryData);\n    });\n};\n\nWebSocketServer.prototype.shutDown = function() {\n    this.unmount();\n    this.closeAllConnections();\n};\n\nWebSocketServer.prototype.handleUpgrade = function(request, socket) {\n    var self = this;\n    var wsRequest = new WebSocketRequest(socket, request, this.config);\n    try {\n        wsRequest.readHandshake();\n    }\n    catch(e) {\n        wsRequest.reject(\n            e.httpCode ? e.httpCode : 400,\n            e.message,\n            e.headers\n        );\n        debug('Invalid handshake: %s', e.message);\n        this.emit('upgradeError', e);\n        return;\n    }\n\n    this.pendingRequests.push(wsRequest);\n\n    wsRequest.once('requestAccepted', this._handlers.requestAccepted);\n    wsRequest.once('requestResolved', this._handlers.requestResolved);\n    socket.once('close', function () {\n        self._handlers.requestResolved(wsRequest);\n    });\n\n    if (!this.config.autoAcceptConnections && utils.eventEmitterListenerCount(this, 'request') > 0) {\n        this.emit('request', wsRequest);\n    }\n    else if (this.config.autoAcceptConnections) {\n        wsRequest.accept(wsRequest.requestedProtocols[0], wsRequest.origin);\n    }\n    else {\n        wsRequest.reject(404, 'No handler is configured to accept the connection.');\n    }\n};\n\nWebSocketServer.prototype.handleRequestAccepted = function(connection) {\n    var self = this;\n    connection.once('close', function(closeReason, description) {\n        self.handleConnectionClose(connection, closeReason, description);\n    });\n    this.connections.push(connection);\n    this.emit('connect', connection);\n};\n\nWebSocketServer.prototype.handleConnectionClose = function(connection, closeReason, description) {\n    var index = this.connections.indexOf(connection);\n    if (index !== -1) {\n        this.connections.splice(index, 1);\n    }\n    this.emit('close', connection, closeReason, description);\n};\n\nWebSocketServer.prototype.handleRequestResolved = function(request) {\n    var index = this.pendingRequests.indexOf(request);\n    if (index !== -1) { this.pendingRequests.splice(index, 1); }\n};\n\nmodule.exports = WebSocketServer;\n", "/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/\n\nvar utils = require('./utils');\nvar extend = utils.extend;\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar http = require('http');\nvar https = require('https');\nvar url = require('url');\nvar crypto = require('crypto');\nvar WebSocketConnection = require('./WebSocketConnection');\nvar bufferAllocUnsafe = utils.bufferAllocUnsafe;\n\nvar protocolSeparators = [\n    '(', ')', '<', '>', '@',\n    ',', ';', ':', '\\\\', '\\\"',\n    '/', '[', ']', '?', '=',\n    '{', '}', ' ', String.fromCharCode(9)\n];\n\nvar excludedTlsOptions = ['hostname','port','method','path','headers'];\n\nfunction WebSocketClient(config) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n\n    // TODO: Implement extensions\n\n    this.config = {\n        // 1MiB max frame size.\n        maxReceivedFrameSize: 0x100000,\n\n        // 8MiB max message size, only applicable if\n        // assembleFragments is true\n        maxReceivedMessageSize: 0x800000,\n\n        // Outgoing messages larger than fragmentationThreshold will be\n        // split into multiple fragments.\n        fragmentOutgoingMessages: true,\n\n        // Outgoing frames are fragmented if they exceed this threshold.\n        // Default is 16KiB\n        fragmentationThreshold: 0x4000,\n\n        // Which version of the protocol to use for this session.  This\n        // option will be removed once the protocol is finalized by the IETF\n        // It is only available to ease the transition through the\n        // intermediate draft protocol versions.\n        // At present, it only affects the name of the Origin header.\n        webSocketVersion: 13,\n\n        // If true, fragmented messages will be automatically assembled\n        // and the full message will be emitted via a 'message' event.\n        // If false, each frame will be emitted via a 'frame' event and\n        // the application will be responsible for aggregating multiple\n        // fragmented frames.  Single-frame messages will emit a 'message'\n        // event in addition to the 'frame' event.\n        // Most users will want to leave this set to 'true'\n        assembleFragments: true,\n\n        // The Nagle Algorithm makes more efficient use of network resources\n        // by introducing a small delay before sending small packets so that\n        // multiple messages can be batched together before going onto the\n        // wire.  This however comes at the cost of latency, so the default\n        // is to disable it.  If you don't need low latency and are streaming\n        // lots of small messages, you can change this to 'false'\n        disableNagleAlgorithm: true,\n\n        // The number of milliseconds to wait after sending a close frame\n        // for an acknowledgement to come back before giving up and just\n        // closing the socket.\n        closeTimeout: 5000,\n\n        // Options to pass to https.connect if connecting via TLS\n        tlsOptions: {}\n    };\n\n    if (config) {\n        var tlsOptions;\n        if (config.tlsOptions) {\n          tlsOptions = config.tlsOptions;\n          delete config.tlsOptions;\n        }\n        else {\n          tlsOptions = {};\n        }\n        extend(this.config, config);\n        extend(this.config.tlsOptions, tlsOptions);\n    }\n\n    this._req = null;\n    \n    switch (this.config.webSocketVersion) {\n        case 8:\n        case 13:\n            break;\n        default:\n            throw new Error('Requested webSocketVersion is not supported. Allowed values are 8 and 13.');\n    }\n}\n\nutil.inherits(WebSocketClient, EventEmitter);\n\nWebSocketClient.prototype.connect = function(requestUrl, protocols, origin, headers, extraRequestOptions) {\n    var self = this;\n    \n    if (typeof(protocols) === 'string') {\n        if (protocols.length > 0) {\n            protocols = [protocols];\n        }\n        else {\n            protocols = [];\n        }\n    }\n    if (!(protocols instanceof Array)) {\n        protocols = [];\n    }\n    this.protocols = protocols;\n    this.origin = origin;\n\n    if (typeof(requestUrl) === 'string') {\n        this.url = url.parse(requestUrl);\n    }\n    else {\n        this.url = requestUrl; // in case an already parsed url is passed in.\n    }\n    if (!this.url.protocol) {\n        throw new Error('You must specify a full WebSocket URL, including protocol.');\n    }\n    if (!this.url.host) {\n        throw new Error('You must specify a full WebSocket URL, including hostname. Relative URLs are not supported.');\n    }\n\n    this.secure = (this.url.protocol === 'wss:');\n\n    // validate protocol characters:\n    this.protocols.forEach(function(protocol) {\n        for (var i=0; i < protocol.length; i ++) {\n            var charCode = protocol.charCodeAt(i);\n            var character = protocol.charAt(i);\n            if (charCode < 0x0021 || charCode > 0x007E || protocolSeparators.indexOf(character) !== -1) {\n                throw new Error('Protocol list contains invalid character \"' + String.fromCharCode(charCode) + '\"');\n            }\n        }\n    });\n\n    var defaultPorts = {\n        'ws:': '80',\n        'wss:': '443'\n    };\n\n    if (!this.url.port) {\n        this.url.port = defaultPorts[this.url.protocol];\n    }\n\n    var nonce = bufferAllocUnsafe(16);\n    for (var i=0; i < 16; i++) {\n        nonce[i] = Math.round(Math.random()*0xFF);\n    }\n    this.base64nonce = nonce.toString('base64');\n\n    var hostHeaderValue = this.url.hostname;\n    if ((this.url.protocol === 'ws:' && this.url.port !== '80') ||\n        (this.url.protocol === 'wss:' && this.url.port !== '443'))  {\n        hostHeaderValue += (':' + this.url.port);\n    }\n\n    var reqHeaders = {};\n    if (this.secure && this.config.tlsOptions.hasOwnProperty('headers')) {\n      // Allow for additional headers to be provided when connecting via HTTPS\n      extend(reqHeaders, this.config.tlsOptions.headers);\n    }\n    if (headers) {\n      // Explicitly provided headers take priority over any from tlsOptions\n      extend(reqHeaders, headers);\n    }\n    extend(reqHeaders, {\n        'Upgrade': 'websocket',\n        'Connection': 'Upgrade',\n        'Sec-WebSocket-Version': this.config.webSocketVersion.toString(10),\n        'Sec-WebSocket-Key': this.base64nonce,\n        'Host': reqHeaders.Host || hostHeaderValue\n    });\n\n    if (this.protocols.length > 0) {\n        reqHeaders['Sec-WebSocket-Protocol'] = this.protocols.join(', ');\n    }\n    if (this.origin) {\n        if (this.config.webSocketVersion === 13) {\n            reqHeaders['Origin'] = this.origin;\n        }\n        else if (this.config.webSocketVersion === 8) {\n            reqHeaders['Sec-WebSocket-Origin'] = this.origin;\n        }\n    }\n\n    // TODO: Implement extensions\n\n    var pathAndQuery;\n    // Ensure it begins with '/'.\n    if (this.url.pathname) {\n        pathAndQuery = this.url.path;\n    }\n    else if (this.url.path) {\n        pathAndQuery = '/' + this.url.path;\n    }\n    else {\n        pathAndQuery = '/';\n    }\n\n    function handleRequestError(error) {\n        self._req = null;\n        self.emit('connectFailed', error);\n    }\n\n    var requestOptions = {\n        agent: false\n    };\n    if (extraRequestOptions) {\n        extend(requestOptions, extraRequestOptions);\n    }\n    // These options are always overridden by the library.  The user is not\n    // allowed to specify these directly.\n    extend(requestOptions, {\n        hostname: this.url.hostname,\n        port: this.url.port,\n        method: 'GET',\n        path: pathAndQuery,\n        headers: reqHeaders\n    });\n    if (this.secure) {\n        var tlsOptions = this.config.tlsOptions;\n        for (var key in tlsOptions) {\n            if (tlsOptions.hasOwnProperty(key) && excludedTlsOptions.indexOf(key) === -1) {\n                requestOptions[key] = tlsOptions[key];\n            }\n        }\n    }\n\n    var req = this._req = (this.secure ? https : http).request(requestOptions);\n    req.on('upgrade', function handleRequestUpgrade(response, socket, head) {\n        self._req = null;\n        req.removeListener('error', handleRequestError);\n        self.socket = socket;\n        self.response = response;\n        self.firstDataChunk = head;\n        self.validateHandshake();\n    });\n    req.on('error', handleRequestError);\n\n    req.on('response', function(response) {\n        self._req = null;\n        if (utils.eventEmitterListenerCount(self, 'httpResponse') > 0) {\n            self.emit('httpResponse', response, self);\n            if (response.socket) {\n                response.socket.end();\n            }\n        }\n        else {\n            var headerDumpParts = [];\n            for (var headerName in response.headers) {\n                headerDumpParts.push(headerName + ': ' + response.headers[headerName]);\n            }\n            self.failHandshake(\n                'Server responded with a non-101 status: ' +\n                response.statusCode + ' ' + response.statusMessage +\n                '\\nResponse Headers Follow:\\n' +\n                headerDumpParts.join('\\n') + '\\n'\n            );\n        }\n    });\n    req.end();\n};\n\nWebSocketClient.prototype.validateHandshake = function() {\n    var headers = this.response.headers;\n\n    if (this.protocols.length > 0) {\n        this.protocol = headers['sec-websocket-protocol'];\n        if (this.protocol) {\n            if (this.protocols.indexOf(this.protocol) === -1) {\n                this.failHandshake('Server did not respond with a requested protocol.');\n                return;\n            }\n        }\n        else {\n            this.failHandshake('Expected a Sec-WebSocket-Protocol header.');\n            return;\n        }\n    }\n\n    if (!(headers['connection'] && headers['connection'].toLocaleLowerCase() === 'upgrade')) {\n        this.failHandshake('Expected a Connection: Upgrade header from the server');\n        return;\n    }\n\n    if (!(headers['upgrade'] && headers['upgrade'].toLocaleLowerCase() === 'websocket')) {\n        this.failHandshake('Expected an Upgrade: websocket header from the server');\n        return;\n    }\n\n    var sha1 = crypto.createHash('sha1');\n    sha1.update(this.base64nonce + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11');\n    var expectedKey = sha1.digest('base64');\n\n    if (!headers['sec-websocket-accept']) {\n        this.failHandshake('Expected Sec-WebSocket-Accept header from server');\n        return;\n    }\n\n    if (headers['sec-websocket-accept'] !== expectedKey) {\n        this.failHandshake('Sec-WebSocket-Accept header from server didn\\'t match expected value of ' + expectedKey);\n        return;\n    }\n\n    // TODO: Support extensions\n\n    this.succeedHandshake();\n};\n\nWebSocketClient.prototype.failHandshake = function(errorDescription) {\n    if (this.socket && this.socket.writable) {\n        this.socket.end();\n    }\n    this.emit('connectFailed', new Error(errorDescription));\n};\n\nWebSocketClient.prototype.succeedHandshake = function() {\n    var connection = new WebSocketConnection(this.socket, [], this.protocol, true, this.config);\n\n    connection.webSocketVersion = this.config.webSocketVersion;\n    connection._addSocketEventListeners();\n\n    this.emit('connect', connection);\n    if (this.firstDataChunk.length > 0) {\n        connection.handleSocketData(this.firstDataChunk);\n    }\n    this.firstDataChunk = null;\n};\n\nWebSocketClient.prototype.abort = function() {\n    if (this._req) {\n        this._req.abort();\n    }\n};\n\nmodule.exports = WebSocketClient;\n", "/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/\n\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\nfunction WebSocketRouterRequest(webSocketRequest, resolvedProtocol) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n\n    this.webSocketRequest = webSocketRequest;\n    if (resolvedProtocol === '____no_protocol____') {\n        this.protocol = null;\n    }\n    else {\n        this.protocol = resolvedProtocol;\n    }\n    this.origin = webSocketRequest.origin;\n    this.resource = webSocketRequest.resource;\n    this.resourceURL = webSocketRequest.resourceURL;\n    this.httpRequest = webSocketRequest.httpRequest;\n    this.remoteAddress = webSocketRequest.remoteAddress;\n    this.webSocketVersion = webSocketRequest.webSocketVersion;\n    this.requestedExtensions = webSocketRequest.requestedExtensions;\n    this.cookies = webSocketRequest.cookies;\n}\n\nutil.inherits(WebSocketRouterRequest, EventEmitter);\n\nWebSocketRouterRequest.prototype.accept = function(origin, cookies) {\n    var connection = this.webSocketRequest.accept(this.protocol, origin, cookies);\n    this.emit('requestAccepted', connection);\n    return connection;\n};\n\nWebSocketRouterRequest.prototype.reject = function(status, reason, extraHeaders) {\n    this.webSocketRequest.reject(status, reason, extraHeaders);\n    this.emit('requestRejected', this);\n};\n\nmodule.exports = WebSocketRouterRequest;\n", "/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/\n\nvar extend = require('./utils').extend;\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar WebSocketRouterRequest = require('./WebSocketRouterRequest');\n\nfunction WebSocketRouter(config) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n\n    this.config = {\n        // The WebSocketServer instance to attach to.\n        server: null\n    };\n    if (config) {\n        extend(this.config, config);\n    }\n    this.handlers = [];\n\n    this._requestHandler = this.handleRequest.bind(this);\n    if (this.config.server) {\n        this.attachServer(this.config.server);\n    }\n}\n\nutil.inherits(WebSocketRouter, EventEmitter);\n\nWebSocketRouter.prototype.attachServer = function(server) {\n    if (server) {\n        this.server = server;\n        this.server.on('request', this._requestHandler);\n    }\n    else {\n        throw new Error('You must specify a WebSocketServer instance to attach to.');\n    }\n};\n\nWebSocketRouter.prototype.detachServer = function() {\n    if (this.server) {\n        this.server.removeListener('request', this._requestHandler);\n        this.server = null;\n    }\n    else {\n        throw new Error('Cannot detach from server: not attached.');\n    }\n};\n\nWebSocketRouter.prototype.mount = function(path, protocol, callback) {\n    if (!path) {\n        throw new Error('You must specify a path for this handler.');\n    }\n    if (!protocol) {\n        protocol = '____no_protocol____';\n    }\n    if (!callback) {\n        throw new Error('You must specify a callback for this handler.');\n    }\n\n    path = this.pathToRegExp(path);\n    if (!(path instanceof RegExp)) {\n        throw new Error('Path must be specified as either a string or a RegExp.');\n    }\n    var pathString = path.toString();\n\n    // normalize protocol to lower-case\n    protocol = protocol.toLocaleLowerCase();\n\n    if (this.findHandlerIndex(pathString, protocol) !== -1) {\n        throw new Error('You may only mount one handler per path/protocol combination.');\n    }\n\n    this.handlers.push({\n        'path': path,\n        'pathString': pathString,\n        'protocol': protocol,\n        'callback': callback\n    });\n};\nWebSocketRouter.prototype.unmount = function(path, protocol) {\n    var index = this.findHandlerIndex(this.pathToRegExp(path).toString(), protocol);\n    if (index !== -1) {\n        this.handlers.splice(index, 1);\n    }\n    else {\n        throw new Error('Unable to find a route matching the specified path and protocol.');\n    }\n};\n\nWebSocketRouter.prototype.findHandlerIndex = function(pathString, protocol) {\n    protocol = protocol.toLocaleLowerCase();\n    for (var i=0, len=this.handlers.length; i < len; i++) {\n        var handler = this.handlers[i];\n        if (handler.pathString === pathString && handler.protocol === protocol) {\n            return i;\n        }\n    }\n    return -1;\n};\n\nWebSocketRouter.prototype.pathToRegExp = function(path) {\n    if (typeof(path) === 'string') {\n        if (path === '*') {\n            path = /^.*$/;\n        }\n        else {\n            path = path.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n            path = new RegExp('^' + path + '$');\n        }\n    }\n    return path;\n};\n\nWebSocketRouter.prototype.handleRequest = function(request) {\n    var requestedProtocols = request.requestedProtocols;\n    if (requestedProtocols.length === 0) {\n        requestedProtocols = ['____no_protocol____'];\n    }\n\n    // Find a handler with the first requested protocol first\n    for (var i=0; i < requestedProtocols.length; i++) {\n        var requestedProtocol = requestedProtocols[i].toLocaleLowerCase();\n\n        // find the first handler that can process this request\n        for (var j=0, len=this.handlers.length; j < len; j++) {\n            var handler = this.handlers[j];\n            if (handler.path.test(request.resourceURL.pathname)) {\n                if (requestedProtocol === handler.protocol ||\n                    handler.protocol === '*')\n                {\n                    var routerRequest = new WebSocketRouterRequest(request, requestedProtocol);\n                    handler.callback(routerRequest);\n                    return;\n                }\n            }\n        }\n    }\n\n    // If we get here we were unable to find a suitable handler.\n    request.reject(404, 'No handler is available for the given request.');\n};\n\nmodule.exports = WebSocketRouter;\n", "module.exports      = isTypedArray\nisTypedArray.strict = isStrictTypedArray\nisTypedArray.loose  = isLooseTypedArray\n\nvar toString = Object.prototype.toString\nvar names = {\n    '[object Int8Array]': true\n  , '[object Int16Array]': true\n  , '[object Int32Array]': true\n  , '[object Uint8Array]': true\n  , '[object Uint8ClampedArray]': true\n  , '[object Uint16Array]': true\n  , '[object Uint32Array]': true\n  , '[object Float32Array]': true\n  , '[object Float64Array]': true\n}\n\nfunction isTypedArray(arr) {\n  return (\n       isStrictTypedArray(arr)\n    || isLooseTypedArray(arr)\n  )\n}\n\nfunction isStrictTypedArray(arr) {\n  return (\n       arr instanceof Int8Array\n    || arr instanceof Int16Array\n    || arr instanceof Int32Array\n    || arr instanceof Uint8Array\n    || arr instanceof Uint8ClampedArray\n    || arr instanceof Uint16Array\n    || arr instanceof Uint32Array\n    || arr instanceof Float32Array\n    || arr instanceof Float64Array\n  )\n}\n\nfunction isLooseTypedArray(arr) {\n  return names[toString.call(arr)]\n}\n", "/**\n * Convert a typed array to a Buffer without a copy\n *\n * Author:   Feross Aboukhadijeh <https://feross.org>\n * License:  MIT\n *\n * `npm install typedarray-to-buffer`\n */\n\nvar isTypedArray = require('is-typedarray').strict\n\nmodule.exports = function typedarrayToBuffer (arr) {\n  if (isTypedArray(arr)) {\n    // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer\n    var buf = Buffer.from(arr.buffer)\n    if (arr.byteLength !== arr.buffer.byteLength) {\n      // Respect the \"view\", i.e. byteOffset and byteLength, without doing a copy\n      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength)\n    }\n    return buf\n  } else {\n    // Pass through all other types to `Buffer.from`\n    return Buffer.from(arr)\n  }\n}\n", "/**\n * Expose the _EventTarget class.\n */\nmodule.exports = _EventTarget;\n\nfunction _EventTarget() {\n\t// Do nothing if called for a native EventTarget object..\n\tif (typeof this.addEventListener === 'function') {\n\t\treturn;\n\t}\n\n\tthis._listeners = {};\n\n\tthis.addEventListener = _addEventListener;\n\tthis.removeEventListener = _removeEventListener;\n\tthis.dispatchEvent = _dispatchEvent;\n}\n\nObject.defineProperties(_EventTarget.prototype, {\n\tlisteners: {\n\t\tget: function () {\n\t\t\treturn this._listeners;\n\t\t}\n\t}\n});\n\nfunction _addEventListener(type, newListener) {\n\tvar\n\t\tlistenersType,\n\t\ti, listener;\n\n\tif (!type || !newListener) {\n\t\treturn;\n\t}\n\n\tlistenersType = this._listeners[type];\n\tif (listenersType === undefined) {\n\t\tthis._listeners[type] = listenersType = [];\n\t}\n\n\tfor (i = 0; !!(listener = listenersType[i]); i++) {\n\t\tif (listener === newListener) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tlistenersType.push(newListener);\n}\n\nfunction _removeEventListener(type, oldListener) {\n\tvar\n\t\tlistenersType,\n\t\ti, listener;\n\n\tif (!type || !oldListener) {\n\t\treturn;\n\t}\n\n\tlistenersType = this._listeners[type];\n\tif (listenersType === undefined) {\n\t\treturn;\n\t}\n\n\tfor (i = 0; !!(listener = listenersType[i]); i++) {\n\t\tif (listener === oldListener) {\n\t\t\tlistenersType.splice(i, 1);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (listenersType.length === 0) {\n\t\tdelete this._listeners[type];\n\t}\n}\n\nfunction _dispatchEvent(event) {\n\tvar\n\t\ttype,\n\t\tlistenersType,\n\t\tdummyListener,\n\t\tstopImmediatePropagation = false,\n\t\ti, listener;\n\n\tif (!event || typeof event.type !== 'string') {\n\t\tthrow new Error('`event` must have a valid `type` property');\n\t}\n\n\t// Do some stuff to emulate DOM Event behavior (just if this is not a\n\t// DOM Event object)\n\tif (event._yaeti) {\n\t\tevent.target = this;\n\t\tevent.cancelable = true;\n\t}\n\n\t// Attempt to override the stopImmediatePropagation() method\n\ttry {\n\t\tevent.stopImmediatePropagation = function () {\n\t\t\tstopImmediatePropagation = true;\n\t\t};\n\t} catch (error) {}\n\n\ttype = event.type;\n\tlistenersType = (this._listeners[type] || []);\n\n\tdummyListener = this['on' + type];\n\tif (typeof dummyListener === 'function') {\n\t\tdummyListener.call(this, event);\n\t}\n\n\tfor (i = 0; !!(listener = listenersType[i]); i++) {\n\t\tif (stopImmediatePropagation) {\n\t\t\tbreak;\n\t\t}\n\n\t\tlistener.call(this, event);\n\t}\n\n\treturn !event.defaultPrevented;\n}\n", "/**\n * Expose the Event class.\n */\nmodule.exports = _Event;\n\n\nfunction _Event(type) {\n\tthis.type = type;\n\tthis.isTrusted = false;\n\n\t// Set a flag indicating this is not a DOM Event object\n\tthis._yaeti = true;\n}\n", "module.exports = {\n\tEventTarget : require('./lib/EventTarget'),\n\tEvent       : require('./lib/Event')\n};\n", "/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/\n\nvar WebSocketClient = require('./WebSocketClient');\nvar toBuffer = require('typedarray-to-buffer');\nvar yaeti = require('yaeti');\n\n\nconst CONNECTING = 0;\nconst OPEN = 1;\nconst CLOSING = 2;\nconst CLOSED = 3;\n\n\nmodule.exports = W3CWebSocket;\n\n\nfunction W3CWebSocket(url, protocols, origin, headers, requestOptions, clientConfig) {\n    // Make this an EventTarget.\n    yaeti.EventTarget.call(this);\n\n    // Sanitize clientConfig.\n    clientConfig = clientConfig || {};\n    clientConfig.assembleFragments = true;  // Required in the W3C API.\n\n    var self = this;\n\n    this._url = url;\n    this._readyState = CONNECTING;\n    this._protocol = undefined;\n    this._extensions = '';\n    this._bufferedAmount = 0;  // Hack, always 0.\n    this._binaryType = 'arraybuffer';  // TODO: Should be 'blob' by default, but Node has no Blob.\n\n    // The WebSocketConnection instance.\n    this._connection = undefined;\n\n    // WebSocketClient instance.\n    this._client = new WebSocketClient(clientConfig);\n\n    this._client.on('connect', function(connection) {\n        onConnect.call(self, connection);\n    });\n\n    this._client.on('connectFailed', function() {\n        onConnectFailed.call(self);\n    });\n\n    this._client.connect(url, protocols, origin, headers, requestOptions);\n}\n\n\n// Expose W3C read only attributes.\nObject.defineProperties(W3CWebSocket.prototype, {\n    url:            { get: function() { return this._url;            } },\n    readyState:     { get: function() { return this._readyState;     } },\n    protocol:       { get: function() { return this._protocol;       } },\n    extensions:     { get: function() { return this._extensions;     } },\n    bufferedAmount: { get: function() { return this._bufferedAmount; } }\n});\n\n\n// Expose W3C write/read attributes.\nObject.defineProperties(W3CWebSocket.prototype, {\n    binaryType: {\n        get: function() {\n            return this._binaryType;\n        },\n        set: function(type) {\n            // TODO: Just 'arraybuffer' supported.\n            if (type !== 'arraybuffer') {\n                throw new SyntaxError('just \"arraybuffer\" type allowed for \"binaryType\" attribute');\n            }\n            this._binaryType = type;\n        }\n    }\n});\n\n\n// Expose W3C readyState constants into the WebSocket instance as W3C states.\n[['CONNECTING',CONNECTING], ['OPEN',OPEN], ['CLOSING',CLOSING], ['CLOSED',CLOSED]].forEach(function(property) {\n    Object.defineProperty(W3CWebSocket.prototype, property[0], {\n        get: function() { return property[1]; }\n    });\n});\n\n// Also expose W3C readyState constants into the WebSocket class (not defined by the W3C,\n// but there are so many libs relying on them).\n[['CONNECTING',CONNECTING], ['OPEN',OPEN], ['CLOSING',CLOSING], ['CLOSED',CLOSED]].forEach(function(property) {\n    Object.defineProperty(W3CWebSocket, property[0], {\n        get: function() { return property[1]; }\n    });\n});\n\n\nW3CWebSocket.prototype.send = function(data) {\n    if (this._readyState !== OPEN) {\n        throw new Error('cannot call send() while not connected');\n    }\n\n    // Text.\n    if (typeof data === 'string' || data instanceof String) {\n        this._connection.sendUTF(data);\n    }\n    // Binary.\n    else {\n        // Node Buffer.\n        if (data instanceof Buffer) {\n            this._connection.sendBytes(data);\n        }\n        // If ArrayBuffer or ArrayBufferView convert it to Node Buffer.\n        else if (data.byteLength || data.byteLength === 0) {\n            data = toBuffer(data);\n            this._connection.sendBytes(data);\n        }\n        else {\n            throw new Error('unknown binary data:', data);\n        }\n    }\n};\n\n\nW3CWebSocket.prototype.close = function(code, reason) {\n    switch(this._readyState) {\n        case CONNECTING:\n            // NOTE: We don't have the WebSocketConnection instance yet so no\n            // way to close the TCP connection.\n            // Artificially invoke the onConnectFailed event.\n            onConnectFailed.call(this);\n            // And close if it connects after a while.\n            this._client.on('connect', function(connection) {\n                if (code) {\n                    connection.close(code, reason);\n                } else {\n                    connection.close();\n                }\n            });\n            break;\n        case OPEN:\n            this._readyState = CLOSING;\n            if (code) {\n                this._connection.close(code, reason);\n            } else {\n                this._connection.close();\n            }\n            break;\n        case CLOSING:\n        case CLOSED:\n            break;\n    }\n};\n\n\n/**\n * Private API.\n */\n\n\nfunction createCloseEvent(code, reason) {\n    var event = new yaeti.Event('close');\n\n    event.code = code;\n    event.reason = reason;\n    event.wasClean = (typeof code === 'undefined' || code === 1000);\n\n    return event;\n}\n\n\nfunction createMessageEvent(data) {\n    var event = new yaeti.Event('message');\n\n    event.data = data;\n\n    return event;\n}\n\n\nfunction onConnect(connection) {\n    var self = this;\n\n    this._readyState = OPEN;\n    this._connection = connection;\n    this._protocol = connection.protocol;\n    this._extensions = connection.extensions;\n\n    this._connection.on('close', function(code, reason) {\n        onClose.call(self, code, reason);\n    });\n\n    this._connection.on('message', function(msg) {\n        onMessage.call(self, msg);\n    });\n\n    this.dispatchEvent(new yaeti.Event('open'));\n}\n\n\nfunction onConnectFailed() {\n    destroy.call(this);\n    this._readyState = CLOSED;\n\n    try {\n        this.dispatchEvent(new yaeti.Event('error'));\n    } finally {\n        this.dispatchEvent(createCloseEvent(1006, 'connection failed'));\n    }\n}\n\n\nfunction onClose(code, reason) {\n    destroy.call(this);\n    this._readyState = CLOSED;\n\n    this.dispatchEvent(createCloseEvent(code, reason || ''));\n}\n\n\nfunction onMessage(message) {\n    if (message.utf8Data) {\n        this.dispatchEvent(createMessageEvent(message.utf8Data));\n    }\n    else if (message.binaryData) {\n        // Must convert from Node Buffer to ArrayBuffer.\n        // TODO: or to a Blob (which does not exist in Node!).\n        if (this.binaryType === 'arraybuffer') {\n            var buffer = message.binaryData;\n            var arraybuffer = new ArrayBuffer(buffer.length);\n            var view = new Uint8Array(arraybuffer);\n            for (var i=0, len=buffer.length; i<len; ++i) {\n                view[i] = buffer[i];\n            }\n            this.dispatchEvent(createMessageEvent(arraybuffer));\n        }\n    }\n}\n\n\nfunction destroy() {\n    this._client.removeAllListeners();\n    if (this._connection) {\n        this._connection.removeAllListeners();\n    }\n}\n", "/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/\n\nvar Deprecation = {\n    disableWarnings: false,\n\n    deprecationWarningMap: {\n\n    },\n\n    warn: function(deprecationName) {\n        if (!this.disableWarnings && this.deprecationWarningMap[deprecationName]) {\n            console.warn('DEPRECATION WARNING: ' + this.deprecationWarningMap[deprecationName]);\n            this.deprecationWarningMap[deprecationName] = false;\n        }\n    }\n};\n\nmodule.exports = Deprecation;\n", "{\n  \"name\": \"websocket\",\n  \"description\": \"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.\",\n  \"keywords\": [\n    \"websocket\",\n    \"websockets\",\n    \"socket\",\n    \"networking\",\n    \"comet\",\n    \"push\",\n    \"RFC-6455\",\n    \"realtime\",\n    \"server\",\n    \"client\"\n  ],\n  \"author\": \"Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)\",\n  \"contributors\": [\n    \"I\u00F1aki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)\"\n  ],\n  \"version\": \"1.0.34\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/theturtle32/WebSocket-Node.git\"\n  },\n  \"homepage\": \"https://github.com/theturtle32/WebSocket-Node\",\n  \"engines\": {\n    \"node\": \">=4.0.0\"\n  },\n  \"dependencies\": {\n    \"bufferutil\": \"^4.0.1\",\n    \"debug\": \"^2.2.0\",\n    \"es5-ext\": \"^0.10.50\",\n    \"typedarray-to-buffer\": \"^3.1.5\",\n    \"utf-8-validate\": \"^5.0.2\",\n    \"yaeti\": \"^0.0.6\"\n  },\n  \"devDependencies\": {\n    \"buffer-equal\": \"^1.0.0\",\n    \"gulp\": \"^4.0.2\",\n    \"gulp-jshint\": \"^2.0.4\",\n    \"jshint-stylish\": \"^2.2.1\",\n    \"jshint\": \"^2.0.0\",\n    \"tape\": \"^4.9.1\"\n  },\n  \"config\": {\n    \"verbose\": false\n  },\n  \"scripts\": {\n    \"test\": \"tape test/unit/*.js\",\n    \"gulp\": \"gulp\"\n  },\n  \"main\": \"index\",\n  \"directories\": {\n    \"lib\": \"./lib\"\n  },\n  \"browser\": \"lib/browser.js\",\n  \"license\": \"Apache-2.0\"\n}\n", "module.exports = require('../package.json').version;\n", "module.exports = {\n    'server'       : require('./WebSocketServer'),\n    'client'       : require('./WebSocketClient'),\n    'router'       : require('./WebSocketRouter'),\n    'frame'        : require('./WebSocketFrame'),\n    'request'      : require('./WebSocketRequest'),\n    'connection'   : require('./WebSocketConnection'),\n    'w3cwebsocket' : require('./W3CWebSocket'),\n    'deprecation'  : require('./Deprecation'),\n    'version'      : require('./version')\n};\n", "module.exports = require('./lib/websocket');", "\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\n/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t\t? self // if in worker\n\t\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self) {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t\t * additional languages or plugins yourself.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t\t *\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.manual = true;\n\t\t * // add a new <script> to load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tmanual: _self.Prism && _self.Prism.manual,\n\t\t/**\n\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n\t\t * own worker, you don't want it to do this.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\n\t\t *\n\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.disableWorkerMessageHandler = true;\n\t\t * // Load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the script element that is currently executing.\n\t\t\t *\n\t\t\t * This does __not__ work for line script element.\n\t\t\t *\n\t\t\t * @returns {HTMLScriptElement | null}\n\t\t\t */\n\t\t\tcurrentScript: function () {\n\t\t\t\tif (typeof document === 'undefined') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t\t}\n\n\t\t\t\t// IE11 workaround\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t\t// this will not work for inline scripts\n\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t\t// A stack will look like this:\n\t\t\t\t\t//\n\t\t\t\t\t// Error\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\t\t/**\n\t\t * This is the most high-level function in Prism\u2019s API.\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t\t * each one of them.\n\t\t *\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t\t *\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAll: function (async, callback) {\n\t\t\t_.highlightAllUnder(document, async, callback);\n\t\t},\n\n\t\t/**\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t\t * {@link Prism.highlightElement} on each one of them.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-highlightall`\n\t\t * 2. `before-all-elements-highlight`\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t\t *\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAllUnder: function (container, async, callback) {\n\t\t\tvar env = {\n\t\t\t\tcallback: callback,\n\t\t\t\tcontainer: container,\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t\t};\n\n\t\t\t_.hooks.run('before-highlightall', env);\n\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Highlights the code inside a single element.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-sanity-check`\n\t\t * 2. `before-highlight`\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t\t * 4. `before-insert`\n\t\t * 5. `after-highlight`\n\t\t * 6. `complete`\n\t\t *\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t\t * the element's language.\n\t\t *\n\t\t * @param {Element} element The element containing the code.\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t\t *\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\n\t\t * [Download page](https://prismjs.com/download.html).\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightElement: function (element, async, callback) {\n\t\t\t// Find language\n\t\t\tvar language = _.util.getLanguage(element);\n\t\t\tvar grammar = _.languages[language];\n\n\t\t\t// Set language on the element, if not present\n\t\t\t_.util.setLanguage(element, language);\n\n\t\t\t// Set language on the parent, for styling\n\t\t\tvar parent = element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\t\t_.util.setLanguage(parent, language);\n\t\t\t}\n\n\t\t\tvar code = element.textContent;\n\n\t\t\tvar env = {\n\t\t\t\telement: element,\n\t\t\t\tlanguage: language,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tcode: code\n\t\t\t};\n\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t}\n\n\t\t\t_.hooks.run('before-sanity-check', env);\n\n\t\t\t// plugins may change/add the parent/element\n\t\t\tparent = env.element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n\t\t\t\tparent.setAttribute('tabindex', '0');\n\t\t\t}\n\n\t\t\tif (!env.code) {\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.hooks.run('before-highlight', env);\n\n\t\t\tif (!env.grammar) {\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (async && _self.Worker) {\n\t\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\t\tworker.onmessage = function (evt) {\n\t\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t\t};\n\n\t\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\t\tlanguage: env.language,\n\t\t\t\t\tcode: env.code,\n\t\t\t\t\timmediateClose: true\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you\u2019re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tif (!env.grammar) {\n\t\t\t\tthrow new Error('The language \"' + env.language + '\" has no grammar.');\n\t\t\t}\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\t_self.Prism = _;\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\tif (!_self.document) {\n\t\tif (!_self.addEventListener) {\n\t\t\t// in Node.js\n\t\t\treturn _;\n\t\t}\n\n\t\tif (!_.disableWorkerMessageHandler) {\n\t\t\t// In worker\n\t\t\t_self.addEventListener('message', function (evt) {\n\t\t\t\tvar message = JSON.parse(evt.data);\n\t\t\t\tvar lang = message.language;\n\t\t\t\tvar code = message.code;\n\t\t\t\tvar immediateClose = message.immediateClose;\n\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\t\tif (immediateClose) {\n\t\t\t\t\t_self.close();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\n\t\treturn _;\n\t}\n\n\t// Get current script and highlight\n\tvar script = _.util.currentScript();\n\n\tif (script) {\n\t\t_.filename = script.src;\n\n\t\tif (script.hasAttribute('data-manual')) {\n\t\t\t_.manual = true;\n\t\t}\n\t}\n\n\tfunction highlightAutomaticallyCallback() {\n\t\tif (!_.manual) {\n\t\t\t_.highlightAll();\n\t\t}\n\t}\n\n\tif (!_.manual) {\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t\t// See https://github.com/PrismJS/prism/issues/2102\n\t\tvar readyState = document.readyState;\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _;\n\n}(_self));\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': {\n\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n\t\tgreedy: true\n\t},\n\t'prolog': {\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\n\t\tgreedy: true\n\t},\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/i,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': {\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\tgreedy: true\n\t},\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'special-attr': [],\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n\t/**\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\n\t *\n\t * An example of an inlined language is CSS with `style` attributes.\n\t *\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addAttribute('style', 'css');\n\t */\n\tvalue: function (attrName, lang) {\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n\t\t\t\t'i'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attr-name': /^[^\\s=]+/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\n(function (Prism) {\n\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n\n\tPrism.languages.css = {\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t\t'atrule': {\n\t\t\tpattern: RegExp('@[\\\\w-](?:' + /[^;{\\s\"']|\\s+(?!\\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\\s*\\{))/.source),\n\t\t\tinside: {\n\t\t\t\t'rule': /^@[\\w-]+/,\n\t\t\t\t'selector-function-argument': {\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'selector'\n\t\t\t\t},\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t\t// See rest below\n\t\t\t}\n\t\t},\n\t\t'url': {\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^url/i,\n\t\t\t\t'punctuation': /^\\(|\\)$/,\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\n\t\t\t\t\talias: 'url'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'selector': {\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true\n\t\t},\n\t\t'property': {\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'important': /!important\\b/i,\n\t\t'function': {\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[(){};:,]/\n\t};\n\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\n\tvar markup = Prism.languages.markup;\n\tif (markup) {\n\t\tmarkup.tag.addInlined('style', 'css');\n\t\tmarkup.tag.addAttribute('style', 'css');\n\t}\n\n}(Prism));\n\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': {\n\t\tpattern: RegExp(\n\t\t\t/(^|[^\\w$])/.source +\n\t\t\t'(?:' +\n\t\t\t(\n\t\t\t\t// constant\n\t\t\t\t/NaN|Infinity/.source +\n\t\t\t\t'|' +\n\t\t\t\t// binary integer\n\t\t\t\t/0[bB][01]+(?:_[01]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// octal integer\n\t\t\t\t/0[oO][0-7]+(?:_[0-7]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// hexadecimal integer\n\t\t\t\t/0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal bigint\n\t\t\t\t/\\d+(?:_\\d+)*n/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal number (integer or float) but no bigint\n\t\t\t\t/(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source\n\t\t\t) +\n\t\t\t')' +\n\t\t\t/(?![\\w$])/.source\n\t\t),\n\t\tlookbehind: true\n\t},\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: RegExp(\n\t\t\t// lookbehind\n\t\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\t\t/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source +\n\t\t\t// Regex pattern:\n\t\t\t// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\n\t\t\t// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\n\t\t\t// with the only syntax, so we have to define 2 different regex patterns.\n\t\t\t/\\//.source +\n\t\t\t'(?:' +\n\t\t\t/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source +\n\t\t\t'|' +\n\t\t\t// `v` flag syntax. This supports 3 levels of nested character classes.\n\t\t\t/(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +\n\t\t\t')' +\n\t\t\t// lookahead\n\t\t\t/(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source\n\t\t),\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t'regex-flags': /^[a-z]+$/,\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'hashbang': {\n\t\tpattern: /^#!.*/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'string-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'property'\n\t}\n});\n\nPrism.languages.insertBefore('javascript', 'operator', {\n\t'literal-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n\n\t// add attribute support for all DOM events.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\tPrism.languages.markup.tag.addAttribute(\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n\t\t'javascript'\n\t);\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\n\t\treturn;\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\tif (!Element.prototype.matches) {\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\t}\n\n\tvar LOADING_MESSAGE = 'Loading\u2026';\n\tvar FAILURE_MESSAGE = function (status, message) {\n\t\treturn '\u2716 Error ' + status + ' while fetching file: ' + message;\n\t};\n\tvar FAILURE_EMPTY_MESSAGE = '\u2716 Error: File does not exist or is empty';\n\n\tvar EXTENSIONS = {\n\t\t'js': 'javascript',\n\t\t'py': 'python',\n\t\t'rb': 'ruby',\n\t\t'ps1': 'powershell',\n\t\t'psm1': 'powershell',\n\t\t'sh': 'bash',\n\t\t'bat': 'batch',\n\t\t'h': 'c',\n\t\t'tex': 'latex'\n\t};\n\n\tvar STATUS_ATTR = 'data-src-status';\n\tvar STATUS_LOADING = 'loading';\n\tvar STATUS_LOADED = 'loaded';\n\tvar STATUS_FAILED = 'failed';\n\n\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'\n\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\n\n\t/**\n\t * Loads the given file.\n\t *\n\t * @param {string} src The URL or path of the source file to load.\n\t * @param {(result: string) => void} success\n\t * @param {(reason: string) => void} error\n\t */\n\tfunction loadFile(src, success, error) {\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('GET', src, true);\n\t\txhr.onreadystatechange = function () {\n\t\t\tif (xhr.readyState == 4) {\n\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\tsuccess(xhr.responseText);\n\t\t\t\t} else {\n\t\t\t\t\tif (xhr.status >= 400) {\n\t\t\t\t\t\terror(FAILURE_MESSAGE(xhr.status, xhr.statusText));\n\t\t\t\t\t} else {\n\t\t\t\t\t\terror(FAILURE_EMPTY_MESSAGE);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\txhr.send(null);\n\t}\n\n\t/**\n\t * Parses the given range.\n\t *\n\t * This returns a range with inclusive ends.\n\t *\n\t * @param {string | null | undefined} range\n\t * @returns {[number, number | undefined] | undefined}\n\t */\n\tfunction parseRange(range) {\n\t\tvar m = /^\\s*(\\d+)\\s*(?:(,)\\s*(?:(\\d+)\\s*)?)?$/.exec(range || '');\n\t\tif (m) {\n\t\t\tvar start = Number(m[1]);\n\t\t\tvar comma = m[2];\n\t\t\tvar end = m[3];\n\n\t\t\tif (!comma) {\n\t\t\t\treturn [start, start];\n\t\t\t}\n\t\t\tif (!end) {\n\t\t\t\treturn [start, undefined];\n\t\t\t}\n\t\t\treturn [start, Number(end)];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tPrism.hooks.add('before-highlightall', function (env) {\n\t\tenv.selector += ', ' + SELECTOR;\n\t});\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);\n\t\tif (pre.matches(SELECTOR)) {\n\t\t\tenv.code = ''; // fast-path the whole thing and go to complete\n\n\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\n\n\t\t\t// add code element with loading message\n\t\t\tvar code = pre.appendChild(document.createElement('CODE'));\n\t\t\tcode.textContent = LOADING_MESSAGE;\n\n\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\tvar language = env.language;\n\t\t\tif (language === 'none') {\n\t\t\t\t// the language might be 'none' because there is no language set;\n\t\t\t\t// in this case, we want to use the extension as the language\n\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\n\t\t\t\tlanguage = EXTENSIONS[extension] || extension;\n\t\t\t}\n\n\t\t\t// set language classes\n\t\t\tPrism.util.setLanguage(code, language);\n\t\t\tPrism.util.setLanguage(pre, language);\n\n\t\t\t// preload the language\n\t\t\tvar autoloader = Prism.plugins.autoloader;\n\t\t\tif (autoloader) {\n\t\t\t\tautoloader.loadLanguages(language);\n\t\t\t}\n\n\t\t\t// load file\n\t\t\tloadFile(\n\t\t\t\tsrc,\n\t\t\t\tfunction (text) {\n\t\t\t\t\t// mark as loaded\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);\n\n\t\t\t\t\t// handle data-range\n\t\t\t\t\tvar range = parseRange(pre.getAttribute('data-range'));\n\t\t\t\t\tif (range) {\n\t\t\t\t\t\tvar lines = text.split(/\\r\\n?|\\n/g);\n\n\t\t\t\t\t\t// the range is one-based and inclusive on both ends\n\t\t\t\t\t\tvar start = range[0];\n\t\t\t\t\t\tvar end = range[1] == null ? lines.length : range[1];\n\n\t\t\t\t\t\tif (start < 0) { start += lines.length; }\n\t\t\t\t\t\tstart = Math.max(0, Math.min(start - 1, lines.length));\n\t\t\t\t\t\tif (end < 0) { end += lines.length; }\n\t\t\t\t\t\tend = Math.max(0, Math.min(end, lines.length));\n\n\t\t\t\t\t\ttext = lines.slice(start, end).join('\\n');\n\n\t\t\t\t\t\t// add data-start for line numbers\n\t\t\t\t\t\tif (!pre.hasAttribute('data-start')) {\n\t\t\t\t\t\t\tpre.setAttribute('data-start', String(start + 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// highlight code\n\t\t\t\t\tcode.textContent = text;\n\t\t\t\t\tPrism.highlightElement(code);\n\t\t\t\t},\n\t\t\t\tfunction (error) {\n\t\t\t\t\t// mark as failed\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);\n\n\t\t\t\t\tcode.textContent = error;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n\n\tPrism.plugins.fileHighlight = {\n\t\t/**\n\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.\n\t\t *\n\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.\n\t\t *\n\t\t * @param {ParentNode} [container=document]\n\t\t */\n\t\thighlight: function highlight(container) {\n\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);\n\n\t\t\tfor (var i = 0, element; (element = elements[i++]);) {\n\t\t\t\tPrism.highlightElement(element);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar logged = false;\n\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\n\tPrism.fileHighlight = function () {\n\t\tif (!logged) {\n\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\n\t\t\tlogged = true;\n\t\t}\n\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);\n\t};\n\n}());\n", "\n'use strict';\nimport * as vscode from 'vscode';\nimport { HelloWorldPanel } from './helloWorld';\n//import Tutorial from './tutorial/tutorial';\nimport AutoGit from './vcs/auto-git';\n// import {activateTimeout} from './callback/timeout';\nimport { activateAfkWebView } from './afk/webview';\nimport { activateTimeout } from './session/sessionUpdate';\nimport { activateTutorialWebView } from './tutorial/webview';\nimport {activateStreakWebView} from './streak/webview';\nimport { activateTeacherWebView } from './teacher/webview';\nimport { activateEditor } from './tutorial-editor/webview';\nimport { openStdin } from 'process';\nimport path = require('path');\n\nlet autoGit: AutoGit;\n//let tutorial: Tutorial;\n\n\n\n//activate function registers all listed commands and initializes some classes on startup\nexport function activate(context: vscode.ExtensionContext) {\n\n\n    // vscode.languages.registerHoverProvider('markdown', {\n    //     provideHover(document, position, token) {\n    //         try{\n    //             let texrEditr =  vscode.window.activeTextEditor;\n    //             const decorationType = vscode.window.createTextEditorDecorationType(\n    //                 {\n    //                     light:\n    //                     {\n    //                         gutterIconPath: '/home/user/Downloads/xlf3lb2pg0x71.svg',\n    //                         gutterIconSize: '85%',\n    //                     },\n    //                     dark:\n    //                     {\n    //                         gutterIconPath: '/home/user/Downloads/xlf3lb2pg0x71.svg',\n    //                         gutterIconSize: '85%'\n    //                     }\n    //                 });\n            \n    //             if (texrEditr) {\n    //                  texrEditr.setDecorations(decorationType, rangesO);\n    //             }\n    //         }catch(error){\n    //             console.log(error);\n    //         }\n            \n    //       return {\n    //         contents: [`${document.lineAt(position.line).text}: ${token.onCancellationRequested}`]\n    //       };\n    //     }\n    //   });\n\n\n    let logger: Record<string, any> = {};\n\n    console.log(\"before output channels\")\n    let errors = vscode.window.createOutputChannel(\"GIGO Developer Errors\");\n    let debug = vscode.window.createOutputChannel(\"GIGO Developer Debug\");\n\n    logger.error = errors;\n    logger.info = debug;\n\n    console.log(\"after output channels: \", logger.error)\n    \n    let fs = require('fs');\n\n    var cfg = getCfg();\n    if (cfg === null) {\n        console.log('ERROR: CONFIGURATION FILE IS MISSING OR INCOMPLETE!');\n    }\n\n    var baseWorkspaceUri!: vscode.Uri;\n\n    if (vscode.workspace.workspaceFolders !== undefined){\n        baseWorkspaceUri = vscode.workspace.workspaceFolders[0].uri;\n        baseWorkspaceUri.fsPath.replace(\"file://\", \"\");\n        let tourPath = path.join(baseWorkspaceUri.fsPath, \".gigo\", \".tours\");\n        let tutorialPath = baseWorkspaceUri.fsPath + \"/.gigo\" + \"/.tutorials\";\n\n\t\tif (!fs.existsSync(tourPath)) {\n            fs.mkdirSync(tourPath);\n        }\n\n        if (!fs.existsSync(tutorialPath)){\n            fs.mkdirSync(tutorialPath);\n        }\n    }\n    \n\n\n    logger.info.appendLine(\"Starting GIGO Autogit...\");\n    //registser autoGit command using its local activation function\n    autoGit = new AutoGit(cfg.workspace_settings.auto_git, logger);\n    autoGit.activate(context);\n\n    console.log(\"after auto git\");\n\n    //start tutorial using its local activation function\n    // tutorial = new Tutorial(context);\n    logger.info.appendLine(\"Starting GIGO Session...\");\n    activateTimeout(context, cfg, logger);\n\n    console.log(\"calling afk activation\");\n\n    logger.info.appendLine(\"Starting GIGO AFK Page...\");\n    //start afk using its local activation function\n    activateAfkWebView(context, cfg, logger);\n\n    logger.info.appendLine(\"Starting GIGO Tutorial...\");\n    activateTutorialWebView(context, logger);\n\n    logger.info.appendLine(\"Starting GIGO Streak...\");\n    activateStreakWebView(context, cfg, logger);\n\n    logger.info.appendLine(\"Starting GIGO Code Teacher...\");\n    activateTeacherWebView(context, logger);\n    \n    \n    console.log(\"calling editor activation\");\n    activateEditor(context);\n\n    logger.info.appendLine(\"GIGO Extension Setup...\");\n    \n}\n\nexport function getCfg(){\n\n    \n\n    var cfg: any;\n    try{\n        const homedir = require('os').homedir();\n        const fs = require('fs');\n        const path = require('node:path');\n  \n        let cfgPath = path.join(homedir, '.gigo/ws-config.json')\n        let cfgFile = fs.readFileSync(cfgPath, 'utf-8');\n        cfg = JSON.parse(cfgFile);\n        console.log(cfg);\n    }catch(e){\n        console.log(e);\n        return;\n    }\n\n    return cfg;\n}\n\nexport function deactivate() {\n\n}", "'use strict';\nimport * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nimport simpleGit, { SimpleGit } from 'simple-git';\nimport exp = require('constants');\n\nlet myStatusBarItem: vscode.StatusBarItem;\n\n//auto git dynamically commits and pushes to git\nclass AutoGit implements vscode.Disposable { \n    public counter: number = 0;\n    private intervalId: any = null;\n    public workspace!: vscode.Uri;\n    public running: boolean = false;\n    private homedir!: string;\n    private logsdir!: string;\n    public cfg!: any;\n    private gitdir!: string;\n    private gitcfg!: string;\n\tpublic isInitialized: boolean = false;\n    public logger: any;\n\n    //class constructor \n    constructor(fileCfg: any, sysLogger: any){\n        this.logger = sysLogger;\n        this.cfg = fileCfg;\n        console.log(this.isInitialized);\n        //attempt to find the home directory of workspace\n\t\tthis.checkWorkspace();\n\n        //ensure that current workspace is a git repository\n\t\tthis.checkGit();\n\n        // ensure that the auto git directory exists\n        if(!this.isInitialized){\n            this.setup();\n            vscode.window.showInformationMessage('Auto-Git initialized.');\n            this.logger.info.appendLine(\"AutoGit: Auto-Git initialized.\");\n            console.log(\"AutoGit: Auto-Git initialized.\");\n        }\n\n        console.log(\"auto git config: \", this.cfg)\n\n\t\t// try {\n        //     //ensure that config exists\n        //     fs.statSync(this.cfg);\n\t\t// \tthis.isInitialized = true;\n\n        //     //read user git config\n        //     var userCfg: any = JSON.parse(fs.readFileSync(this.cfg, 'utf8'));\n        //     var currentCfg: any = this.currentConfigSchema();\n        //     //validate that all parameters are present in current config\n        //     if(!this.compareKeys(userCfg, currentCfg)){\n        //         const newProperties = Object.keys(currentCfg).filter(prop => !userCfg.hasOwnProperty(prop));\n\n        //         newProperties.forEach(prop => {\n        //             userCfg[prop] = currentCfg[prop];\n        //         });\n                \n        //         fs.writeFileSync(this.cfg, JSON.stringify(userCfg, null, 2));\n        //     }\n        // } catch (err) {\n        //     console.log(err);\n        // }\n\t}\n\n    //actiavet() is called on startup\n    public activate(context: vscode.ExtensionContext): void {\n        //register necessary commands\n        let cmdversion = vscode.commands.registerCommand('autogit.version', () => {\n            vscode.window.showInformationMessage('Version 0.0.1 by Gigo Dev <dev@gigo.dev> (Forked From Version 1.1.4 by Eray S\u00F6nmez <dev@ray-works.de>)');\n        });\n    \n        let cmdinit = vscode.commands.registerCommand('autogit.init', () => {\n            if(this.checkWorkspace() && this.checkGit()){\n                if(!this.isInitialized){\n                    this.setup();\n                    this.start();\n                    vscode.window.showInformationMessage('Auto-Git initialized.');\n                } else {\n                    vscode.window.showInformationMessage('Auto-Git is already initialized.');\n                }\n            } else {\n                vscode.window.showInformationMessage('Auto-Git can only run in a workspace and git-repository.');\n            }\n        });\n        \n        //ensure that workspace and git repo are both valid on start\n        let cmdstart = vscode.commands.registerCommand('autogit.start', () => {\n            if(this.checkWorkspace() && this.checkGit()){\n                //ensure that git is initialized\n                if(!this.isInitialized){\n                    this.setup();\n                    vscode.window.showInformationMessage('Auto-Git initialized.');\n                } else {\n                    vscode.window.showInformationMessage('Auto-Git is already initialized.');\n                }\n\n                //if extension is not currently active start it\n                if(!this.running){\n                    this.start();\n                    vscode.window.showInformationMessage('Auto-Git started.');\n                } else {       \n                    vscode.window.showInformationMessage('Auto-Git is already running.');\n                }\n            } else {\n                vscode.window.showInformationMessage('Auto-Git can only run in a workspace and git-repository.');\n            }\n        });\n    \n        let cmdstop = vscode.commands.registerCommand('autogit.stop', () => {\n            if(this.checkWorkspace() && this.checkGit()){\n                if(this.running){\n                    this.stop();\n                    vscode.window.showInformationMessage('Auto-Git stopped.');\n                } else {\n                    vscode.window.showInformationMessage('Auto-Git is not running.');\n                }\n            } else {\n                vscode.window.showInformationMessage('Auto-Git can only run in a workspace and git-repository.');\n            }\n        });\n    \n        let cmdrestart = vscode.commands.registerCommand('autogit.restart', () => {\n            if(this.checkWorkspace() && this.checkGit()){\n                if(this.running){\n                    this.stop();\n                    this.start();\n                    vscode.window.showInformationMessage('Auto-Git restarted.');\n                } else {\n                //ensure that git is initialized\n                    if(!this.isInitialized){\n                        this.setup();\n                        vscode.window.showInformationMessage('Auto-Git initialized.');\n                    } else {\n                        vscode.window.showInformationMessage('Auto-Git is already initialized.');\n                    }\n                    this.start();\n                    vscode.window.showInformationMessage('Auto-Git restarted.');\n                }\n            } else {\n                vscode.window.showInformationMessage('Auto-Git can only run in a workspace and git-repository.');\n            }\n        });\n    \n        context.subscriptions.push(cmdinit);\n        context.subscriptions.push(cmdversion);\n        context.subscriptions.push(cmdstart);\n        context.subscriptions.push(cmdstop);\n        context.subscriptions.push(cmdrestart);\n    \n        // if(this.isInitialized){\n        //     var cfg = JSON.parse(fs.readFileSync(this.cfg, 'utf8'));\n        //     if(cfg.runOnStart){\n        //         this.start();\n        //     }\n        // }\n\n        if(this.cfg.runOnStart){\n            this.start();\n        }\n    \n        //create status bar icon for displaying time until next auto save\n        myStatusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);\n        context.subscriptions.push(myStatusBarItem);\n        myStatusBarItem.show();\n\n        \n    }\n\n    dispose(): void {\n        this.stop();\n    }\n\n    //basic config is configured to auto update every 5 secs\n    public currentConfigSchema(): object {\n        return { \n            \"runOnStart\": true,\n            'updateInterval': 18,\n            'logging': true, \n            'silent': false,\n            \"commitMessage\": \"--- Auto Git Commit ---\",\n            \"locale\": \"en-US\",\n            \"timeZone\": \"America/Chicago\"\n        };\n    }\n\n    private compareKeys(a: object, b: object): boolean {\n        var aKeys = Object.keys(a).sort();\n        var bKeys = Object.keys(b).sort();\n        return JSON.stringify(aKeys) === JSON.stringify(bKeys);\n    }\n\n    //update status bar with passed in text\n    private updateStatusBarItem(text: string): void {\n        myStatusBarItem.text = text;\n    }\n\n    //start() functions as main loop for auto-git extension\n    public start(): void {\n        console.log(\"Starting auto-git extension\");\n        //loads auto-git config into json object\n        // var cfg = JSON.parse(fs.readFileSync(this.cfg, 'utf8'));\n\n        var cfg = this.cfg;\n\n        //setting up local variables for auto-update intervals\n        this.running = true;\n        this.counter = cfg.updateInterval;\n\n        //begin interval interation and retrieve intervalid for loop control\n        this.intervalId = setInterval(() => {\n            //decrement counter\n            this.counter--;\n            try {\n                //display time until next commit\n                this.updateStatusBarItem(\"Next Auto-Git in... \" + this.counter);\n            } catch (e) {\n                this.logger.error.appendLine(`AutoGit Failed: Failed to update status bar: ${e}`);\n                console.log(\"failed to update status bar: \", e);\n            }\n            //when counter reaches zero execute auto-git extension\n            if(this.counter === 0){\n                this.updateStatusBarItem(\"Auto-Git: Checking files...\");\n                //reset counter from config parameter\n                this.counter = cfg.updateInterval;\n                //load repository from workspace file\n                const git: SimpleGit = simpleGit(this.workspace.fsPath);\n\n                //pull repository\n                git.pull();\n                //append to tree\n                git.add('.'+ path.sep + '*');\n\n                //check if repository is dirty and compile changes\n                git.status().then(async (status: any) => { \n                    //deyermine number of changes from status modified, created, deleted, and renamed files\n                    let changes = status.modified.length + status.created.length + status.deleted.length + status.renamed.length;\n                    if(changes > 0){\n                        //update status bar\n                        this.updateStatusBarItem(\"Auto-Git: Pushing files...\");\n\n                        //time formatting options\n                        let options = { \n                            weekday: 'long',\n                            year: 'numeric',\n                            month: 'long',\n                            day: 'numeric',\n                            timeZone: cfg.timeZone ?? 'Europe/Berlin',\n                            hour: '2-digit',\n                            minute: '2-digit',\n                            second: '2-digit',\n                        } as const;    \n\n                        var replacements: { [key: string]: string }  = {\n                            // eslint-disable-next-line @typescript-eslint/naming-convention\n                            \"{ts}\": (new Date().getTime() / 1000).toString(),\n                            // eslint-disable-next-line @typescript-eslint/naming-convention\n                            \"{ts.utc}\": new Date().toUTCString(),\n                            // eslint-disable-next-line @typescript-eslint/naming-convention\n                            \"{ts.iso}\": new Date().toISOString(),\n                            // eslint-disable-next-line @typescript-eslint/naming-convention\n                            \"{ts.locale}\": new Date().toLocaleString(cfg.locale ?? 'en-US', { timeZone: cfg.timeZone ?? 'Europe/Berlin' }),\n                            // eslint-disable-next-line @typescript-eslint/naming-convention\n                            \"{ts.locale.date}\": new Date().toLocaleDateString(cfg.locale ?? 'en-US', { timeZone: cfg.timeZone ?? 'Europe/Berlin' }),\n                            // eslint-disable-next-line @typescript-eslint/naming-convention\n                            \"{ts.locale.time}\": new Date().toLocaleTimeString(cfg.locale ?? 'en-US', { timeZone: cfg.timeZone ?? 'Europe/Berlin' }),\n                            // eslint-disable-next-line @typescript-eslint/naming-convention\n                            \"{ts.locale.long}\": new Date().toLocaleString(cfg.locale ?? 'en-US', options)\n                        };\n\n                        //format config message\n                        cfg.commitMessage = cfg.commitMessage.replace(/\\{.+?\\}/g, (key: string): string => replacements[key]);\n\n                        //await commit message\n                        await git.commit(cfg.commitMessage ?? \"--- Auto-Git Commit ---\");\n\t\t\t\t\t\tvar remote = status.tracking.split('/')[0] ?? \"origin\";\n\t\t\t\t\t\tvar branch = status.tracking.split('/')[1] ?? \"master\";\n\n                        //push commit to origin/master\n                        await git.push(remote, branch, ['-u']);\n\n                        //log to file\n                        console.log(\"[Auto-Git]: Changes since last sync: modified (\" + status.modified.length + \") | created (\" + status.created.length + \") | deleted (\" + status.deleted.length + \") | renamed: (\" + status.renamed.length + \")\" );\n                        this.logger.info.appendLine(\"AutoGit: Changes since last sync: modified (\" + status.modified.length + \") | created (\" + status.created.length + \") | deleted (\" + status.deleted.length + \") | renamed: (\" + status.renamed.length + \")\");\n                        if(cfg.logging){\n                            var date = new Date();\n                            let log = \"-------------------- Auto-Git Log --------------------\";\n                            log += \"\\n\" + date.toString();\n                            log += \"\\n------------------------------------------------------\";\n\n                            log += \"\\n\";\n                            log += \"\\nModified files:\";\n                            log += \"\\n\";\n                            status.modified.forEach((element: string) => {\n                                log += \"* \" + element + \"\\n\";\n                            });\n\n                            log += \"\\n\";\n                            log += \"\\nCreated files:\";\n                            log += \"\\n\";\n                            status.created.forEach((element: string) => {\n                                log += \"* \" + element + \"\\n\";\n                            });\n\n                            log += \"\\n\";\n                            log += \"\\nDeleted files:\";\n                            log += \"\\n\";\n                            status.deleted.forEach((element: string) => {\n                                log += \"* \" + element + \"\\n\";\n                            });\n\n                            log += \"\\n\";\n                            log += \"\\nRenamed files:\";\n                            log += \"\\n\";\n                            status.renamed.forEach((element: string) => {\n                                log += \"* \" + element + \"\\n\";\n                            });\n\n                            fs.writeFileSync(this.logsdir + path.sep + 'log-' + date.getDate() + '-' + date.getMonth() + '-' + date.getFullYear() + '-' + date.getHours() + '-' + date.getMinutes() + '-' + date.getSeconds() + '.txt', log);\n                        }\n                        if(!cfg.silent){\n                            //if not silent display update message with number of modified files\n                            vscode.window.showInformationMessage(\"Auto-Git updated \" + changes + \" change(s).\"); \n                        }\n\n                        //update status bar\n                        this.updateStatusBarItem(\"Auto-Git: Push done. Starting next cycle...\");\n                    }\n                });\n\n                //reset interval for next interation\n                clearInterval(this.intervalId);\n                this.intervalId = null;\n                //recursively call this function again after 5s\n                setTimeout(() => {\n                    this.start();\n                }, 5000);\n            }\n        }, 1000);\n    }\n\n    //stop() pauses all actions and updates status bar\n    public stop(): void {\n        if(this.running){\n            //stop interval iteration\n            clearInterval(this.intervalId);\n            //reset interval value for restart\n            this.intervalId = null;\n            this.running = false;\n            this.updateStatusBarItem(\"--- Auto-Git not running ---\");\n        }\n    }\n\n    public setup() {\n        console.log(\"setup auto git\");\n        this.logger.info.appendLine(\"AutoGit: Setting up auto git.\");\n        try{\n            fs.statSync(this.homedir);\n        } catch (err) {\n            fs.mkdirSync(this.homedir, {recursive: true});\n        }\n\n        try{\n            fs.statSync(this.logsdir);\n        } catch (err) {\n            fs.mkdirSync(this.logsdir, {recursive: true});\n        }\n\n        // try {\n        //     fs.statSync(this.cfg);\n        // } catch (err) {\n        //     fs.writeFileSync(this.cfg, JSON.stringify(this.currentConfigSchema(), null, 2));\n        // }\n\n        try{\n            fs.statSync(this.workspace.fsPath.concat(path.sep + '.gitignore'));\n        }catch(err){\n            fs.writeFileSync(this.workspace.fsPath.concat(path.sep + '.gitignore'), '.gigo/autogit');\n        }\n\n        let gitignore = fs.readFileSync(this.workspace.fsPath.concat(path.sep + '.gitignore'));\n        \n        if(gitignore.indexOf('.gigo/autogit') === -1) {\n            console.log(this.workspace.fsPath.concat('.gitignore'));\n    \n            fs.appendFileSync(this.workspace.fsPath + '/.gitignore', '.gigo/autogit');\n        }\n\n\t\tthis.isInitialized = true;\n    }\n\n    //checkGit() validates that the current workspace is a git repo\n    public checkGit(): boolean {\n        try {\n            console.log(\"autogit checkGit dir: \", this.gitdir);\n            fs.statSync(this.gitdir);\n            console.log(\"autogit checkGit cfg: \", this.gitcfg);\n            fs.statSync(this.gitcfg);\n            this.logger.info.appendLine(\"AutoGit: Workspace is a git repository.\");\n            console.log('[Auto-Git] [OK]: Workspace is a git repository.');\n            return true;\n        }\n        catch (err) {\n            console.log(err);\n            this.logger.error.appendLine(\"AutoGit Failed: Workspace is not a git reposiory, disabling extension\");\n            console.log('[Auto-Git] [Error]: Workspace is not a git repository, disabling extension.');\n            return false;\n        }\n    }\n\n    //checkWorkspace() validates that the current working directory is a workspace and that proper git files are present\n    public checkWorkspace(): boolean {\n        try {\n\t\t\tif(vscode.workspace.workspaceFolders !== undefined){\n\t\t\t\tfs.statSync(vscode.workspace.workspaceFolders[0].uri.fsPath );\n\t\t\t\tconsole.log('[Auto-Git] [OK]: Workspace found: ' + vscode.workspace.workspaceFolders[0].uri.fsPath);\n\t\t\t\tthis.workspace = vscode.workspace.workspaceFolders[0].uri;\n\t\t\t\t\n\t\t\t\tthis.homedir = path.join(this.workspace.fsPath, '.gigo/autogit');\n\t\t\t\tthis.logsdir = path.join(this.workspace.fsPath, '.gigo/autogit/logs');\n\t\t\t\t//this.cfg = this.workspace.fsPath.concat(path.sep + '.gigo/autogit/autogit.json');\n\t\t\t\tthis.gitdir = path.join(this.workspace.fsPath, '.git');\n                console.log(\"auto git dir: \" + this.workspace.fsPath);\n\t\t\t\tthis.gitcfg = path.join(this.workspace.fsPath, '.git/config');\n\n\t\t\t\treturn true;\n\t\t\t} else {\n                this.logger.error.appendLine(\"AutoGit Failed: No workspace found, disabling extension.\");\n\t\t\t\tconsole.log('[Auto-Git] [Error]: No workspace found, disabling extension.');\n\t\t\t}\n        }\n        catch (err) {\n            this.logger.error.appendLine(\"AutoGit Failed: No workspace found, disabling extension.\");\n            console.log('[Auto-Git] [Error]: No workspace found, disabling extension.');\n\t\t}\n\t\treturn false;\n    }\n}\n\nexport default AutoGit;", "import type { SimpleGitTask } from '../types';\n\n/**\n * The `GitError` is thrown when the underlying `git` process throws a\n * fatal exception (eg an `ENOENT` exception when attempting to use a\n * non-writable directory as the root for your repo), and acts as the\n * base class for more specific errors thrown by the parsing of the\n * git response or errors in the configuration of the task about to\n * be run.\n *\n * When an exception is thrown, pending tasks in the same instance will\n * not be executed. The recommended way to run a series of tasks that\n * can independently fail without needing to prevent future tasks from\n * running is to catch them individually:\n *\n * ```typescript\n import { gitP, SimpleGit, GitError, PullResult } from 'simple-git';\n\n function catchTask (e: GitError) {\n   return e.\n }\n\n const git = gitP(repoWorkingDir);\n const pulled: PullResult | GitError = await git.pull().catch(catchTask);\n const pushed: string | GitError = await git.pushTags().catch(catchTask);\n ```\n */\nexport class GitError extends Error {\n   constructor(public task?: SimpleGitTask<any>, message?: string) {\n      super(message);\n      Object.setPrototypeOf(this, new.target.prototype);\n   }\n}\n", "import { GitError } from './git-error';\n\n/**\n * The `GitResponseError` is the wrapper for a parsed response that is treated as\n * a fatal error, for example attempting a `merge` can leave the repo in a corrupted\n * state when there are conflicts so the task will reject rather than resolve.\n *\n * For example, catching the merge conflict exception:\n *\n * ```typescript\n import { gitP, SimpleGit, GitResponseError, MergeSummary } from 'simple-git';\n\n const git = gitP(repoRoot);\n const mergeOptions: string[] = ['--no-ff', 'other-branch'];\n const mergeSummary: MergeSummary = await git.merge(mergeOptions)\n      .catch((e: GitResponseError<MergeSummary>) => e.git);\n\n if (mergeSummary.failed) {\n   // deal with the error\n }\n ```\n */\nexport class GitResponseError<T = any> extends GitError {\n   constructor(\n      /**\n       * `.git` access the parsed response that is treated as being an error\n       */\n      public readonly git: T,\n      message?: string\n   ) {\n      super(undefined, message || String(git));\n   }\n}\n", "import { GitError } from './git-error';\n\n/**\n * The `TaskConfigurationError` is thrown when a command was incorrectly\n * configured. An error of this kind means that no attempt was made to\n * run your command through the underlying `git` binary.\n *\n * Check the `.message` property for more detail on why your configuration\n * resulted in an error.\n */\nexport class TaskConfigurationError extends GitError {\n   constructor(message?: string) {\n      super(undefined, message);\n   }\n}\n", "import { exists, FOLDER } from '@kwsites/file-exists';\nimport { Maybe } from '../types';\n\nexport const NULL = '\\0';\n\nexport const NOOP: (...args: any[]) => void = () => {};\n\n/**\n * Returns either the source argument when it is a `Function`, or the default\n * `NOOP` function constant\n */\nexport function asFunction<T extends () => any>(source: T | any): T {\n   return typeof source === 'function' ? source : NOOP;\n}\n\n/**\n * Determines whether the supplied argument is both a function, and is not\n * the `NOOP` function.\n */\nexport function isUserFunction<T extends Function>(source: T | any): source is T {\n   return typeof source === 'function' && source !== NOOP;\n}\n\nexport function splitOn(input: string, char: string): [string, string] {\n   const index = input.indexOf(char);\n   if (index <= 0) {\n      return [input, ''];\n   }\n\n   return [input.substr(0, index), input.substr(index + 1)];\n}\n\nexport function first<T extends any[]>(input: T, offset?: number): Maybe<T[number]>;\nexport function first<T extends IArguments>(input: T, offset?: number): Maybe<unknown>;\nexport function first(input: any[] | IArguments, offset = 0): Maybe<unknown> {\n   return isArrayLike(input) && input.length > offset ? input[offset] : undefined;\n}\n\nexport function last<T extends any[]>(input: T, offset?: number): Maybe<T[number]>;\nexport function last<T extends IArguments>(input: T, offset?: number): Maybe<unknown>;\nexport function last<T>(input: T, offset?: number): Maybe<unknown>;\nexport function last(input: unknown, offset = 0) {\n   if (isArrayLike(input) && input.length > offset) {\n      return input[input.length - 1 - offset];\n   }\n}\n\ntype ArrayLike<T = any> = T[] | IArguments | { [index: number]: T; length: number };\n\nfunction isArrayLike(input: any): input is ArrayLike {\n   return !!(input && typeof input.length === 'number');\n}\n\nexport function toLinesWithContent(input = '', trimmed = true, separator = '\\n'): string[] {\n   return input.split(separator).reduce((output, line) => {\n      const lineContent = trimmed ? line.trim() : line;\n      if (lineContent) {\n         output.push(lineContent);\n      }\n      return output;\n   }, [] as string[]);\n}\n\ntype LineWithContentCallback<T = void> = (line: string) => T;\n\nexport function forEachLineWithContent<T>(\n   input: string,\n   callback: LineWithContentCallback<T>\n): T[] {\n   return toLinesWithContent(input, true).map((line) => callback(line));\n}\n\nexport function folderExists(path: string): boolean {\n   return exists(path, FOLDER);\n}\n\n/**\n * Adds `item` into the `target` `Array` or `Set` when it is not already present and returns the `item`.\n */\nexport function append<T>(target: T[] | Set<T>, item: T): typeof item {\n   if (Array.isArray(target)) {\n      if (!target.includes(item)) {\n         target.push(item);\n      }\n   } else {\n      target.add(item);\n   }\n   return item;\n}\n\n/**\n * Adds `item` into the `target` `Array` when it is not already present and returns the `target`.\n */\nexport function including<T>(target: T[], item: T): typeof target {\n   if (Array.isArray(target) && !target.includes(item)) {\n      target.push(item);\n   }\n\n   return target;\n}\n\nexport function remove<T>(target: Set<T> | T[], item: T): T {\n   if (Array.isArray(target)) {\n      const index = target.indexOf(item);\n      if (index >= 0) {\n         target.splice(index, 1);\n      }\n   } else {\n      target.delete(item);\n   }\n   return item;\n}\n\nexport const objectToString = Object.prototype.toString.call.bind(Object.prototype.toString) as (\n   input: any\n) => string;\n\nexport function asArray<T>(source: T | T[]): T[] {\n   return Array.isArray(source) ? source : [source];\n}\n\nexport function asStringArray<T>(source: T | T[]): string[] {\n   return asArray(source).map(String);\n}\n\nexport function asNumber(source: string | null | undefined, onNaN = 0) {\n   if (source == null) {\n      return onNaN;\n   }\n\n   const num = parseInt(source, 10);\n   return isNaN(num) ? onNaN : num;\n}\n\nexport function prefixedArray<T>(input: T[], prefix: T): T[] {\n   const output: T[] = [];\n   for (let i = 0, max = input.length; i < max; i++) {\n      output.push(prefix, input[i]);\n   }\n   return output;\n}\n\nexport function bufferToString(input: Buffer | Buffer[]): string {\n   return (Array.isArray(input) ? Buffer.concat(input) : input).toString('utf-8');\n}\n\n/**\n * Get a new object from a source object with only the listed properties.\n */\nexport function pick(source: Record<string, any>, properties: string[]) {\n   return Object.assign(\n      {},\n      ...properties.map((property) => (property in source ? { [property]: source[property] } : {}))\n   );\n}\n\nexport function delay(duration = 0): Promise<void> {\n   return new Promise((done) => setTimeout(done, duration));\n}\n", "import { Maybe, Options, Primitives } from '../types';\nimport { objectToString } from './util';\n\nexport interface ArgumentFilterPredicate<T> {\n   (input: any): input is T;\n}\n\nexport function filterType<T, K>(\n   input: K,\n   filter: ArgumentFilterPredicate<T>\n): K extends T ? T : undefined;\nexport function filterType<T, K>(input: K, filter: ArgumentFilterPredicate<T>, def: T): T;\nexport function filterType<T, K>(input: K, filter: ArgumentFilterPredicate<T>, def?: T): Maybe<T> {\n   if (filter(input)) {\n      return input;\n   }\n   return arguments.length > 2 ? def : undefined;\n}\n\nexport const filterArray: ArgumentFilterPredicate<Array<any>> = (input): input is Array<any> => {\n   return Array.isArray(input);\n};\n\nexport function filterPrimitives(\n   input: unknown,\n   omit?: Array<'boolean' | 'string' | 'number'>\n): input is Primitives {\n   return (\n      /number|string|boolean/.test(typeof input) &&\n      (!omit || !omit.includes(typeof input as 'boolean' | 'string' | 'number'))\n   );\n}\n\nexport const filterString: ArgumentFilterPredicate<string> = (input): input is string => {\n   return typeof input === 'string';\n};\n\nexport const filterStringArray: ArgumentFilterPredicate<string[]> = (input): input is string[] => {\n   return Array.isArray(input) && input.every(filterString);\n};\n\nexport const filterStringOrStringArray: ArgumentFilterPredicate<string | string[]> = (\n   input\n): input is string | string[] => {\n   return filterString(input) || (Array.isArray(input) && input.every(filterString));\n};\n\nexport function filterPlainObject<T extends Options>(input: T | unknown): input is T;\nexport function filterPlainObject<T extends Object>(input: T | unknown): input is T {\n   return !!input && objectToString(input) === '[object Object]';\n}\n\nexport function filterFunction(input: unknown): input is Function {\n   return typeof input === 'function';\n}\n\nexport const filterHasLength: ArgumentFilterPredicate<{ length: number }> = (\n   input\n): input is { length: number } => {\n   if (input == null || 'number|boolean|function'.includes(typeof input)) {\n      return false;\n   }\n   return Array.isArray(input) || typeof input === 'string' || typeof input.length === 'number';\n};\n", "/**\n * Known process exit codes used by the task parsers to determine whether an error\n * was one they can automatically handle\n */\nexport enum ExitCodes {\n   SUCCESS,\n   ERROR,\n   NOT_FOUND = -2,\n   UNCLEAN = 128,\n}\n", "import { TaskResponseFormat } from '../types';\n\nexport class GitOutputStreams<T extends TaskResponseFormat = Buffer> {\n   constructor(public readonly stdOut: T, public readonly stdErr: T) {}\n\n   asStrings(): GitOutputStreams<string> {\n      return new GitOutputStreams(this.stdOut.toString('utf8'), this.stdErr.toString('utf8'));\n   }\n}\n", "export class LineParser<T> {\n   protected matches: string[] = [];\n\n   private _regExp: RegExp[];\n\n   constructor(\n      regExp: RegExp | RegExp[],\n      useMatches?: (target: T, match: string[]) => boolean | void\n   ) {\n      this._regExp = Array.isArray(regExp) ? regExp : [regExp];\n      if (useMatches) {\n         this.useMatches = useMatches;\n      }\n   }\n\n   parse = (line: (offset: number) => string | undefined, target: T): boolean => {\n      this.resetMatches();\n\n      if (!this._regExp.every((reg, index) => this.addMatch(reg, index, line(index)))) {\n         return false;\n      }\n\n      return this.useMatches(target, this.prepareMatches()) !== false;\n   };\n\n   // @ts-ignore\n   protected useMatches(target: T, match: string[]): boolean | void {\n      throw new Error(`LineParser:useMatches not implemented`);\n   }\n\n   protected resetMatches() {\n      this.matches.length = 0;\n   }\n\n   protected prepareMatches() {\n      return this.matches;\n   }\n\n   protected addMatch(reg: RegExp, index: number, line?: string) {\n      const matched = line && reg.exec(line);\n      if (matched) {\n         this.pushMatch(index, matched);\n      }\n\n      return !!matched;\n   }\n\n   protected pushMatch(_index: number, matched: string[]) {\n      this.matches.push(...matched.slice(1));\n   }\n}\n\nexport class RemoteLineParser<T> extends LineParser<T> {\n   protected addMatch(reg: RegExp, index: number, line?: string): boolean {\n      return /^remote:\\s/.test(String(line)) && super.addMatch(reg, index, line);\n   }\n\n   protected pushMatch(index: number, matched: string[]) {\n      if (index > 0 || matched.length > 1) {\n         super.pushMatch(index, matched);\n      }\n   }\n}\n", "import { SimpleGitOptions } from '../types';\n\nconst defaultOptions: Omit<SimpleGitOptions, 'baseDir'> = {\n   binary: 'git',\n   maxConcurrentProcesses: 5,\n   config: [],\n   trimmed: false,\n};\n\nexport function createInstanceConfig(\n   ...options: Array<Partial<SimpleGitOptions> | undefined>\n): SimpleGitOptions {\n   const baseDir = process.cwd();\n   const config: SimpleGitOptions = Object.assign(\n      { baseDir, ...defaultOptions },\n      ...options.filter((o) => typeof o === 'object' && o)\n   );\n\n   config.baseDir = config.baseDir || baseDir;\n   config.trimmed = config.trimmed === true;\n\n   return config;\n}\n", "import {\n   filterArray,\n   filterFunction,\n   filterPlainObject,\n   filterPrimitives,\n   filterType,\n} from './argument-filters';\nimport { asFunction, isUserFunction, last } from './util';\nimport { Maybe, Options, OptionsValues } from '../types';\n\nexport function appendTaskOptions<T extends Options = Options>(\n   options: Maybe<T>,\n   commands: string[] = []\n): string[] {\n   if (!filterPlainObject<Options>(options)) {\n      return commands;\n   }\n\n   return Object.keys(options).reduce((commands: string[], key: string) => {\n      const value: OptionsValues = options[key];\n\n      if (filterPrimitives(value, ['boolean'])) {\n         commands.push(key + '=' + value);\n      } else {\n         commands.push(key);\n      }\n\n      return commands;\n   }, commands);\n}\n\nexport function getTrailingOptions(\n   args: IArguments,\n   initialPrimitive = 0,\n   objectOnly = false\n): string[] {\n   const command: string[] = [];\n\n   for (let i = 0, max = initialPrimitive < 0 ? args.length : initialPrimitive; i < max; i++) {\n      if ('string|number'.includes(typeof args[i])) {\n         command.push(String(args[i]));\n      }\n   }\n\n   appendTaskOptions(trailingOptionsArgument(args), command);\n   if (!objectOnly) {\n      command.push(...trailingArrayArgument(args));\n   }\n\n   return command;\n}\n\nfunction trailingArrayArgument(args: IArguments) {\n   const hasTrailingCallback = typeof last(args) === 'function';\n   return filterType(last(args, hasTrailingCallback ? 1 : 0), filterArray, []);\n}\n\n/**\n * Given any number of arguments, returns the trailing options argument, ignoring a trailing function argument\n * if there is one. When not found, the return value is null.\n */\nexport function trailingOptionsArgument(args: IArguments): Maybe<Options> {\n   const hasTrailingCallback = filterFunction(last(args));\n   return filterType(last(args, hasTrailingCallback ? 1 : 0), filterPlainObject);\n}\n\n/**\n * Returns either the source argument when it is a `Function`, or the default\n * `NOOP` function constant\n */\nexport function trailingFunctionArgument(\n   args: unknown[] | IArguments | unknown,\n   includeNoop = true\n): Maybe<(...args: any[]) => unknown> {\n   const callback = asFunction(last(args));\n   return includeNoop || isUserFunction(callback) ? callback : undefined;\n}\n", "import type { MaybeArray, TaskParser, TaskResponseFormat } from '../types';\nimport { GitOutputStreams } from './git-output-streams';\nimport { LineParser } from './line-parser';\nimport { asArray, toLinesWithContent } from './util';\n\nexport function callTaskParser<INPUT extends TaskResponseFormat, RESPONSE>(\n   parser: TaskParser<INPUT, RESPONSE>,\n   streams: GitOutputStreams<INPUT>\n) {\n   return parser(streams.stdOut, streams.stdErr);\n}\n\nexport function parseStringResponse<T>(\n   result: T,\n   parsers: LineParser<T>[],\n   texts: MaybeArray<string>,\n   trim = true\n): T {\n   asArray(texts).forEach((text) => {\n      for (let lines = toLinesWithContent(text, trim), i = 0, max = lines.length; i < max; i++) {\n         const line = (offset = 0) => {\n            if (i + offset >= max) {\n               return;\n            }\n            return lines[i + offset];\n         };\n\n         parsers.some(({ parse }) => parse(line, result));\n      }\n   });\n\n   return result;\n}\n", "export * from './argument-filters';\nexport * from './exit-codes';\nexport * from './git-output-streams';\nexport * from './line-parser';\nexport * from './simple-git-options';\nexport * from './task-options';\nexport * from './task-parser';\nexport * from './util';\n", "import { ExitCodes } from '../utils';\nimport { Maybe, StringTask } from '../types';\n\nexport enum CheckRepoActions {\n   BARE = 'bare',\n   IN_TREE = 'tree',\n   IS_REPO_ROOT = 'root',\n}\n\nconst onError: StringTask<boolean>['onError'] = ({ exitCode }, error, done, fail) => {\n   if (exitCode === ExitCodes.UNCLEAN && isNotRepoMessage(error)) {\n      return done(Buffer.from('false'));\n   }\n\n   fail(error);\n};\n\nconst parser: StringTask<boolean>['parser'] = (text) => {\n   return text.trim() === 'true';\n};\n\nexport function checkIsRepoTask(action: Maybe<CheckRepoActions>): StringTask<boolean> {\n   switch (action) {\n      case CheckRepoActions.BARE:\n         return checkIsBareRepoTask();\n      case CheckRepoActions.IS_REPO_ROOT:\n         return checkIsRepoRootTask();\n   }\n\n   const commands = ['rev-parse', '--is-inside-work-tree'];\n\n   return {\n      commands,\n      format: 'utf-8',\n      onError,\n      parser,\n   };\n}\n\nexport function checkIsRepoRootTask(): StringTask<boolean> {\n   const commands = ['rev-parse', '--git-dir'];\n\n   return {\n      commands,\n      format: 'utf-8',\n      onError,\n      parser(path) {\n         return /^\\.(git)?$/.test(path.trim());\n      },\n   };\n}\n\nexport function checkIsBareRepoTask(): StringTask<boolean> {\n   const commands = ['rev-parse', '--is-bare-repository'];\n\n   return {\n      commands,\n      format: 'utf-8',\n      onError,\n      parser,\n   };\n}\n\nfunction isNotRepoMessage(error: Error): boolean {\n   return /(Not a git repository|Kein Git-Repository)/i.test(String(error));\n}\n", "import { CleanSummary } from '../../../typings';\nimport { toLinesWithContent } from '../utils';\n\nexport class CleanResponse implements CleanSummary {\n   public paths: string[] = [];\n   public files: string[] = [];\n   public folders: string[] = [];\n\n   constructor(public readonly dryRun: boolean) {}\n}\n\nconst removalRegexp = /^[a-z]+\\s*/i;\nconst dryRunRemovalRegexp = /^[a-z]+\\s+[a-z]+\\s*/i;\nconst isFolderRegexp = /\\/$/;\n\nexport function cleanSummaryParser(dryRun: boolean, text: string): CleanSummary {\n   const summary = new CleanResponse(dryRun);\n   const regexp = dryRun ? dryRunRemovalRegexp : removalRegexp;\n\n   toLinesWithContent(text).forEach((line) => {\n      const removed = line.replace(regexp, '');\n\n      summary.paths.push(removed);\n      (isFolderRegexp.test(removed) ? summary.folders : summary.files).push(removed);\n   });\n\n   return summary;\n}\n", "import { TaskConfigurationError } from '../errors/task-configuration-error';\nimport type { BufferTask, EmptyTaskParser, SimpleGitTask, StringTask } from '../types';\n\nexport const EMPTY_COMMANDS: [] = [];\n\nexport type EmptyTask = {\n   commands: typeof EMPTY_COMMANDS;\n   format: 'empty';\n   parser: EmptyTaskParser;\n   onError?: undefined;\n};\n\nexport function adhocExecTask(parser: EmptyTaskParser): EmptyTask {\n   return {\n      commands: EMPTY_COMMANDS,\n      format: 'empty',\n      parser,\n   };\n}\n\nexport function configurationErrorTask(error: Error | string): EmptyTask {\n   return {\n      commands: EMPTY_COMMANDS,\n      format: 'empty',\n      parser() {\n         throw typeof error === 'string' ? new TaskConfigurationError(error) : error;\n      },\n   };\n}\n\nexport function straightThroughStringTask(commands: string[], trimmed = false): StringTask<string> {\n   return {\n      commands,\n      format: 'utf-8',\n      parser(text) {\n         return trimmed ? String(text).trim() : text;\n      },\n   };\n}\n\nexport function straightThroughBufferTask(commands: string[]): BufferTask<any> {\n   return {\n      commands,\n      format: 'buffer',\n      parser(buffer) {\n         return buffer;\n      },\n   };\n}\n\nexport function isBufferTask<R>(task: SimpleGitTask<R>): task is BufferTask<R> {\n   return task.format === 'buffer';\n}\n\nexport function isEmptyTask<R>(task: SimpleGitTask<R>): task is EmptyTask {\n   return task.format === 'empty' || !task.commands.length;\n}\n", "import { CleanSummary } from '../../../typings';\nimport { cleanSummaryParser } from '../responses/CleanSummary';\nimport { Maybe, StringTask } from '../types';\nimport { asStringArray } from '../utils';\nimport { configurationErrorTask } from './task';\n\nexport const CONFIG_ERROR_INTERACTIVE_MODE = 'Git clean interactive mode is not supported';\nexport const CONFIG_ERROR_MODE_REQUIRED = 'Git clean mode parameter (\"n\" or \"f\") is required';\nexport const CONFIG_ERROR_UNKNOWN_OPTION = 'Git clean unknown option found in: ';\n\n/**\n * All supported option switches available for use in a `git.clean` operation\n */\nexport enum CleanOptions {\n   DRY_RUN = 'n',\n   FORCE = 'f',\n   IGNORED_INCLUDED = 'x',\n   IGNORED_ONLY = 'X',\n   EXCLUDING = 'e',\n   QUIET = 'q',\n   RECURSIVE = 'd',\n}\n\n/**\n * The two modes `git.clean` can run in - one of these must be supplied in order\n * for the command to not throw a `TaskConfigurationError`\n */\nexport type CleanMode = CleanOptions.FORCE | CleanOptions.DRY_RUN;\n\nconst CleanOptionValues: Set<string> = new Set([\n   'i',\n   ...asStringArray(Object.values(CleanOptions as any)),\n]);\n\nexport function cleanWithOptionsTask(mode: CleanMode | string, customArgs: string[]) {\n   const { cleanMode, options, valid } = getCleanOptions(mode);\n\n   if (!cleanMode) {\n      return configurationErrorTask(CONFIG_ERROR_MODE_REQUIRED);\n   }\n\n   if (!valid.options) {\n      return configurationErrorTask(CONFIG_ERROR_UNKNOWN_OPTION + JSON.stringify(mode));\n   }\n\n   options.push(...customArgs);\n\n   if (options.some(isInteractiveMode)) {\n      return configurationErrorTask(CONFIG_ERROR_INTERACTIVE_MODE);\n   }\n\n   return cleanTask(cleanMode, options);\n}\n\nexport function cleanTask(mode: CleanMode, customArgs: string[]): StringTask<CleanSummary> {\n   const commands: string[] = ['clean', `-${mode}`, ...customArgs];\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser(text: string): CleanSummary {\n         return cleanSummaryParser(mode === CleanOptions.DRY_RUN, text);\n      },\n   };\n}\n\nexport function isCleanOptionsArray(input: string[]): input is CleanOptions[] {\n   return Array.isArray(input) && input.every((test) => CleanOptionValues.has(test));\n}\n\nfunction getCleanOptions(input: string) {\n   let cleanMode: Maybe<CleanMode>;\n   let options: string[] = [];\n   let valid = { cleanMode: false, options: true };\n\n   input\n      .replace(/[^a-z]i/g, '')\n      .split('')\n      .forEach((char) => {\n         if (isCleanMode(char)) {\n            cleanMode = char;\n            valid.cleanMode = true;\n         } else {\n            valid.options = valid.options && isKnownOption((options[options.length] = `-${char}`));\n         }\n      });\n\n   return {\n      cleanMode,\n      options,\n      valid,\n   };\n}\n\nfunction isCleanMode(cleanMode?: string): cleanMode is CleanMode {\n   return cleanMode === CleanOptions.FORCE || cleanMode === CleanOptions.DRY_RUN;\n}\n\nfunction isKnownOption(option: string): boolean {\n   return /^-[a-z]$/i.test(option) && CleanOptionValues.has(option.charAt(1));\n}\n\nfunction isInteractiveMode(option: string): boolean {\n   if (/^-[^\\-]/.test(option)) {\n      return option.indexOf('i') > 0;\n   }\n\n   return option === '--interactive';\n}\n", "import { ConfigGetResult, ConfigListSummary, ConfigValues } from '../../../typings';\nimport { last, splitOn } from '../utils';\n\nexport class ConfigList implements ConfigListSummary {\n   public files: string[] = [];\n   public values: { [fileName: string]: ConfigValues } = Object.create(null);\n\n   private _all: ConfigValues | undefined;\n\n   public get all(): ConfigValues {\n      if (!this._all) {\n         this._all = this.files.reduce((all: ConfigValues, file: string) => {\n            return Object.assign(all, this.values[file]);\n         }, {});\n      }\n\n      return this._all;\n   }\n\n   public addFile(file: string): ConfigValues {\n      if (!(file in this.values)) {\n         const latest = last(this.files);\n         this.values[file] = latest ? Object.create(this.values[latest]) : {};\n\n         this.files.push(file);\n      }\n\n      return this.values[file];\n   }\n\n   public addValue(file: string, key: string, value: string) {\n      const values = this.addFile(file);\n\n      if (!values.hasOwnProperty(key)) {\n         values[key] = value;\n      } else if (Array.isArray(values[key])) {\n         (values[key] as string[]).push(value);\n      } else {\n         values[key] = [values[key] as string, value];\n      }\n\n      this._all = undefined;\n   }\n}\n\nexport function configListParser(text: string): ConfigList {\n   const config = new ConfigList();\n\n   for (const item of configParser(text)) {\n      config.addValue(item.file, String(item.key), item.value);\n   }\n\n   return config;\n}\n\nexport function configGetParser(text: string, key: string): ConfigGetResult {\n   let value: string | null = null;\n   const values: string[] = [];\n   const scopes: Map<string, string[]> = new Map();\n\n   for (const item of configParser(text, key)) {\n      if (item.key !== key) {\n         continue;\n      }\n\n      values.push((value = item.value));\n\n      if (!scopes.has(item.file)) {\n         scopes.set(item.file, []);\n      }\n\n      scopes.get(item.file)!.push(value);\n   }\n\n   return {\n      key,\n      paths: Array.from(scopes.keys()),\n      scopes,\n      value,\n      values,\n   };\n}\n\nfunction configFilePath(filePath: string): string {\n   return filePath.replace(/^(file):/, '');\n}\n\nfunction* configParser(text: string, requestedKey: string | null = null) {\n   const lines = text.split('\\0');\n\n   for (let i = 0, max = lines.length - 1; i < max; ) {\n      const file = configFilePath(lines[i++]);\n\n      let value = lines[i++];\n      let key = requestedKey;\n\n      if (value.includes('\\n')) {\n         const line = splitOn(value, '\\n');\n         key = line[0];\n         value = line[1];\n      }\n\n      yield { file, key, value };\n   }\n}\n", "import type { ConfigGetResult, ConfigListSummary, SimpleGit } from '../../../typings';\nimport { configGetParser, configListParser } from '../responses/ConfigList';\nimport type { SimpleGitApi } from '../simple-git-api';\nimport type { StringTask } from '../types';\nimport { trailingFunctionArgument } from '../utils';\n\nexport enum GitConfigScope {\n   system = 'system',\n   global = 'global',\n   local = 'local',\n   worktree = 'worktree',\n}\n\nfunction asConfigScope<T extends GitConfigScope | undefined>(\n   scope: GitConfigScope | unknown,\n   fallback: T\n): GitConfigScope | T {\n   if (typeof scope === 'string' && GitConfigScope.hasOwnProperty(scope)) {\n      return scope as GitConfigScope;\n   }\n   return fallback;\n}\n\nfunction addConfigTask(\n   key: string,\n   value: string,\n   append: boolean,\n   scope: GitConfigScope\n): StringTask<string> {\n   const commands: string[] = ['config', `--${scope}`];\n\n   if (append) {\n      commands.push('--add');\n   }\n\n   commands.push(key, value);\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser(text: string): string {\n         return text;\n      },\n   };\n}\n\nfunction getConfigTask(key: string, scope?: GitConfigScope): StringTask<ConfigGetResult> {\n   const commands: string[] = ['config', '--null', '--show-origin', '--get-all', key];\n\n   if (scope) {\n      commands.splice(1, 0, `--${scope}`);\n   }\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser(text) {\n         return configGetParser(text, key);\n      },\n   };\n}\n\nfunction listConfigTask(scope?: GitConfigScope): StringTask<ConfigListSummary> {\n   const commands = ['config', '--list', '--show-origin', '--null'];\n\n   if (scope) {\n      commands.push(`--${scope}`);\n   }\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser(text: string) {\n         return configListParser(text);\n      },\n   };\n}\n\nexport default function (): Pick<SimpleGit, 'addConfig' | 'getConfig' | 'listConfig'> {\n   return {\n      addConfig(this: SimpleGitApi, key: string, value: string, ...rest: unknown[]) {\n         return this._runTask(\n            addConfigTask(\n               key,\n               value,\n               rest[0] === true,\n               asConfigScope(rest[1], GitConfigScope.local)\n            ),\n            trailingFunctionArgument(arguments)\n         );\n      },\n\n      getConfig(this: SimpleGitApi, key: string, scope?: GitConfigScope) {\n         return this._runTask(\n            getConfigTask(key, asConfigScope(scope, undefined)),\n            trailingFunctionArgument(arguments)\n         );\n      },\n\n      listConfig(this: SimpleGitApi, ...rest: unknown[]) {\n         return this._runTask(\n            listConfigTask(asConfigScope(rest[0], undefined)),\n            trailingFunctionArgument(arguments)\n         );\n      },\n   };\n}\n", "import { GrepResult, SimpleGit } from '../../../typings';\nimport { SimpleGitApi } from '../simple-git-api';\nimport {\n   asNumber,\n   forEachLineWithContent,\n   getTrailingOptions,\n   NULL,\n   prefixedArray,\n   trailingFunctionArgument,\n} from '../utils';\n\nimport { configurationErrorTask } from './task';\n\nconst disallowedOptions = ['-h'];\n\nconst Query = Symbol('grepQuery');\n\nexport interface GitGrepQuery extends Iterable<string> {\n   /** Adds one or more terms to be grouped as an \"and\" to any other terms */\n   and(...and: string[]): this;\n\n   /** Adds one or more search terms - git.grep will \"or\" this to other terms */\n   param(...param: string[]): this;\n}\n\nclass GrepQuery implements GitGrepQuery {\n   private [Query]: string[] = [];\n\n   *[Symbol.iterator]() {\n      for (const query of this[Query]) {\n         yield query;\n      }\n   }\n\n   and(...and: string[]) {\n      and.length && this[Query].push('--and', '(', ...prefixedArray(and, '-e'), ')');\n      return this;\n   }\n\n   param(...param: string[]) {\n      this[Query].push(...prefixedArray(param, '-e'));\n      return this;\n   }\n}\n\n/**\n * Creates a new builder for a `git.grep` query with optional params\n */\nexport function grepQueryBuilder(...params: string[]): GitGrepQuery {\n   return new GrepQuery().param(...params);\n}\n\nfunction parseGrep(grep: string): GrepResult {\n   const paths: GrepResult['paths'] = new Set<string>();\n   const results: GrepResult['results'] = {};\n\n   forEachLineWithContent(grep, (input) => {\n      const [path, line, preview] = input.split(NULL);\n      paths.add(path);\n      (results[path] = results[path] || []).push({\n         line: asNumber(line),\n         path,\n         preview,\n      });\n   });\n\n   return {\n      paths,\n      results,\n   };\n}\n\nexport default function (): Pick<SimpleGit, 'grep'> {\n   return {\n      grep(this: SimpleGitApi, searchTerm: string | GitGrepQuery) {\n         const then = trailingFunctionArgument(arguments);\n         const options = getTrailingOptions(arguments);\n\n         for (const option of disallowedOptions) {\n            if (options.includes(option)) {\n               return this._runTask(\n                  configurationErrorTask(`git.grep: use of \"${option}\" is not supported.`),\n                  then\n               );\n            }\n         }\n\n         if (typeof searchTerm === 'string') {\n            searchTerm = grepQueryBuilder().param(searchTerm);\n         }\n\n         const commands = ['grep', '--null', '-n', '--full-name', ...options, ...searchTerm];\n\n         return this._runTask(\n            {\n               commands,\n               format: 'utf-8',\n               parser(stdOut) {\n                  return parseGrep(stdOut);\n               },\n            },\n            then\n         );\n      },\n   };\n}\n", "import { straightThroughStringTask } from './task';\nimport { Maybe, OptionFlags, Options } from '../types';\n\nexport enum ResetMode {\n   MIXED = 'mixed',\n   SOFT = 'soft',\n   HARD = 'hard',\n   MERGE = 'merge',\n   KEEP = 'keep',\n}\n\nconst ResetModes = Array.from(Object.values(ResetMode));\n\nexport type ResetOptions = Options &\n   OptionFlags<'-q' | '--quiet' | '--no-quiet' | '--pathspec-from-nul'> &\n   OptionFlags<'--pathspec-from-file', string>;\n\nexport function resetTask(mode: Maybe<ResetMode>, customArgs: string[]) {\n   const commands: string[] = ['reset'];\n   if (isValidResetMode(mode)) {\n      commands.push(`--${mode}`);\n   }\n   commands.push(...customArgs);\n\n   return straightThroughStringTask(commands);\n}\n\nexport function getResetMode(mode: ResetMode | any): Maybe<ResetMode> {\n   if (isValidResetMode(mode)) {\n      return mode;\n   }\n\n   switch (typeof mode) {\n      case 'string':\n      case 'undefined':\n         return ResetMode.SOFT;\n   }\n\n   return;\n}\n\nfunction isValidResetMode(mode: ResetMode | any): mode is ResetMode {\n   return ResetModes.includes(mode);\n}\n", "import debug, { Debugger } from 'debug';\nimport {\n   append,\n   filterHasLength,\n   filterString,\n   filterType,\n   NOOP,\n   objectToString,\n   remove,\n} from './utils';\nimport { Maybe } from './types';\n\ndebug.formatters.L = (value: any) => String(filterHasLength(value) ? value.length : '-');\ndebug.formatters.B = (value: Buffer) => {\n   if (Buffer.isBuffer(value)) {\n      return value.toString('utf8');\n   }\n   return objectToString(value);\n};\n\ntype OutputLoggingHandler = (message: string, ...args: any[]) => void;\n\nfunction createLog() {\n   return debug('simple-git');\n}\n\nexport interface OutputLogger extends OutputLoggingHandler {\n   readonly label: string;\n\n   info: OutputLoggingHandler;\n   step(nextStep?: string): OutputLogger;\n   sibling(name: string): OutputLogger;\n}\n\nfunction prefixedLogger(\n   to: Debugger,\n   prefix: string,\n   forward?: OutputLoggingHandler\n): OutputLoggingHandler {\n   if (!prefix || !String(prefix).replace(/\\s*/, '')) {\n      return !forward\n         ? to\n         : (message, ...args) => {\n              to(message, ...args);\n              forward(message, ...args);\n           };\n   }\n\n   return (message, ...args) => {\n      to(`%s ${message}`, prefix, ...args);\n      if (forward) {\n         forward(message, ...args);\n      }\n   };\n}\n\nfunction childLoggerName(\n   name: Maybe<string>,\n   childDebugger: Maybe<Debugger>,\n   { namespace: parentNamespace }: Debugger\n): string {\n   if (typeof name === 'string') {\n      return name;\n   }\n   const childNamespace = (childDebugger && childDebugger.namespace) || '';\n\n   if (childNamespace.startsWith(parentNamespace)) {\n      return childNamespace.substr(parentNamespace.length + 1);\n   }\n\n   return childNamespace || parentNamespace;\n}\n\nexport function createLogger(\n   label: string,\n   verbose?: string | Debugger,\n   initialStep?: string,\n   infoDebugger = createLog()\n): OutputLogger {\n   const labelPrefix = (label && `[${label}]`) || '';\n\n   const spawned: OutputLogger[] = [];\n   const debugDebugger: Maybe<Debugger> =\n      typeof verbose === 'string' ? infoDebugger.extend(verbose) : verbose;\n   const key = childLoggerName(filterType(verbose, filterString), debugDebugger, infoDebugger);\n\n   return step(initialStep);\n\n   function sibling(name: string, initial?: string) {\n      return append(\n         spawned,\n         createLogger(label, key.replace(/^[^:]+/, name), initial, infoDebugger)\n      );\n   }\n\n   function step(phase?: string) {\n      const stepPrefix = (phase && `[${phase}]`) || '';\n      const debug = (debugDebugger && prefixedLogger(debugDebugger, stepPrefix)) || NOOP;\n      const info = prefixedLogger(infoDebugger, `${labelPrefix} ${stepPrefix}`, debug);\n\n      return Object.assign(debugDebugger ? debug : info, {\n         label,\n         sibling,\n         info,\n         step,\n      });\n   }\n}\n\n/**\n * The `GitLogger` is used by the main `SimpleGit` runner to handle logging\n * any warnings or errors.\n */\nexport class GitLogger {\n   public error: OutputLoggingHandler;\n\n   public warn: OutputLoggingHandler;\n\n   constructor(private _out: Debugger = createLog()) {\n      this.error = prefixedLogger(_out, '[ERROR]');\n      this.warn = prefixedLogger(_out, '[WARN]');\n   }\n\n   silent(silence = false) {\n      if (silence !== this._out.enabled) {\n         return;\n      }\n\n      const { namespace } = this._out;\n      const env = (process.env.DEBUG || '').split(',').filter((s) => !!s);\n      const hasOn = env.includes(namespace);\n      const hasOff = env.includes(`-${namespace}`);\n\n      // enabling the log\n      if (!silence) {\n         if (hasOff) {\n            remove(env, `-${namespace}`);\n         } else {\n            env.push(namespace);\n         }\n      } else {\n         if (hasOn) {\n            remove(env, namespace);\n         } else {\n            env.push(`-${namespace}`);\n         }\n      }\n\n      debug.enable(env.join(','));\n   }\n}\n", "import { SimpleGitTask } from '../types';\nimport { GitError } from '../errors/git-error';\nimport { createLogger, OutputLogger } from '../git-logger';\n\ntype AnySimpleGitTask = SimpleGitTask<any>;\n\ntype TaskInProgress = {\n   name: string;\n   logger: OutputLogger;\n   task: AnySimpleGitTask;\n};\n\nexport class TasksPendingQueue {\n   private _queue: Map<AnySimpleGitTask, TaskInProgress> = new Map();\n\n   constructor(private logLabel = 'GitExecutor') {}\n\n   private withProgress(task: AnySimpleGitTask) {\n      return this._queue.get(task);\n   }\n\n   private createProgress(task: AnySimpleGitTask): TaskInProgress {\n      const name = TasksPendingQueue.getName(task.commands[0]);\n      const logger = createLogger(this.logLabel, name);\n\n      return {\n         task,\n         logger,\n         name,\n      };\n   }\n\n   push(task: AnySimpleGitTask): TaskInProgress {\n      const progress = this.createProgress(task);\n      progress.logger('Adding task to the queue, commands = %o', task.commands);\n\n      this._queue.set(task, progress);\n\n      return progress;\n   }\n\n   fatal(err: GitError) {\n      for (const [task, { logger }] of Array.from(this._queue.entries())) {\n         if (task === err.task) {\n            logger.info(`Failed %o`, err);\n            logger(\n               `Fatal exception, any as-yet un-started tasks run through this executor will not be attempted`\n            );\n         } else {\n            logger.info(\n               `A fatal exception occurred in a previous task, the queue has been purged: %o`,\n               err.message\n            );\n         }\n\n         this.complete(task);\n      }\n\n      if (this._queue.size !== 0) {\n         throw new Error(`Queue size should be zero after fatal: ${this._queue.size}`);\n      }\n   }\n\n   complete(task: AnySimpleGitTask) {\n      const progress = this.withProgress(task);\n      if (progress) {\n         this._queue.delete(task);\n      }\n   }\n\n   attempt(task: AnySimpleGitTask): TaskInProgress {\n      const progress = this.withProgress(task);\n      if (!progress) {\n         throw new GitError(undefined, 'TasksPendingQueue: attempt called for an unknown task');\n      }\n      progress.logger('Starting task');\n\n      return progress;\n   }\n\n   static getName(name = 'empty') {\n      return `task:${name}:${++TasksPendingQueue.counter}`;\n   }\n\n   private static counter = 0;\n}\n", "import { spawn, SpawnOptions } from 'child_process';\nimport { GitError } from '../errors/git-error';\nimport { OutputLogger } from '../git-logger';\nimport { PluginStore } from '../plugins';\nimport { EmptyTask, isBufferTask, isEmptyTask } from '../tasks/task';\nimport {\n   GitExecutorResult,\n   Maybe,\n   outputHandler,\n   RunnableTask,\n   SimpleGitExecutor,\n   SimpleGitTask,\n} from '../types';\nimport { callTaskParser, first, GitOutputStreams, objectToString } from '../utils';\nimport { Scheduler } from './scheduler';\nimport { TasksPendingQueue } from './tasks-pending-queue';\n\nexport class GitExecutorChain implements SimpleGitExecutor {\n   private _chain: Promise<any> = Promise.resolve();\n   private _queue = new TasksPendingQueue();\n   private _cwd: string | undefined;\n\n   public get binary() {\n      return this._executor.binary;\n   }\n\n   public get cwd() {\n      return this._cwd || this._executor.cwd;\n   }\n\n   public set cwd(cwd: string) {\n      this._cwd = cwd;\n   }\n\n   public get env() {\n      return this._executor.env;\n   }\n\n   public get outputHandler() {\n      return this._executor.outputHandler;\n   }\n\n   constructor(\n      private _executor: SimpleGitExecutor,\n      private _scheduler: Scheduler,\n      private _plugins: PluginStore\n   ) {}\n\n   public chain() {\n      return this;\n   }\n\n   public push<R>(task: SimpleGitTask<R>): Promise<R> {\n      this._queue.push(task);\n\n      return (this._chain = this._chain.then(() => this.attemptTask(task)));\n   }\n\n   private async attemptTask<R>(task: SimpleGitTask<R>): Promise<void | R> {\n      const onScheduleComplete = await this._scheduler.next();\n      const onQueueComplete = () => this._queue.complete(task);\n\n      try {\n         const { logger } = this._queue.attempt(task);\n         return (await (isEmptyTask(task)\n            ? this.attemptEmptyTask(task, logger)\n            : this.attemptRemoteTask(task, logger))) as R;\n      } catch (e) {\n         throw this.onFatalException(task, e as Error);\n      } finally {\n         onQueueComplete();\n         onScheduleComplete();\n      }\n   }\n\n   private onFatalException<R>(task: SimpleGitTask<R>, e: Error) {\n      const gitError =\n         e instanceof GitError ? Object.assign(e, { task }) : new GitError(task, e && String(e));\n\n      this._chain = Promise.resolve();\n      this._queue.fatal(gitError);\n\n      return gitError;\n   }\n\n   private async attemptRemoteTask<R>(task: RunnableTask<R>, logger: OutputLogger) {\n      const args = this._plugins.exec(\n         'spawn.args',\n         [...task.commands],\n         pluginContext(task, task.commands)\n      );\n\n      const raw = await this.gitResponse(\n         task,\n         this.binary,\n         args,\n         this.outputHandler,\n         logger.step('SPAWN')\n      );\n      const outputStreams = await this.handleTaskData(task, args, raw, logger.step('HANDLE'));\n\n      logger(`passing response to task's parser as a %s`, task.format);\n\n      if (isBufferTask(task)) {\n         return callTaskParser(task.parser, outputStreams);\n      }\n\n      return callTaskParser(task.parser, outputStreams.asStrings());\n   }\n\n   private async attemptEmptyTask(task: EmptyTask, logger: OutputLogger) {\n      logger(`empty task bypassing child process to call to task's parser`);\n      return task.parser(this);\n   }\n\n   private handleTaskData<R>(\n      task: SimpleGitTask<R>,\n      args: string[],\n      result: GitExecutorResult,\n      logger: OutputLogger\n   ): Promise<GitOutputStreams> {\n      const { exitCode, rejection, stdOut, stdErr } = result;\n\n      return new Promise((done, fail) => {\n         logger(`Preparing to handle process response exitCode=%d stdOut=`, exitCode);\n\n         const { error } = this._plugins.exec(\n            'task.error',\n            { error: rejection },\n            {\n               ...pluginContext(task, args),\n               ...result,\n            }\n         );\n\n         if (error && task.onError) {\n            logger.info(`exitCode=%s handling with custom error handler`);\n\n            return task.onError(\n               result,\n               error,\n               (newStdOut) => {\n                  logger.info(`custom error handler treated as success`);\n                  logger(`custom error returned a %s`, objectToString(newStdOut));\n\n                  done(\n                     new GitOutputStreams(\n                        Array.isArray(newStdOut) ? Buffer.concat(newStdOut) : newStdOut,\n                        Buffer.concat(stdErr)\n                     )\n                  );\n               },\n               fail\n            );\n         }\n\n         if (error) {\n            logger.info(\n               `handling as error: exitCode=%s stdErr=%s rejection=%o`,\n               exitCode,\n               stdErr.length,\n               rejection\n            );\n            return fail(error);\n         }\n\n         logger.info(`retrieving task output complete`);\n         done(new GitOutputStreams(Buffer.concat(stdOut), Buffer.concat(stdErr)));\n      });\n   }\n\n   private async gitResponse<R>(\n      task: SimpleGitTask<R>,\n      command: string,\n      args: string[],\n      outputHandler: Maybe<outputHandler>,\n      logger: OutputLogger\n   ): Promise<GitExecutorResult> {\n      const outputLogger = logger.sibling('output');\n      const spawnOptions: SpawnOptions = this._plugins.exec(\n         'spawn.options',\n         {\n            cwd: this.cwd,\n            env: this.env,\n            windowsHide: true,\n         },\n         pluginContext(task, task.commands)\n      );\n\n      return new Promise((done) => {\n         const stdOut: Buffer[] = [];\n         const stdErr: Buffer[] = [];\n\n         logger.info(`%s %o`, command, args);\n         logger('%O', spawnOptions);\n\n         let rejection = this._beforeSpawn(task, args);\n         if (rejection) {\n            return done({\n               stdOut,\n               stdErr,\n               exitCode: 9901,\n               rejection,\n            });\n         }\n\n         this._plugins.exec('spawn.before', undefined, {\n            ...pluginContext(task, args),\n            kill(reason) {\n               rejection = reason || rejection;\n            },\n         });\n\n         const spawned = spawn(command, args, spawnOptions);\n\n         spawned.stdout!.on(\n            'data',\n            onDataReceived(stdOut, 'stdOut', logger, outputLogger.step('stdOut'))\n         );\n         spawned.stderr!.on(\n            'data',\n            onDataReceived(stdErr, 'stdErr', logger, outputLogger.step('stdErr'))\n         );\n\n         spawned.on('error', onErrorReceived(stdErr, logger));\n\n         if (outputHandler) {\n            logger(`Passing child process stdOut/stdErr to custom outputHandler`);\n            outputHandler(command, spawned.stdout!, spawned.stderr!, [...args]);\n         }\n\n         this._plugins.exec('spawn.after', undefined, {\n            ...pluginContext(task, args),\n            spawned,\n            close(exitCode: number, reason?: Error) {\n               done({\n                  stdOut,\n                  stdErr,\n                  exitCode,\n                  rejection: rejection || reason,\n               });\n            },\n            kill(reason: Error) {\n               if (spawned.killed) {\n                  return;\n               }\n\n               rejection = reason;\n               spawned.kill('SIGINT');\n            },\n         });\n      });\n   }\n\n   private _beforeSpawn<R>(task: SimpleGitTask<R>, args: string[]) {\n      let rejection: Maybe<Error>;\n      this._plugins.exec('spawn.before', undefined, {\n         ...pluginContext(task, args),\n         kill(reason) {\n            rejection = reason || rejection;\n         },\n      });\n\n      return rejection;\n   }\n}\n\nfunction pluginContext<R>(task: SimpleGitTask<R>, commands: string[]) {\n   return {\n      method: first(task.commands) || '',\n      commands,\n   };\n}\n\nfunction onErrorReceived(target: Buffer[], logger: OutputLogger) {\n   return (err: Error) => {\n      logger(`[ERROR] child process exception %o`, err);\n      target.push(Buffer.from(String(err.stack), 'ascii'));\n   };\n}\n\nfunction onDataReceived(\n   target: Buffer[],\n   name: string,\n   logger: OutputLogger,\n   output: OutputLogger\n) {\n   return (buffer: Buffer) => {\n      logger(`%s received %L bytes`, name, buffer);\n      output(`%B`, buffer);\n      target.push(buffer);\n   };\n}\n", "import type { PluginStore } from '../plugins';\nimport type { GitExecutorEnv, outputHandler, SimpleGitExecutor, SimpleGitTask } from '../types';\n\nimport { GitExecutorChain } from './git-executor-chain';\nimport { Scheduler } from './scheduler';\n\nexport class GitExecutor implements SimpleGitExecutor {\n   private _chain = new GitExecutorChain(this, this._scheduler, this._plugins);\n\n   public env: GitExecutorEnv;\n   public outputHandler?: outputHandler;\n\n   constructor(\n      public binary: string = 'git',\n      public cwd: string,\n      private _scheduler: Scheduler,\n      private _plugins: PluginStore\n   ) {}\n\n   chain(): SimpleGitExecutor {\n      return new GitExecutorChain(this, this._scheduler, this._plugins);\n   }\n\n   push<R>(task: SimpleGitTask<R>): Promise<R> {\n      return this._chain.push(task);\n   }\n}\n", "import { GitError } from './errors/git-error';\nimport { GitResponseError } from './errors/git-response-error';\nimport { SimpleGitTask, SimpleGitTaskCallback } from './types';\nimport { NOOP } from './utils';\n\nexport function taskCallback<R>(\n   task: SimpleGitTask<R>,\n   response: Promise<R>,\n   callback: SimpleGitTaskCallback<R> = NOOP\n) {\n   const onSuccess = (data: R) => {\n      callback(null, data);\n   };\n\n   const onError = (err: GitError | GitResponseError) => {\n      if (err?.task === task) {\n         callback(\n            err instanceof GitResponseError ? addDeprecationNoticeToError(err) : err,\n            undefined as any\n         );\n      }\n   };\n\n   response.then(onSuccess, onError);\n}\n\nfunction addDeprecationNoticeToError(err: GitResponseError) {\n   let log = (name: string) => {\n      console.warn(\n         `simple-git deprecation notice: accessing GitResponseError.${name} should be GitResponseError.git.${name}, this will no longer be available in version 3`\n      );\n      log = NOOP;\n   };\n\n   return Object.create(err, Object.getOwnPropertyNames(err.git).reduce(descriptorReducer, {}));\n\n   function descriptorReducer(all: PropertyDescriptorMap, name: string): typeof all {\n      if (name in err) {\n         return all;\n      }\n\n      all[name] = {\n         enumerable: false,\n         configurable: false,\n         get() {\n            log(name);\n            return err.git[name];\n         },\n      };\n\n      return all;\n   }\n}\n", "import { folderExists } from '../utils';\nimport { SimpleGitExecutor } from '../types';\nimport { adhocExecTask } from './task';\n\nexport function changeWorkingDirectoryTask(directory: string, root?: SimpleGitExecutor) {\n   return adhocExecTask((instance: SimpleGitExecutor) => {\n      if (!folderExists(directory)) {\n         throw new Error(`Git.cwd: cannot change to non-directory \"${directory}\"`);\n      }\n\n      return ((root || instance).cwd = directory);\n   });\n}\n", "import type { SimpleGit } from '../../../typings';\nimport type { SimpleGitApi } from '../simple-git-api';\nimport { getTrailingOptions, remove, trailingFunctionArgument } from '../utils';\nimport { straightThroughStringTask } from './task';\n\nfunction checkoutTask(args: string[]) {\n   const commands = ['checkout', ...args];\n   if (commands[1] === '-b' && commands.includes('-B')) {\n      commands[1] = remove(commands, '-B');\n   }\n\n   return straightThroughStringTask(commands);\n}\n\nexport default function (): Pick<SimpleGit, 'checkout' | 'checkoutBranch' | 'checkoutLocalBranch'> {\n   return {\n      checkout(this: SimpleGitApi) {\n         return this._runTask(\n            checkoutTask(getTrailingOptions(arguments, 1)),\n            trailingFunctionArgument(arguments)\n         );\n      },\n\n      checkoutBranch(this: SimpleGitApi, branchName, startPoint) {\n         return this._runTask(\n            checkoutTask(['-b', branchName, startPoint, ...getTrailingOptions(arguments)]),\n            trailingFunctionArgument(arguments)\n         );\n      },\n\n      checkoutLocalBranch(this: SimpleGitApi, branchName) {\n         return this._runTask(\n            checkoutTask(['-b', branchName, ...getTrailingOptions(arguments)]),\n            trailingFunctionArgument(arguments)\n         );\n      },\n   };\n}\n", "import { CommitResult } from '../../../typings';\nimport { LineParser, parseStringResponse } from '../utils';\n\nconst parsers: LineParser<CommitResult>[] = [\n   new LineParser(/^\\[([^\\s]+)( \\([^)]+\\))? ([^\\]]+)/, (result, [branch, root, commit]) => {\n      result.branch = branch;\n      result.commit = commit;\n      result.root = !!root;\n   }),\n   new LineParser(/\\s*Author:\\s(.+)/i, (result, [author]) => {\n      const parts = author.split('<');\n      const email = parts.pop();\n\n      if (!email || !email.includes('@')) {\n         return;\n      }\n\n      result.author = {\n         email: email.substr(0, email.length - 1),\n         name: parts.join('<').trim(),\n      };\n   }),\n   new LineParser(\n      /(\\d+)[^,]*(?:,\\s*(\\d+)[^,]*)(?:,\\s*(\\d+))/g,\n      (result, [changes, insertions, deletions]) => {\n         result.summary.changes = parseInt(changes, 10) || 0;\n         result.summary.insertions = parseInt(insertions, 10) || 0;\n         result.summary.deletions = parseInt(deletions, 10) || 0;\n      }\n   ),\n   new LineParser(\n      /^(\\d+)[^,]*(?:,\\s*(\\d+)[^(]+\\(([+-]))?/,\n      (result, [changes, lines, direction]) => {\n         result.summary.changes = parseInt(changes, 10) || 0;\n         const count = parseInt(lines, 10) || 0;\n         if (direction === '-') {\n            result.summary.deletions = count;\n         } else if (direction === '+') {\n            result.summary.insertions = count;\n         }\n      }\n   ),\n];\n\nexport function parseCommitResult(stdOut: string): CommitResult {\n   const result: CommitResult = {\n      author: null,\n      branch: '',\n      commit: '',\n      root: false,\n      summary: {\n         changes: 0,\n         insertions: 0,\n         deletions: 0,\n      },\n   };\n   return parseStringResponse(result, parsers, stdOut);\n}\n", "import type { CommitResult, SimpleGit } from '../../../typings';\nimport type { SimpleGitApi } from '../simple-git-api';\nimport type { StringTask } from '../types';\nimport { parseCommitResult } from '../parsers/parse-commit';\nimport {\n   asArray,\n   filterArray,\n   filterStringOrStringArray,\n   filterType,\n   getTrailingOptions,\n   prefixedArray,\n   trailingFunctionArgument,\n} from '../utils';\nimport { configurationErrorTask } from './task';\n\nexport function commitTask(\n   message: string[],\n   files: string[],\n   customArgs: string[]\n): StringTask<CommitResult> {\n   const commands: string[] = [\n      '-c',\n      'core.abbrev=40',\n      'commit',\n      ...prefixedArray(message, '-m'),\n      ...files,\n      ...customArgs,\n   ];\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser: parseCommitResult,\n   };\n}\n\nexport default function (): Pick<SimpleGit, 'commit'> {\n   return {\n      commit(this: SimpleGitApi, message: string | string[], ...rest: unknown[]) {\n         const next = trailingFunctionArgument(arguments);\n         const task =\n            rejectDeprecatedSignatures(message) ||\n            commitTask(\n               asArray(message),\n               asArray(filterType(rest[0], filterStringOrStringArray, [])),\n               [...filterType(rest[1], filterArray, []), ...getTrailingOptions(arguments, 0, true)]\n            );\n\n         return this._runTask(task, next);\n      },\n   };\n\n   function rejectDeprecatedSignatures(message?: unknown) {\n      return (\n         !filterStringOrStringArray(message) &&\n         configurationErrorTask(\n            `git.commit: requires the commit message to be supplied as a string/string[]`\n         )\n      );\n   }\n}\n", "import { straightThroughStringTask } from './task';\nimport { StringTask } from '../types';\n\n/**\n * Task used by `git.hashObject`\n */\nexport function hashObjectTask(filePath: string, write: boolean): StringTask<string> {\n   const commands = ['hash-object', filePath];\n   if (write) {\n      commands.push('-w');\n   }\n\n   return straightThroughStringTask(commands, true);\n}\n", "import { InitResult } from '../../../typings';\n\nexport class InitSummary implements InitResult {\n   constructor(\n      public readonly bare: boolean,\n      public readonly path: string,\n      public readonly existing: boolean,\n      public readonly gitDir: string\n   ) {}\n}\n\nconst initResponseRegex = /^Init.+ repository in (.+)$/;\nconst reInitResponseRegex = /^Rein.+ in (.+)$/;\n\nexport function parseInit(bare: boolean, path: string, text: string) {\n   const response = String(text).trim();\n   let result;\n\n   if ((result = initResponseRegex.exec(response))) {\n      return new InitSummary(bare, path, false, result[1]);\n   }\n\n   if ((result = reInitResponseRegex.exec(response))) {\n      return new InitSummary(bare, path, true, result[1]);\n   }\n\n   let gitDir = '';\n   const tokens = response.split(' ');\n   while (tokens.length) {\n      const token = tokens.shift();\n      if (token === 'in') {\n         gitDir = tokens.join(' ');\n         break;\n      }\n   }\n\n   return new InitSummary(bare, path, /^re/i.test(response), gitDir);\n}\n", "import { InitResult } from '../../../typings';\nimport { parseInit } from '../responses/InitSummary';\nimport { StringTask } from '../types';\n\nconst bareCommand = '--bare';\n\nfunction hasBareCommand(command: string[]) {\n   return command.includes(bareCommand);\n}\n\nexport function initTask(bare = false, path: string, customArgs: string[]): StringTask<InitResult> {\n   const commands = ['init', ...customArgs];\n   if (bare && !hasBareCommand(commands)) {\n      commands.splice(1, 0, bareCommand);\n   }\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser(text: string): InitResult {\n         return parseInit(commands.includes('--bare'), path, text);\n      },\n   };\n}\n", "export enum LogFormat {\n   NONE = '',\n   STAT = '--stat',\n   NUM_STAT = '--numstat',\n   NAME_ONLY = '--name-only',\n   NAME_STATUS = '--name-status',\n}\n\nconst logFormatRegex = /^--(stat|numstat|name-only|name-status)(=|$)/;\n\nexport function logFormatFromCommand(customArgs: string[]) {\n   for (let i = 0; i < customArgs.length; i++) {\n      const format = logFormatRegex.exec(customArgs[i]);\n      if (format) {\n         return `--${format[1]}` as LogFormat;\n      }\n   }\n\n   return LogFormat.NONE;\n}\n\nexport function isLogFormat(customArg: string | unknown) {\n   return logFormatRegex.test(customArg as string);\n}\n", "import { DiffResult, DiffResultBinaryFile, DiffResultTextFile } from '../../../typings';\n\n/***\n * The DiffSummary is returned as a response to getting `git().status()`\n */\nexport class DiffSummary implements DiffResult {\n   changed = 0;\n   deletions = 0;\n   insertions = 0;\n\n   files: Array<DiffResultTextFile | DiffResultBinaryFile> = [];\n}\n", "import { DiffResult } from '../../../typings';\nimport { LogFormat } from '../args/log-format';\nimport { DiffSummary } from '../responses/DiffSummary';\nimport { asNumber, LineParser, parseStringResponse } from '../utils';\n\nconst statParser = [\n   new LineParser<DiffResult>(\n      /(.+)\\s+\\|\\s+(\\d+)(\\s+[+\\-]+)?$/,\n      (result, [file, changes, alterations = '']) => {\n         result.files.push({\n            file: file.trim(),\n            changes: asNumber(changes),\n            insertions: alterations.replace(/[^+]/g, '').length,\n            deletions: alterations.replace(/[^-]/g, '').length,\n            binary: false,\n         });\n      }\n   ),\n   new LineParser<DiffResult>(\n      /(.+) \\|\\s+Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)/,\n      (result, [file, before, after]) => {\n         result.files.push({\n            file: file.trim(),\n            before: asNumber(before),\n            after: asNumber(after),\n            binary: true,\n         });\n      }\n   ),\n   new LineParser<DiffResult>(\n      /(\\d+) files? changed\\s*((?:, \\d+ [^,]+){0,2})/,\n      (result, [changed, summary]) => {\n         const inserted = /(\\d+) i/.exec(summary);\n         const deleted = /(\\d+) d/.exec(summary);\n\n         result.changed = asNumber(changed);\n         result.insertions = asNumber(inserted?.[1]);\n         result.deletions = asNumber(deleted?.[1]);\n      }\n   ),\n];\n\nconst numStatParser = [\n   new LineParser<DiffResult>(\n      /(\\d+)\\t(\\d+)\\t(.+)$/,\n      (result, [changesInsert, changesDelete, file]) => {\n         const insertions = asNumber(changesInsert);\n         const deletions = asNumber(changesDelete);\n\n         result.changed++;\n         result.insertions += insertions;\n         result.deletions += deletions;\n\n         result.files.push({\n            file,\n            changes: insertions + deletions,\n            insertions,\n            deletions,\n            binary: false,\n         });\n      }\n   ),\n   new LineParser<DiffResult>(/-\\t-\\t(.+)$/, (result, [file]) => {\n      result.changed++;\n\n      result.files.push({\n         file,\n         after: 0,\n         before: 0,\n         binary: true,\n      });\n   }),\n];\n\nconst nameOnlyParser = [\n   new LineParser<DiffResult>(/(.+)$/, (result, [file]) => {\n      result.changed++;\n      result.files.push({\n         file,\n         changes: 0,\n         insertions: 0,\n         deletions: 0,\n         binary: false,\n      });\n   }),\n];\n\nconst nameStatusParser = [\n   new LineParser<DiffResult>(/([ACDMRTUXB])\\s*(.+)$/, (result, [_status, file]) => {\n      result.changed++;\n      result.files.push({\n         file,\n         changes: 0,\n         insertions: 0,\n         deletions: 0,\n         binary: false,\n      });\n   }),\n];\n\nconst diffSummaryParsers: Record<LogFormat, LineParser<DiffResult>[]> = {\n   [LogFormat.NONE]: statParser,\n   [LogFormat.STAT]: statParser,\n   [LogFormat.NUM_STAT]: numStatParser,\n   [LogFormat.NAME_STATUS]: nameStatusParser,\n   [LogFormat.NAME_ONLY]: nameOnlyParser,\n};\n\nexport function getDiffParser(format = LogFormat.NONE) {\n   const parser = diffSummaryParsers[format];\n\n   return (stdOut: string) => parseStringResponse(new DiffSummary(), parser, stdOut, false);\n}\n", "import { ListLogLine, LogResult } from '../../../typings';\nimport { toLinesWithContent } from '../utils';\nimport { getDiffParser } from './parse-diff-summary';\nimport { LogFormat } from '../args/log-format';\n\nexport const START_BOUNDARY = '\u00F2\u00F2\u00F2\u00F2\u00F2\u00F2 ';\n\nexport const COMMIT_BOUNDARY = ' \u00F2\u00F2';\n\nexport const SPLITTER = ' \u00F2 ';\n\nconst defaultFieldNames = ['hash', 'date', 'message', 'refs', 'author_name', 'author_email'];\n\nfunction lineBuilder(tokens: string[], fields: string[]): any {\n   return fields.reduce((line, field, index) => {\n      line[field] = tokens[index] || '';\n      return line;\n   }, Object.create({ diff: null }) as any);\n}\n\nexport function createListLogSummaryParser<T = any>(\n   splitter = SPLITTER,\n   fields = defaultFieldNames,\n   logFormat = LogFormat.NONE\n) {\n   const parseDiffResult = getDiffParser(logFormat);\n\n   return function (stdOut: string): LogResult<T> {\n      const all: ReadonlyArray<T & ListLogLine> = toLinesWithContent(\n         stdOut,\n         true,\n         START_BOUNDARY\n      ).map(function (item) {\n         const lineDetail = item.trim().split(COMMIT_BOUNDARY);\n         const listLogLine: T & ListLogLine = lineBuilder(\n            lineDetail[0].trim().split(splitter),\n            fields\n         );\n\n         if (lineDetail.length > 1 && !!lineDetail[1].trim()) {\n            listLogLine.diff = parseDiffResult(lineDetail[1]);\n         }\n\n         return listLogLine;\n      });\n\n      return {\n         all,\n         latest: (all.length && all[0]) || null,\n         total: all.length,\n      };\n   };\n}\n", "import { StringTask } from '../types';\nimport { DiffResult } from '../../../typings';\nimport { isLogFormat, LogFormat, logFormatFromCommand } from '../args/log-format';\nimport { getDiffParser } from '../parsers/parse-diff-summary';\nimport { configurationErrorTask, EmptyTask } from './task';\n\nexport function diffSummaryTask(customArgs: string[]): StringTask<DiffResult> | EmptyTask {\n   let logFormat = logFormatFromCommand(customArgs);\n\n   const commands = ['diff'];\n\n   if (logFormat === LogFormat.NONE) {\n      logFormat = LogFormat.STAT;\n      commands.push('--stat=4096');\n   }\n\n   commands.push(...customArgs);\n\n   return (\n      validateLogFormatConfig(commands) || {\n         commands,\n         format: 'utf-8',\n         parser: getDiffParser(logFormat),\n      }\n   );\n}\n\nexport function validateLogFormatConfig(customArgs: unknown[]): EmptyTask | void {\n   const flags = customArgs.filter(isLogFormat);\n\n   if (flags.length > 1) {\n      return configurationErrorTask(\n         `Summary flags are mutually exclusive - pick one of ${flags.join(',')}`\n      );\n   }\n\n   if (flags.length && customArgs.includes('-z')) {\n      return configurationErrorTask(\n         `Summary flag ${flags} parsing is not compatible with null termination option '-z'`\n      );\n   }\n}\n", "import type { Options, StringTask } from '../types';\nimport type { LogResult, SimpleGit } from '../../../typings';\nimport { logFormatFromCommand } from '../args/log-format';\nimport {\n   COMMIT_BOUNDARY,\n   createListLogSummaryParser,\n   SPLITTER,\n   START_BOUNDARY,\n} from '../parsers/parse-list-log-summary';\nimport {\n   appendTaskOptions,\n   filterArray,\n   filterPrimitives,\n   filterString,\n   filterType,\n   trailingFunctionArgument,\n   trailingOptionsArgument,\n} from '../utils';\nimport { SimpleGitApi } from '../simple-git-api';\nimport { configurationErrorTask } from './task';\nimport { validateLogFormatConfig } from './diff';\n\nenum excludeOptions {\n   '--pretty',\n   'max-count',\n   'maxCount',\n   'n',\n   'file',\n   'format',\n   'from',\n   'to',\n   'splitter',\n   'symmetric',\n   'mailMap',\n   'multiLine',\n   'strictDate',\n}\n\nexport interface DefaultLogFields {\n   hash: string;\n   date: string;\n   message: string;\n   refs: string;\n   body: string;\n   author_name: string;\n   author_email: string;\n}\n\nexport type LogOptions<T = DefaultLogFields> = {\n   file?: string;\n   format?: T;\n   from?: string;\n   mailMap?: boolean;\n   maxCount?: number;\n   multiLine?: boolean;\n   splitter?: string;\n   strictDate?: boolean;\n   symmetric?: boolean;\n   to?: string;\n};\n\ninterface ParsedLogOptions {\n   fields: string[];\n   splitter: string;\n   commands: string[];\n}\n\nfunction prettyFormat(\n   format: Record<string, string | unknown>,\n   splitter: string\n): [string[], string] {\n   const fields: string[] = [];\n   const formatStr: string[] = [];\n\n   Object.keys(format).forEach((field) => {\n      fields.push(field);\n      formatStr.push(String(format[field]));\n   });\n\n   return [fields, formatStr.join(splitter)];\n}\n\nfunction userOptions<T extends Options>(input: T): Options {\n   return Object.keys(input).reduce((out, key) => {\n      if (!(key in excludeOptions)) {\n         out[key] = input[key];\n      }\n      return out;\n   }, {} as Options);\n}\n\nexport function parseLogOptions<T extends Options>(\n   opt: Options | LogOptions<T> = {},\n   customArgs: string[] = []\n): ParsedLogOptions {\n   const splitter = filterType(opt.splitter, filterString, SPLITTER);\n   const format =\n      !filterPrimitives(opt.format) && opt.format\n         ? opt.format\n         : {\n              hash: '%H',\n              date: opt.strictDate === false ? '%ai' : '%aI',\n              message: '%s',\n              refs: '%D',\n              body: opt.multiLine ? '%B' : '%b',\n              author_name: opt.mailMap !== false ? '%aN' : '%an',\n              author_email: opt.mailMap !== false ? '%aE' : '%ae',\n           };\n\n   const [fields, formatStr] = prettyFormat(format, splitter);\n\n   const suffix: string[] = [];\n   const command: string[] = [\n      `--pretty=format:${START_BOUNDARY}${formatStr}${COMMIT_BOUNDARY}`,\n      ...customArgs,\n   ];\n\n   const maxCount: number | undefined = (opt as any).n || (opt as any)['max-count'] || opt.maxCount;\n   if (maxCount) {\n      command.push(`--max-count=${maxCount}`);\n   }\n\n   if (opt.from || opt.to) {\n      const rangeOperator = opt.symmetric !== false ? '...' : '..';\n      suffix.push(`${opt.from || ''}${rangeOperator}${opt.to || ''}`);\n   }\n\n   if (filterString(opt.file)) {\n      suffix.push('--follow', opt.file);\n   }\n\n   appendTaskOptions(userOptions(opt as Options), command);\n\n   return {\n      fields,\n      splitter,\n      commands: [...command, ...suffix],\n   };\n}\n\nexport function logTask<T>(\n   splitter: string,\n   fields: string[],\n   customArgs: string[]\n): StringTask<LogResult<T>> {\n   const parser = createListLogSummaryParser(splitter, fields, logFormatFromCommand(customArgs));\n\n   return {\n      commands: ['log', ...customArgs],\n      format: 'utf-8',\n      parser,\n   };\n}\n\nexport default function (): Pick<SimpleGit, 'log'> {\n   return {\n      log<T extends Options>(this: SimpleGitApi, ...rest: unknown[]) {\n         const next = trailingFunctionArgument(arguments);\n         const options = parseLogOptions<T>(\n            trailingOptionsArgument(arguments),\n            filterType(arguments[0], filterArray)\n         );\n         const task =\n            rejectDeprecatedSignatures(...rest) ||\n            validateLogFormatConfig(options.commands) ||\n            createLogTask(options);\n\n         return this._runTask(task, next);\n      },\n   };\n\n   function createLogTask(options: ParsedLogOptions) {\n      return logTask(options.splitter, options.fields, options.commands);\n   }\n\n   function rejectDeprecatedSignatures(from?: unknown, to?: unknown) {\n      return (\n         filterString(from) &&\n         filterString(to) &&\n         configurationErrorTask(\n            `git.log(string, string) should be replaced with git.log({ from: string, to: string })`\n         )\n      );\n   }\n}\n", "import {\n   MergeConflict,\n   MergeConflictDeletion,\n   MergeDetail,\n   MergeResultStatus,\n} from '../../../typings';\n\nexport class MergeSummaryConflict implements MergeConflict {\n   constructor(\n      public readonly reason: string,\n      public readonly file: string | null = null,\n      public readonly meta?: MergeConflictDeletion\n   ) {}\n\n   toString() {\n      return `${this.file}:${this.reason}`;\n   }\n}\n\nexport class MergeSummaryDetail implements MergeDetail {\n   public conflicts: MergeConflict[] = [];\n   public merges: string[] = [];\n   public result: MergeResultStatus = 'success';\n\n   get failed() {\n      return this.conflicts.length > 0;\n   }\n\n   get reason() {\n      return this.result;\n   }\n\n   toString() {\n      if (this.conflicts.length) {\n         return `CONFLICTS: ${this.conflicts.join(', ')}`;\n      }\n\n      return 'OK';\n   }\n}\n", "import {\n   PullDetailFileChanges,\n   PullDetailSummary,\n   PullFailedResult,\n   PullResult,\n} from '../../../typings';\n\nexport class PullSummary implements PullResult {\n   public remoteMessages = {\n      all: [],\n   };\n   public created = [];\n   public deleted: string[] = [];\n   public files: string[] = [];\n   public deletions: PullDetailFileChanges = {};\n   public insertions: PullDetailFileChanges = {};\n   public summary: PullDetailSummary = {\n      changes: 0,\n      deletions: 0,\n      insertions: 0,\n   };\n}\n\nexport class PullFailedSummary implements PullFailedResult {\n   remote = '';\n   hash = {\n      local: '',\n      remote: '',\n   };\n   branch = {\n      local: '',\n      remote: '',\n   };\n   message = '';\n\n   toString() {\n      return this.message;\n   }\n}\n", "import {\n   RemoteMessageResult,\n   RemoteMessages,\n   RemoteMessagesObjectEnumeration,\n} from '../../../typings';\nimport { asNumber, RemoteLineParser } from '../utils';\n\nfunction objectEnumerationResult<T extends RemoteMessages = RemoteMessages>(\n   remoteMessages: T\n): RemoteMessagesObjectEnumeration {\n   return (remoteMessages.objects = remoteMessages.objects || {\n      compressing: 0,\n      counting: 0,\n      enumerating: 0,\n      packReused: 0,\n      reused: { count: 0, delta: 0 },\n      total: { count: 0, delta: 0 },\n   });\n}\n\nfunction asObjectCount(source: string) {\n   const count = /^\\s*(\\d+)/.exec(source);\n   const delta = /delta (\\d+)/i.exec(source);\n\n   return {\n      count: asNumber((count && count[1]) || '0'),\n      delta: asNumber((delta && delta[1]) || '0'),\n   };\n}\n\nexport const remoteMessagesObjectParsers: RemoteLineParser<RemoteMessageResult<RemoteMessages>>[] =\n   [\n      new RemoteLineParser(\n         /^remote:\\s*(enumerating|counting|compressing) objects: (\\d+),/i,\n         (result, [action, count]) => {\n            const key = action.toLowerCase();\n            const enumeration = objectEnumerationResult(result.remoteMessages);\n\n            Object.assign(enumeration, { [key]: asNumber(count) });\n         }\n      ),\n      new RemoteLineParser(\n         /^remote:\\s*(enumerating|counting|compressing) objects: \\d+% \\(\\d+\\/(\\d+)\\),/i,\n         (result, [action, count]) => {\n            const key = action.toLowerCase();\n            const enumeration = objectEnumerationResult(result.remoteMessages);\n\n            Object.assign(enumeration, { [key]: asNumber(count) });\n         }\n      ),\n      new RemoteLineParser(\n         /total ([^,]+), reused ([^,]+), pack-reused (\\d+)/i,\n         (result, [total, reused, packReused]) => {\n            const objects = objectEnumerationResult(result.remoteMessages);\n            objects.total = asObjectCount(total);\n            objects.reused = asObjectCount(reused);\n            objects.packReused = asNumber(packReused);\n         }\n      ),\n   ];\n", "import { PushResultRemoteMessages, RemoteMessageResult, RemoteMessages } from '../../../typings';\nimport { asNumber, parseStringResponse, RemoteLineParser } from '../utils';\nimport { remoteMessagesObjectParsers } from './parse-remote-objects';\n\nconst parsers: RemoteLineParser<RemoteMessageResult<PushResultRemoteMessages | RemoteMessages>>[] =\n   [\n      new RemoteLineParser(/^remote:\\s*(.+)$/, (result, [text]) => {\n         result.remoteMessages.all.push(text.trim());\n         return false;\n      }),\n      ...remoteMessagesObjectParsers,\n      new RemoteLineParser(\n         [/create a (?:pull|merge) request/i, /\\s(https?:\\/\\/\\S+)$/],\n         (result, [pullRequestUrl]) => {\n            (result.remoteMessages as PushResultRemoteMessages).pullRequestUrl = pullRequestUrl;\n         }\n      ),\n      new RemoteLineParser(\n         [/found (\\d+) vulnerabilities.+\\(([^)]+)\\)/i, /\\s(https?:\\/\\/\\S+)$/],\n         (result, [count, summary, url]) => {\n            (result.remoteMessages as PushResultRemoteMessages).vulnerabilities = {\n               count: asNumber(count),\n               summary,\n               url,\n            };\n         }\n      ),\n   ];\n\nexport function parseRemoteMessages<T extends RemoteMessages = RemoteMessages>(\n   _stdOut: string,\n   stdErr: string\n): RemoteMessageResult {\n   return parseStringResponse({ remoteMessages: new RemoteMessageSummary() as T }, parsers, stdErr);\n}\n\nexport class RemoteMessageSummary implements RemoteMessages {\n   public readonly all: string[] = [];\n}\n", "import { PullDetail, PullFailedResult, PullResult, RemoteMessages } from '../../../typings';\nimport { PullFailedSummary, PullSummary } from '../responses/PullSummary';\nimport { TaskParser } from '../types';\nimport { append, LineParser, parseStringResponse } from '../utils';\nimport { parseRemoteMessages } from './parse-remote-messages';\n\nconst FILE_UPDATE_REGEX = /^\\s*(.+?)\\s+\\|\\s+\\d+\\s*(\\+*)(-*)/;\nconst SUMMARY_REGEX = /(\\d+)\\D+((\\d+)\\D+\\(\\+\\))?(\\D+(\\d+)\\D+\\(-\\))?/;\nconst ACTION_REGEX = /^(create|delete) mode \\d+ (.+)/;\n\nconst parsers: LineParser<PullResult>[] = [\n   new LineParser(FILE_UPDATE_REGEX, (result, [file, insertions, deletions]) => {\n      result.files.push(file);\n\n      if (insertions) {\n         result.insertions[file] = insertions.length;\n      }\n\n      if (deletions) {\n         result.deletions[file] = deletions.length;\n      }\n   }),\n   new LineParser(SUMMARY_REGEX, (result, [changes, , insertions, , deletions]) => {\n      if (insertions !== undefined || deletions !== undefined) {\n         result.summary.changes = +changes || 0;\n         result.summary.insertions = +insertions || 0;\n         result.summary.deletions = +deletions || 0;\n         return true;\n      }\n      return false;\n   }),\n   new LineParser(ACTION_REGEX, (result, [action, file]) => {\n      append(result.files, file);\n      append(action === 'create' ? result.created : result.deleted, file);\n   }),\n];\n\nconst errorParsers: LineParser<PullFailedResult>[] = [\n   new LineParser(/^from\\s(.+)$/i, (result, [remote]) => void (result.remote = remote)),\n   new LineParser(/^fatal:\\s(.+)$/, (result, [message]) => void (result.message = message)),\n   new LineParser(\n      /([a-z0-9]+)\\.\\.([a-z0-9]+)\\s+(\\S+)\\s+->\\s+(\\S+)$/,\n      (result, [hashLocal, hashRemote, branchLocal, branchRemote]) => {\n         result.branch.local = branchLocal;\n         result.hash.local = hashLocal;\n         result.branch.remote = branchRemote;\n         result.hash.remote = hashRemote;\n      }\n   ),\n];\n\nexport const parsePullDetail: TaskParser<string, PullDetail> = (stdOut, stdErr) => {\n   return parseStringResponse(new PullSummary(), parsers, [stdOut, stdErr]);\n};\n\nexport const parsePullResult: TaskParser<string, PullResult> = (stdOut, stdErr) => {\n   return Object.assign(\n      new PullSummary(),\n      parsePullDetail(stdOut, stdErr),\n      parseRemoteMessages<RemoteMessages>(stdOut, stdErr)\n   );\n};\n\nexport function parsePullErrorResult(stdOut: string, stdErr: string) {\n   const pullError = parseStringResponse(new PullFailedSummary(), errorParsers, [stdOut, stdErr]);\n\n   return pullError.message && pullError;\n}\n", "import { MergeDetail, MergeResult } from '../../../typings';\nimport { MergeSummaryConflict, MergeSummaryDetail } from '../responses/MergeSummary';\nimport { TaskParser } from '../types';\nimport { LineParser, parseStringResponse } from '../utils';\nimport { parsePullResult } from './parse-pull';\n\nconst parsers: LineParser<MergeDetail>[] = [\n   new LineParser(/^Auto-merging\\s+(.+)$/, (summary, [autoMerge]) => {\n      summary.merges.push(autoMerge);\n   }),\n   new LineParser(/^CONFLICT\\s+\\((.+)\\): Merge conflict in (.+)$/, (summary, [reason, file]) => {\n      summary.conflicts.push(new MergeSummaryConflict(reason, file));\n   }),\n   new LineParser(\n      /^CONFLICT\\s+\\((.+\\/delete)\\): (.+) deleted in (.+) and/,\n      (summary, [reason, file, deleteRef]) => {\n         summary.conflicts.push(new MergeSummaryConflict(reason, file, { deleteRef }));\n      }\n   ),\n   new LineParser(/^CONFLICT\\s+\\((.+)\\):/, (summary, [reason]) => {\n      summary.conflicts.push(new MergeSummaryConflict(reason, null));\n   }),\n   new LineParser(/^Automatic merge failed;\\s+(.+)$/, (summary, [result]) => {\n      summary.result = result;\n   }),\n];\n\n/**\n * Parse the complete response from `git.merge`\n */\nexport const parseMergeResult: TaskParser<string, MergeResult> = (stdOut, stdErr) => {\n   return Object.assign(parseMergeDetail(stdOut, stdErr), parsePullResult(stdOut, stdErr));\n};\n\n/**\n * Parse the merge specific detail (ie: not the content also available in the pull detail) from `git.mnerge`\n * @param stdOut\n */\nexport const parseMergeDetail: TaskParser<string, MergeDetail> = (stdOut) => {\n   return parseStringResponse(new MergeSummaryDetail(), parsers, stdOut);\n};\n", "import { MergeResult } from '../../../typings';\nimport { GitResponseError } from '../errors/git-response-error';\nimport { parseMergeResult } from '../parsers/parse-merge';\nimport { StringTask } from '../types';\nimport { configurationErrorTask, EmptyTask } from './task';\n\nexport function mergeTask(customArgs: string[]): EmptyTask | StringTask<MergeResult> {\n   if (!customArgs.length) {\n      return configurationErrorTask('Git.merge requires at least one option');\n   }\n\n   return {\n      commands: ['merge', ...customArgs],\n      format: 'utf-8',\n      parser(stdOut, stdErr): MergeResult {\n         const merge = parseMergeResult(stdOut, stdErr);\n         if (merge.failed) {\n            throw new GitResponseError(merge);\n         }\n\n         return merge;\n      },\n   };\n}\n", "import {\n   PushDetail,\n   PushResult,\n   PushResultPushedItem,\n   PushResultRemoteMessages,\n} from '../../../typings';\nimport { TaskParser } from '../types';\nimport { LineParser, parseStringResponse } from '../utils';\nimport { parseRemoteMessages } from './parse-remote-messages';\n\nfunction pushResultPushedItem(local: string, remote: string, status: string): PushResultPushedItem {\n   const deleted = status.includes('deleted');\n   const tag = status.includes('tag') || /^refs\\/tags/.test(local);\n   const alreadyUpdated = !status.includes('new');\n\n   return {\n      deleted,\n      tag,\n      branch: !tag,\n      new: !alreadyUpdated,\n      alreadyUpdated,\n      local,\n      remote,\n   };\n}\n\nconst parsers: LineParser<PushDetail>[] = [\n   new LineParser(/^Pushing to (.+)$/, (result, [repo]) => {\n      result.repo = repo;\n   }),\n   new LineParser(/^updating local tracking ref '(.+)'/, (result, [local]) => {\n      result.ref = {\n         ...(result.ref || {}),\n         local,\n      };\n   }),\n   new LineParser(/^[=*-]\\s+([^:]+):(\\S+)\\s+\\[(.+)]$/, (result, [local, remote, type]) => {\n      result.pushed.push(pushResultPushedItem(local, remote, type));\n   }),\n   new LineParser(\n      /^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/,\n      (result, [local, remote, remoteName]) => {\n         result.branch = {\n            ...(result.branch || {}),\n            local,\n            remote,\n            remoteName,\n         };\n      }\n   ),\n   new LineParser(\n      /^([^:]+):(\\S+)\\s+([a-z0-9]+)\\.\\.([a-z0-9]+)$/,\n      (result, [local, remote, from, to]) => {\n         result.update = {\n            head: {\n               local,\n               remote,\n            },\n            hash: {\n               from,\n               to,\n            },\n         };\n      }\n   ),\n];\n\nexport const parsePushResult: TaskParser<string, PushResult> = (stdOut, stdErr) => {\n   const pushDetail = parsePushDetail(stdOut, stdErr);\n   const responseDetail = parseRemoteMessages<PushResultRemoteMessages>(stdOut, stdErr);\n\n   return {\n      ...pushDetail,\n      ...responseDetail,\n   };\n};\n\nexport const parsePushDetail: TaskParser<string, PushDetail> = (stdOut, stdErr) => {\n   return parseStringResponse({ pushed: [] }, parsers, [stdOut, stdErr]);\n};\n", "import { PushResult } from '../../../typings';\nimport { parsePushResult as parser } from '../parsers/parse-push';\nimport { StringTask } from '../types';\nimport { append, remove } from '../utils';\n\ntype PushRef = { remote?: string; branch?: string };\n\nexport function pushTagsTask(ref: PushRef = {}, customArgs: string[]): StringTask<PushResult> {\n   append(customArgs, '--tags');\n   return pushTask(ref, customArgs);\n}\n\nexport function pushTask(ref: PushRef = {}, customArgs: string[]): StringTask<PushResult> {\n   const commands = ['push', ...customArgs];\n   if (ref.branch) {\n      commands.splice(1, 0, ref.branch);\n   }\n   if (ref.remote) {\n      commands.splice(1, 0, ref.remote);\n   }\n\n   remove(commands, '-v');\n   append(commands, '--verbose');\n   append(commands, '--porcelain');\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser,\n   };\n}\n", "import { FileStatusResult } from '../../../typings';\n\nexport const fromPathRegex = /^(.+) -> (.+)$/;\n\nexport class FileStatusSummary implements FileStatusResult {\n   public readonly from: string | undefined;\n\n   constructor(public path: string, public index: string, public working_dir: string) {\n      if ('R' === index + working_dir) {\n         const detail = fromPathRegex.exec(path) || [null, path, path];\n         this.from = detail[1] || '';\n         this.path = detail[2] || '';\n      }\n   }\n}\n", "import { StatusResult } from '../../../typings';\nimport { append, NULL } from '../utils';\nimport { FileStatusSummary } from './FileStatusSummary';\n\ntype StatusLineParser = (result: StatusResult, file: string) => void;\n\nexport class StatusSummary implements StatusResult {\n   public not_added = [];\n   public conflicted = [];\n   public created = [];\n   public deleted = [];\n   public ignored = undefined;\n   public modified = [];\n   public renamed = [];\n   public files = [];\n   public staged = [];\n   public ahead = 0;\n   public behind = 0;\n   public current = null;\n   public tracking = null;\n   public detached = false;\n\n   public isClean = () => {\n      return !this.files.length;\n   };\n}\n\nenum PorcelainFileStatus {\n   ADDED = 'A',\n   DELETED = 'D',\n   MODIFIED = 'M',\n   RENAMED = 'R',\n   COPIED = 'C',\n   UNMERGED = 'U',\n   UNTRACKED = '?',\n   IGNORED = '!',\n   NONE = ' ',\n}\n\nfunction renamedFile(line: string) {\n   const [to, from] = line.split(NULL);\n\n   return {\n      from: from || to,\n      to,\n   };\n}\n\nfunction parser(\n   indexX: PorcelainFileStatus,\n   indexY: PorcelainFileStatus,\n   handler: StatusLineParser\n): [string, StatusLineParser] {\n   return [`${indexX}${indexY}`, handler];\n}\n\nfunction conflicts(indexX: PorcelainFileStatus, ...indexY: PorcelainFileStatus[]) {\n   return indexY.map((y) => parser(indexX, y, (result, file) => append(result.conflicted, file)));\n}\n\nconst parsers: Map<string, StatusLineParser> = new Map([\n   parser(PorcelainFileStatus.NONE, PorcelainFileStatus.ADDED, (result, file) =>\n      append(result.created, file)\n   ),\n   parser(PorcelainFileStatus.NONE, PorcelainFileStatus.DELETED, (result, file) =>\n      append(result.deleted, file)\n   ),\n   parser(PorcelainFileStatus.NONE, PorcelainFileStatus.MODIFIED, (result, file) =>\n      append(result.modified, file)\n   ),\n\n   parser(\n      PorcelainFileStatus.ADDED,\n      PorcelainFileStatus.NONE,\n      (result, file) => append(result.created, file) && append(result.staged, file)\n   ),\n   parser(\n      PorcelainFileStatus.ADDED,\n      PorcelainFileStatus.MODIFIED,\n      (result, file) =>\n         append(result.created, file) &&\n         append(result.staged, file) &&\n         append(result.modified, file)\n   ),\n\n   parser(\n      PorcelainFileStatus.DELETED,\n      PorcelainFileStatus.NONE,\n      (result, file) => append(result.deleted, file) && append(result.staged, file)\n   ),\n\n   parser(\n      PorcelainFileStatus.MODIFIED,\n      PorcelainFileStatus.NONE,\n      (result, file) => append(result.modified, file) && append(result.staged, file)\n   ),\n   parser(\n      PorcelainFileStatus.MODIFIED,\n      PorcelainFileStatus.MODIFIED,\n      (result, file) => append(result.modified, file) && append(result.staged, file)\n   ),\n\n   parser(PorcelainFileStatus.RENAMED, PorcelainFileStatus.NONE, (result, file) => {\n      append(result.renamed, renamedFile(file));\n   }),\n   parser(PorcelainFileStatus.RENAMED, PorcelainFileStatus.MODIFIED, (result, file) => {\n      const renamed = renamedFile(file);\n      append(result.renamed, renamed);\n      append(result.modified, renamed.to);\n   }),\n   parser(PorcelainFileStatus.IGNORED, PorcelainFileStatus.IGNORED, (_result, _file) => {\n      append((_result.ignored = _result.ignored || []), _file);\n   }),\n\n   parser(PorcelainFileStatus.UNTRACKED, PorcelainFileStatus.UNTRACKED, (result, file) =>\n      append(result.not_added, file)\n   ),\n\n   ...conflicts(PorcelainFileStatus.ADDED, PorcelainFileStatus.ADDED, PorcelainFileStatus.UNMERGED),\n   ...conflicts(\n      PorcelainFileStatus.DELETED,\n      PorcelainFileStatus.DELETED,\n      PorcelainFileStatus.UNMERGED\n   ),\n   ...conflicts(\n      PorcelainFileStatus.UNMERGED,\n      PorcelainFileStatus.ADDED,\n      PorcelainFileStatus.DELETED,\n      PorcelainFileStatus.UNMERGED\n   ),\n\n   [\n      '##',\n      (result, line) => {\n         const aheadReg = /ahead (\\d+)/;\n         const behindReg = /behind (\\d+)/;\n         const currentReg = /^(.+?(?=(?:\\.{3}|\\s|$)))/;\n         const trackingReg = /\\.{3}(\\S*)/;\n         const onEmptyBranchReg = /\\son\\s([\\S]+)$/;\n         let regexResult;\n\n         regexResult = aheadReg.exec(line);\n         result.ahead = (regexResult && +regexResult[1]) || 0;\n\n         regexResult = behindReg.exec(line);\n         result.behind = (regexResult && +regexResult[1]) || 0;\n\n         regexResult = currentReg.exec(line);\n         result.current = regexResult && regexResult[1];\n\n         regexResult = trackingReg.exec(line);\n         result.tracking = regexResult && regexResult[1];\n\n         regexResult = onEmptyBranchReg.exec(line);\n         result.current = (regexResult && regexResult[1]) || result.current;\n\n         result.detached = /\\(no branch\\)/.test(line);\n      },\n   ],\n]);\n\nexport const parseStatusSummary = function (text: string): StatusResult {\n   const lines = text.split(NULL);\n   const status = new StatusSummary();\n\n   for (let i = 0, l = lines.length; i < l; ) {\n      let line = lines[i++].trim();\n\n      if (!line) {\n         continue;\n      }\n\n      if (line.charAt(0) === PorcelainFileStatus.RENAMED) {\n         line += NULL + (lines[i++] || '');\n      }\n\n      splitLine(status, line);\n   }\n\n   return status;\n};\n\nfunction splitLine(result: StatusResult, lineStr: string) {\n   const trimmed = lineStr.trim();\n   switch (' ') {\n      case trimmed.charAt(2):\n         return data(trimmed.charAt(0), trimmed.charAt(1), trimmed.substr(3));\n      case trimmed.charAt(1):\n         return data(PorcelainFileStatus.NONE, trimmed.charAt(0), trimmed.substr(2));\n      default:\n         return;\n   }\n\n   function data(index: string, workingDir: string, path: string) {\n      const raw = `${index}${workingDir}`;\n      const handler = parsers.get(raw);\n\n      if (handler) {\n         handler(result, path);\n      }\n\n      if (raw !== '##' && raw !== '!!') {\n         result.files.push(new FileStatusSummary(path.replace(/\\0.+$/, ''), index, workingDir));\n      }\n   }\n}\n", "import { StatusResult } from '../../../typings';\nimport { parseStatusSummary } from '../responses/StatusSummary';\nimport { StringTask } from '../types';\n\nconst ignoredOptions = ['--null', '-z'];\n\nexport function statusTask(customArgs: string[]): StringTask<StatusResult> {\n   const commands = [\n      'status',\n      '--porcelain',\n      '-b',\n      '-u',\n      '--null',\n      ...customArgs.filter((arg) => !ignoredOptions.includes(arg)),\n   ];\n\n   return {\n      format: 'utf-8',\n      commands,\n      parser(text: string) {\n         return parseStatusSummary(text);\n      },\n   };\n}\n", "import type { SimpleGitApi } from '../simple-git-api';\nimport type { SimpleGit } from '../../../typings';\nimport { asNumber, ExitCodes, LineParser, parseStringResponse } from '../utils';\n\nexport interface VersionResult {\n   major: number;\n   minor: number;\n   patch: number | string;\n   agent: string;\n   installed: boolean;\n}\n\nconst NOT_INSTALLED = 'installed=false';\n\nfunction versionResponse(\n   major = 0,\n   minor = 0,\n   patch: string | number = 0,\n   agent = '',\n   installed = true\n): VersionResult {\n   return Object.defineProperty(\n      {\n         major,\n         minor,\n         patch,\n         agent,\n         installed,\n      },\n      'toString',\n      {\n         value() {\n            return `${this.major}.${this.minor}.${this.patch}`;\n         },\n         configurable: false,\n         enumerable: false,\n      }\n   );\n}\n\nfunction notInstalledResponse() {\n   return versionResponse(0, 0, 0, '', false);\n}\n\nexport default function (): Pick<SimpleGit, 'version'> {\n   return {\n      version(this: SimpleGitApi) {\n         return this._runTask({\n            commands: ['--version'],\n            format: 'utf-8',\n            parser: versionParser,\n            onError(result, error, done, fail) {\n               if (result.exitCode === ExitCodes.NOT_FOUND) {\n                  return done(Buffer.from(NOT_INSTALLED));\n               }\n\n               fail(error);\n            },\n         });\n      },\n   };\n}\n\nconst parsers: LineParser<VersionResult>[] = [\n   new LineParser(\n      /version (\\d+)\\.(\\d+)\\.(\\d+)(?:\\s*\\((.+)\\))?/,\n      (result, [major, minor, patch, agent = '']) => {\n         Object.assign(\n            result,\n            versionResponse(asNumber(major), asNumber(minor), asNumber(patch), agent)\n         );\n      }\n   ),\n   new LineParser(\n      /version (\\d+)\\.(\\d+)\\.(\\D+)(.+)?$/,\n      (result, [major, minor, patch, agent = '']) => {\n         Object.assign(result, versionResponse(asNumber(major), asNumber(minor), patch, agent));\n      }\n   ),\n];\n\nfunction versionParser(stdOut: string) {\n   if (stdOut === NOT_INSTALLED) {\n      return notInstalledResponse();\n   }\n\n   return parseStringResponse(versionResponse(0, 0, 0, stdOut), parsers, stdOut);\n}\n", "import { SimpleGitBase } from '../../typings';\nimport { taskCallback } from './task-callback';\nimport { changeWorkingDirectoryTask } from './tasks/change-working-directory';\nimport checkout from './tasks/checkout';\nimport commit from './tasks/commit';\nimport config from './tasks/config';\nimport grep from './tasks/grep';\nimport { hashObjectTask } from './tasks/hash-object';\nimport { initTask } from './tasks/init';\nimport log from './tasks/log';\nimport { mergeTask } from './tasks/merge';\nimport { pushTask } from './tasks/push';\nimport { statusTask } from './tasks/status';\nimport { configurationErrorTask, straightThroughStringTask } from './tasks/task';\nimport version from './tasks/version';\nimport { outputHandler, SimpleGitExecutor, SimpleGitTask, SimpleGitTaskCallback } from './types';\nimport {\n   asArray,\n   filterString,\n   filterType,\n   getTrailingOptions,\n   trailingFunctionArgument,\n} from './utils';\n\nexport class SimpleGitApi implements SimpleGitBase {\n   constructor(private _executor: SimpleGitExecutor) {}\n\n   protected _runTask<T>(task: SimpleGitTask<T>, then?: SimpleGitTaskCallback<T>) {\n      const chain = this._executor.chain();\n      const promise = chain.push(task);\n\n      if (then) {\n         taskCallback(task, promise, then);\n      }\n\n      return Object.create(this, {\n         then: { value: promise.then.bind(promise) },\n         catch: { value: promise.catch.bind(promise) },\n         _executor: { value: chain },\n      });\n   }\n\n   add(files: string | string[]) {\n      return this._runTask(\n         straightThroughStringTask(['add', ...asArray(files)]),\n         trailingFunctionArgument(arguments)\n      );\n   }\n\n   cwd(directory: string | { path: string; root?: boolean }) {\n      const next = trailingFunctionArgument(arguments);\n\n      if (typeof directory === 'string') {\n         return this._runTask(changeWorkingDirectoryTask(directory, this._executor), next);\n      }\n\n      if (typeof directory?.path === 'string') {\n         return this._runTask(\n            changeWorkingDirectoryTask(\n               directory.path,\n               (directory.root && this._executor) || undefined\n            ),\n            next\n         );\n      }\n\n      return this._runTask(\n         configurationErrorTask('Git.cwd: workingDirectory must be supplied as a string'),\n         next\n      );\n   }\n\n   hashObject(path: string, write: boolean | unknown) {\n      return this._runTask(\n         hashObjectTask(path, write === true),\n         trailingFunctionArgument(arguments)\n      );\n   }\n\n   init(bare?: boolean | unknown) {\n      return this._runTask(\n         initTask(bare === true, this._executor.cwd, getTrailingOptions(arguments)),\n         trailingFunctionArgument(arguments)\n      );\n   }\n\n   merge() {\n      return this._runTask(\n         mergeTask(getTrailingOptions(arguments)),\n         trailingFunctionArgument(arguments)\n      );\n   }\n\n   mergeFromTo(remote: string, branch: string) {\n      if (!(filterString(remote) && filterString(branch))) {\n         return this._runTask(\n            configurationErrorTask(\n               `Git.mergeFromTo requires that the 'remote' and 'branch' arguments are supplied as strings`\n            )\n         );\n      }\n\n      return this._runTask(\n         mergeTask([remote, branch, ...getTrailingOptions(arguments)]),\n         trailingFunctionArgument(arguments, false)\n      );\n   }\n\n   outputHandler(handler: outputHandler) {\n      this._executor.outputHandler = handler;\n      return this;\n   }\n\n   push() {\n      const task = pushTask(\n         {\n            remote: filterType(arguments[0], filterString),\n            branch: filterType(arguments[1], filterString),\n         },\n         getTrailingOptions(arguments)\n      );\n\n      return this._runTask(task, trailingFunctionArgument(arguments));\n   }\n\n   stash() {\n      return this._runTask(\n         straightThroughStringTask(['stash', ...getTrailingOptions(arguments)]),\n         trailingFunctionArgument(arguments)\n      );\n   }\n\n   status() {\n      return this._runTask(\n         statusTask(getTrailingOptions(arguments)),\n         trailingFunctionArgument(arguments)\n      );\n   }\n}\n\nObject.assign(SimpleGitApi.prototype, checkout(), commit(), config(), grep(), log(), version());\n", "import { append, remove } from '../utils';\nimport { createDeferred, DeferredPromise } from '@kwsites/promise-deferred';\nimport { createLogger } from '../git-logger';\n\ntype ScheduleCompleteCallback = () => void;\ntype ScheduledTask = Pick<DeferredPromise<ScheduleCompleteCallback>, 'promise' | 'done'> & {\n   id: number;\n};\n\nconst createScheduledTask: () => ScheduledTask = (() => {\n   let id = 0;\n   return () => {\n      id++;\n      const { promise, done } = createDeferred<ScheduleCompleteCallback>();\n\n      return {\n         promise,\n         done,\n         id,\n      };\n   };\n})();\n\nexport class Scheduler {\n   private logger = createLogger('', 'scheduler');\n   private pending: ScheduledTask[] = [];\n   private running: ScheduledTask[] = [];\n\n   constructor(private concurrency = 2) {\n      this.logger(`Constructed, concurrency=%s`, concurrency);\n   }\n\n   private schedule() {\n      if (!this.pending.length || this.running.length >= this.concurrency) {\n         this.logger(\n            `Schedule attempt ignored, pending=%s running=%s concurrency=%s`,\n            this.pending.length,\n            this.running.length,\n            this.concurrency\n         );\n         return;\n      }\n\n      const task = append(this.running, this.pending.shift()!);\n      this.logger(`Attempting id=%s`, task.id);\n      task.done(() => {\n         this.logger(`Completing id=`, task.id);\n         remove(this.running, task);\n         this.schedule();\n      });\n   }\n\n   next(): Promise<ScheduleCompleteCallback> {\n      const { promise, id } = append(this.pending, createScheduledTask());\n      this.logger(`Scheduling id=%s`, id);\n\n      this.schedule();\n\n      return promise;\n   }\n}\n", "import { straightThroughStringTask } from './task';\nimport { OptionFlags, Options, StringTask } from '../types';\n\nexport type ApplyOptions = Options &\n   OptionFlags<\n      | '--stat'\n      | '--numstat'\n      | '--summary'\n      | '--check'\n      | '--index'\n      | '--intent-to-add'\n      | '--3way'\n      | '--apply'\n      | '--no-add'\n      | '-R'\n      | '--reverse'\n      | '--allow-binary-replacement'\n      | '--binary'\n      | '--reject'\n      | '-z'\n      | '--inaccurate-eof'\n      | '--recount'\n      | '--cached'\n      | '--ignore-space-change'\n      | '--ignore-whitespace'\n      | '--verbose'\n      | '--unsafe-paths'\n   > &\n   OptionFlags<'--whitespace', 'nowarn' | 'warn' | 'fix' | 'error' | 'error-all'> &\n   OptionFlags<'--build-fake-ancestor' | '--exclude' | '--include' | '--directory', string> &\n   OptionFlags<'-p' | '-C', number>;\n\nexport function applyPatchTask(patches: string[], customArgs: string[]): StringTask<string> {\n   return straightThroughStringTask(['apply', ...customArgs, ...patches]);\n}\n", "import {\n   BranchMultiDeleteResult,\n   BranchSingleDeleteFailure,\n   BranchSingleDeleteResult,\n   BranchSingleDeleteSuccess,\n} from '../../../typings';\n\nexport class BranchDeletionBatch implements BranchMultiDeleteResult {\n   all: BranchSingleDeleteResult[] = [];\n   branches: { [branchName: string]: BranchSingleDeleteResult } = {};\n   errors: BranchSingleDeleteResult[] = [];\n\n   get success(): boolean {\n      return !this.errors.length;\n   }\n}\n\nexport function branchDeletionSuccess(branch: string, hash: string): BranchSingleDeleteSuccess {\n   return {\n      branch,\n      hash,\n      success: true,\n   };\n}\n\nexport function branchDeletionFailure(branch: string): BranchSingleDeleteFailure {\n   return {\n      branch,\n      hash: null,\n      success: false,\n   };\n}\n\nexport function isSingleBranchDeleteFailure(\n   test: BranchSingleDeleteResult\n): test is BranchSingleDeleteSuccess {\n   return test.success;\n}\n", "import { BranchMultiDeleteResult } from '../../../typings';\nimport {\n   BranchDeletionBatch,\n   branchDeletionFailure,\n   branchDeletionSuccess,\n} from '../responses/BranchDeleteSummary';\nimport { TaskParser } from '../types';\nimport { ExitCodes, LineParser, parseStringResponse } from '../utils';\n\nconst deleteSuccessRegex = /(\\S+)\\s+\\(\\S+\\s([^)]+)\\)/;\nconst deleteErrorRegex = /^error[^']+'([^']+)'/m;\n\nconst parsers: LineParser<BranchMultiDeleteResult>[] = [\n   new LineParser(deleteSuccessRegex, (result, [branch, hash]) => {\n      const deletion = branchDeletionSuccess(branch, hash);\n\n      result.all.push(deletion);\n      result.branches[branch] = deletion;\n   }),\n   new LineParser(deleteErrorRegex, (result, [branch]) => {\n      const deletion = branchDeletionFailure(branch);\n\n      result.errors.push(deletion);\n      result.all.push(deletion);\n      result.branches[branch] = deletion;\n   }),\n];\n\nexport const parseBranchDeletions: TaskParser<string, BranchMultiDeleteResult> = (\n   stdOut,\n   stdErr\n) => {\n   return parseStringResponse(new BranchDeletionBatch(), parsers, [stdOut, stdErr]);\n};\n\nexport function hasBranchDeletionError(data: string, processExitCode: ExitCodes): boolean {\n   return processExitCode === ExitCodes.ERROR && deleteErrorRegex.test(data);\n}\n", "import type { BranchSummary, BranchSummaryBranch } from '../../../typings';\n\nexport enum BranchStatusIdentifier {\n   CURRENT = '*',\n   LINKED = '+',\n}\n\nexport class BranchSummaryResult implements BranchSummary {\n   public all: string[] = [];\n   public branches: { [p: string]: BranchSummaryBranch } = {};\n   public current: string = '';\n   public detached: boolean = false;\n\n   push(\n      status: BranchStatusIdentifier | unknown,\n      detached: boolean,\n      name: string,\n      commit: string,\n      label: string\n   ) {\n      if (status === BranchStatusIdentifier.CURRENT) {\n         this.detached = detached;\n         this.current = name;\n      }\n\n      this.all.push(name);\n      this.branches[name] = {\n         current: status === BranchStatusIdentifier.CURRENT,\n         linkedWorkTree: status === BranchStatusIdentifier.LINKED,\n         name,\n         commit,\n         label,\n      };\n   }\n}\n", "import type { BranchSummary } from '../../../typings';\nimport { BranchSummaryResult } from '../responses/BranchSummary';\nimport { LineParser, parseStringResponse } from '../utils';\n\nconst parsers: LineParser<BranchSummaryResult>[] = [\n   new LineParser(\n      /^([*+]\\s)?\\((?:HEAD )?detached (?:from|at) (\\S+)\\)\\s+([a-z0-9]+)\\s(.*)$/,\n      (result, [current, name, commit, label]) => {\n         result.push(branchStatus(current), true, name, commit, label);\n      }\n   ),\n   new LineParser(\n      /^([*+]\\s)?(\\S+)\\s+([a-z0-9]+)\\s?(.*)$/s,\n      (result, [current, name, commit, label]) => {\n         result.push(branchStatus(current), false, name, commit, label);\n      }\n   ),\n];\n\nfunction branchStatus(input?: string) {\n   return input ? input.charAt(0) : '';\n}\n\nexport function parseBranchSummary(stdOut: string): BranchSummary {\n   return parseStringResponse(new BranchSummaryResult(), parsers, stdOut);\n}\n", "import { BranchMultiDeleteResult, BranchSingleDeleteResult, BranchSummary } from '../../../typings';\nimport { StringTask } from '../types';\nimport { GitResponseError } from '../errors/git-response-error';\nimport { hasBranchDeletionError, parseBranchDeletions } from '../parsers/parse-branch-delete';\nimport { parseBranchSummary } from '../parsers/parse-branch';\nimport { bufferToString } from '../utils';\n\nexport function containsDeleteBranchCommand(commands: string[]) {\n   const deleteCommands = ['-d', '-D', '--delete'];\n   return commands.some((command) => deleteCommands.includes(command));\n}\n\nexport function branchTask(\n   customArgs: string[]\n): StringTask<BranchSummary | BranchSingleDeleteResult> {\n   const isDelete = containsDeleteBranchCommand(customArgs);\n   const commands = ['branch', ...customArgs];\n\n   if (commands.length === 1) {\n      commands.push('-a');\n   }\n\n   if (!commands.includes('-v')) {\n      commands.splice(1, 0, '-v');\n   }\n\n   return {\n      format: 'utf-8',\n      commands,\n      parser(stdOut, stdErr) {\n         if (isDelete) {\n            return parseBranchDeletions(stdOut, stdErr).all[0];\n         }\n\n         return parseBranchSummary(stdOut);\n      },\n   };\n}\n\nexport function branchLocalTask(): StringTask<BranchSummary> {\n   const parser = parseBranchSummary;\n\n   return {\n      format: 'utf-8',\n      commands: ['branch', '-v'],\n      parser,\n   };\n}\n\nexport function deleteBranchesTask(\n   branches: string[],\n   forceDelete = false\n): StringTask<BranchMultiDeleteResult> {\n   return {\n      format: 'utf-8',\n      commands: ['branch', '-v', forceDelete ? '-D' : '-d', ...branches],\n      parser(stdOut, stdErr) {\n         return parseBranchDeletions(stdOut, stdErr);\n      },\n      onError({ exitCode, stdOut }, error, done, fail) {\n         if (!hasBranchDeletionError(String(error), exitCode)) {\n            return fail(error);\n         }\n\n         done(stdOut);\n      },\n   };\n}\n\nexport function deleteBranchTask(\n   branch: string,\n   forceDelete = false\n): StringTask<BranchSingleDeleteResult> {\n   const task: StringTask<BranchSingleDeleteResult> = {\n      format: 'utf-8',\n      commands: ['branch', '-v', forceDelete ? '-D' : '-d', branch],\n      parser(stdOut, stdErr) {\n         return parseBranchDeletions(stdOut, stdErr).branches[branch]!;\n      },\n      onError({ exitCode, stdErr, stdOut }, error, _, fail) {\n         if (!hasBranchDeletionError(String(error), exitCode)) {\n            return fail(error);\n         }\n\n         throw new GitResponseError(\n            task.parser(bufferToString(stdOut), bufferToString(stdErr)),\n            String(error)\n         );\n      },\n   };\n\n   return task;\n}\n", "/**\n * Parser for the `check-ignore` command - returns each file as a string array\n */\nexport const parseCheckIgnore = (text: string): string[] => {\n   return text\n      .split(/\\n/g)\n      .map((line) => line.trim())\n      .filter((file) => !!file);\n};\n", "import { StringTask } from '../types';\nimport { parseCheckIgnore } from '../responses/CheckIgnore';\n\nexport function checkIgnoreTask(paths: string[]): StringTask<string[]> {\n   return {\n      commands: ['check-ignore', ...paths],\n      format: 'utf-8',\n      parser: parseCheckIgnore,\n   };\n}\n", "import { configurationErrorTask, EmptyTask, straightThroughStringTask } from './task';\nimport { OptionFlags, Options, StringTask } from '../types';\nimport { append, filterString } from '../utils';\n\nexport type CloneOptions = Options &\n   OptionFlags<\n      | '--bare'\n      | '--dissociate'\n      | '--mirror'\n      | '--no-checkout'\n      | '--no-remote-submodules'\n      | '--no-shallow-submodules'\n      | '--no-single-branch'\n      | '--no-tags'\n      | '--remote-submodules'\n      | '--single-branch'\n      | '--shallow-submodules'\n      | '--verbose'\n   > &\n   OptionFlags<'--depth' | '-j' | '--jobs', number> &\n   OptionFlags<\n      | '--branch'\n      | '--origin'\n      | '--recurse-submodules'\n      | '--separate-git-dir'\n      | '--shallow-exclude'\n      | '--shallow-since'\n      | '--template',\n      string\n   >;\n\nfunction disallowedCommand(command: string) {\n   return /^--upload-pack(=|$)/.test(command);\n}\n\nexport function cloneTask(\n   repo: string | undefined,\n   directory: string | undefined,\n   customArgs: string[]\n): StringTask<string> | EmptyTask {\n   const commands = ['clone', ...customArgs];\n\n   filterString(repo) && commands.push(repo);\n   filterString(directory) && commands.push(directory);\n\n   const banned = commands.find(disallowedCommand);\n   if (banned) {\n      return configurationErrorTask(`git.fetch: potential exploit argument blocked.`);\n   }\n\n   return straightThroughStringTask(commands);\n}\n\nexport function cloneMirrorTask(\n   repo: string | undefined,\n   directory: string | undefined,\n   customArgs: string[]\n) {\n   append(customArgs, '--mirror');\n\n   return cloneTask(repo, directory, customArgs);\n}\n", "import { FetchResult } from '../../../typings';\nimport { LineParser, parseStringResponse } from '../utils';\n\nconst parsers: LineParser<FetchResult>[] = [\n   new LineParser(/From (.+)$/, (result, [remote]) => {\n      result.remote = remote;\n   }),\n   new LineParser(/\\* \\[new branch]\\s+(\\S+)\\s*-> (.+)$/, (result, [name, tracking]) => {\n      result.branches.push({\n         name,\n         tracking,\n      });\n   }),\n   new LineParser(/\\* \\[new tag]\\s+(\\S+)\\s*-> (.+)$/, (result, [name, tracking]) => {\n      result.tags.push({\n         name,\n         tracking,\n      });\n   }),\n   new LineParser(/- \\[deleted]\\s+\\S+\\s*-> (.+)$/, (result, [tracking]) => {\n      result.deleted.push({\n         tracking,\n      });\n   }),\n   new LineParser(\n      /\\s*([^.]+)\\.\\.(\\S+)\\s+(\\S+)\\s*-> (.+)$/,\n      (result, [from, to, name, tracking]) => {\n         result.updated.push({\n            name,\n            tracking,\n            to,\n            from,\n         });\n      }\n   ),\n];\n\nexport function parseFetchResult(stdOut: string, stdErr: string): FetchResult {\n   const result: FetchResult = {\n      raw: stdOut,\n      remote: null,\n      branches: [],\n      tags: [],\n      updated: [],\n      deleted: [],\n   };\n   return parseStringResponse(result, parsers, [stdOut, stdErr]);\n}\n", "import { FetchResult } from '../../../typings';\nimport { parseFetchResult } from '../parsers/parse-fetch';\nimport { StringTask } from '../types';\n\nimport { configurationErrorTask, EmptyTask } from './task';\n\nfunction disallowedCommand(command: string) {\n   return /^--upload-pack(=|$)/.test(command);\n}\n\nexport function fetchTask(\n   remote: string,\n   branch: string,\n   customArgs: string[]\n): StringTask<FetchResult> | EmptyTask {\n   const commands = ['fetch', ...customArgs];\n   if (remote && branch) {\n      commands.push(remote, branch);\n   }\n\n   const banned = commands.find(disallowedCommand);\n   if (banned) {\n      return configurationErrorTask(`git.fetch: potential exploit argument blocked.`);\n   }\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser: parseFetchResult,\n   };\n}\n", "import { MoveResult } from '../../../typings';\nimport { LineParser, parseStringResponse } from '../utils';\n\nconst parsers: LineParser<MoveResult>[] = [\n   new LineParser(/^Renaming (.+) to (.+)$/, (result, [from, to]) => {\n      result.moves.push({ from, to });\n   }),\n];\n\nexport function parseMoveResult(stdOut: string): MoveResult {\n   return parseStringResponse({ moves: [] }, parsers, stdOut);\n}\n", "import { MoveResult } from '../../../typings';\nimport { parseMoveResult } from '../parsers/parse-move';\nimport { StringTask } from '../types';\nimport { asArray } from '../utils';\n\nexport function moveTask(from: string | string[], to: string): StringTask<MoveResult> {\n   return {\n      commands: ['mv', '-v', ...asArray(from), to],\n      format: 'utf-8',\n      parser: parseMoveResult,\n   };\n}\n", "import { PullResult } from '../../../typings';\nimport { GitResponseError } from '../errors/git-response-error';\nimport { parsePullErrorResult, parsePullResult } from '../parsers/parse-pull';\nimport { Maybe, StringTask } from '../types';\nimport { bufferToString } from '../utils';\n\nexport function pullTask(\n   remote: Maybe<string>,\n   branch: Maybe<string>,\n   customArgs: string[]\n): StringTask<PullResult> {\n   const commands: string[] = ['pull', ...customArgs];\n   if (remote && branch) {\n      commands.splice(1, 0, remote, branch);\n   }\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser(stdOut, stdErr): PullResult {\n         return parsePullResult(stdOut, stdErr);\n      },\n      onError(result, _error, _done, fail) {\n         const pullError = parsePullErrorResult(\n            bufferToString(result.stdOut),\n            bufferToString(result.stdErr)\n         );\n         if (pullError) {\n            return fail(new GitResponseError(pullError));\n         }\n\n         fail(_error);\n      },\n   };\n}\n", "import { forEachLineWithContent } from '../utils';\n\nexport interface RemoteWithoutRefs {\n   name: string;\n}\n\nexport interface RemoteWithRefs extends RemoteWithoutRefs {\n   refs: {\n      fetch: string;\n      push: string;\n   };\n}\n\nexport function parseGetRemotes(text: string): RemoteWithoutRefs[] {\n   const remotes: { [name: string]: RemoteWithoutRefs } = {};\n\n   forEach(text, ([name]) => (remotes[name] = { name }));\n\n   return Object.values(remotes);\n}\n\nexport function parseGetRemotesVerbose(text: string): RemoteWithRefs[] {\n   const remotes: { [name: string]: RemoteWithRefs } = {};\n\n   forEach(text, ([name, url, purpose]) => {\n      if (!remotes.hasOwnProperty(name)) {\n         remotes[name] = {\n            name: name,\n            refs: { fetch: '', push: '' },\n         };\n      }\n\n      if (purpose && url) {\n         remotes[name].refs[purpose.replace(/[^a-z]/g, '') as keyof RemoteWithRefs['refs']] = url;\n      }\n   });\n\n   return Object.values(remotes);\n}\n\nfunction forEach(text: string, handler: (line: string[]) => void) {\n   forEachLineWithContent(text, (line) => handler(line.split(/\\s+/)));\n}\n", "import { parseGetRemotes, parseGetRemotesVerbose } from '../responses/GetRemoteSummary';\nimport { StringTask } from '../types';\nimport { straightThroughStringTask } from './task';\n\nexport function addRemoteTask(\n   remoteName: string,\n   remoteRepo: string,\n   customArgs: string[] = []\n): StringTask<string> {\n   return straightThroughStringTask(['remote', 'add', ...customArgs, remoteName, remoteRepo]);\n}\n\nexport function getRemotesTask(verbose: boolean): StringTask<any> {\n   const commands = ['remote'];\n   if (verbose) {\n      commands.push('-v');\n   }\n\n   return {\n      commands,\n      format: 'utf-8',\n      parser: verbose ? parseGetRemotesVerbose : parseGetRemotes,\n   };\n}\n\nexport function listRemotesTask(customArgs: string[] = []): StringTask<string> {\n   const commands = [...customArgs];\n   if (commands[0] !== 'ls-remote') {\n      commands.unshift('ls-remote');\n   }\n\n   return straightThroughStringTask(commands);\n}\n\nexport function remoteTask(customArgs: string[] = []): StringTask<string> {\n   const commands = [...customArgs];\n   if (commands[0] !== 'remote') {\n      commands.unshift('remote');\n   }\n\n   return straightThroughStringTask(commands);\n}\n\nexport function removeRemoteTask(remoteName: string) {\n   return straightThroughStringTask(['remote', 'remove', remoteName]);\n}\n", "import { LogOptions, LogResult } from '../../../typings';\nimport { logFormatFromCommand } from '../args/log-format';\nimport { createListLogSummaryParser } from '../parsers/parse-list-log-summary';\nimport type { StringTask } from '../types';\nimport { validateLogFormatConfig } from './diff';\nimport { parseLogOptions } from './log';\nimport type { EmptyTask } from './task';\n\nexport function stashListTask(\n   opt: LogOptions = {},\n   customArgs: string[]\n): EmptyTask | StringTask<LogResult> {\n   const options = parseLogOptions<any>(opt);\n   const commands = ['stash', 'list', ...options.commands, ...customArgs];\n   const parser = createListLogSummaryParser(\n      options.splitter,\n      options.fields,\n      logFormatFromCommand(commands)\n   );\n\n   return (\n      validateLogFormatConfig(commands) || {\n         commands,\n         format: 'utf-8',\n         parser,\n      }\n   );\n}\n", "import { StringTask } from '../types';\nimport { straightThroughStringTask } from './task';\n\nexport function addSubModuleTask(repo: string, path: string): StringTask<string> {\n   return subModuleTask(['add', repo, path]);\n}\n\nexport function initSubModuleTask(customArgs: string[]): StringTask<string> {\n   return subModuleTask(['init', ...customArgs]);\n}\n\nexport function subModuleTask(customArgs: string[]): StringTask<string> {\n   const commands = [...customArgs];\n   if (commands[0] !== 'submodule') {\n      commands.unshift('submodule');\n   }\n\n   return straightThroughStringTask(commands);\n}\n\nexport function updateSubModuleTask(customArgs: string[]): StringTask<string> {\n   return subModuleTask(['update', ...customArgs]);\n}\n", "import { TagResult } from '../../../typings';\n\nexport class TagList implements TagResult {\n   constructor(public readonly all: string[], public readonly latest: string | undefined) {}\n}\n\nexport const parseTagList = function (data: string, customSort = false) {\n   const tags = data.split('\\n').map(trimmed).filter(Boolean);\n\n   if (!customSort) {\n      tags.sort(function (tagA, tagB) {\n         const partsA = tagA.split('.');\n         const partsB = tagB.split('.');\n\n         if (partsA.length === 1 || partsB.length === 1) {\n            return singleSorted(toNumber(partsA[0]), toNumber(partsB[0]));\n         }\n\n         for (let i = 0, l = Math.max(partsA.length, partsB.length); i < l; i++) {\n            const diff = sorted(toNumber(partsA[i]), toNumber(partsB[i]));\n\n            if (diff) {\n               return diff;\n            }\n         }\n\n         return 0;\n      });\n   }\n\n   const latest = customSort ? tags[0] : [...tags].reverse().find((tag) => tag.indexOf('.') >= 0);\n\n   return new TagList(tags, latest);\n};\n\nfunction singleSorted(a: number, b: number): number {\n   const aIsNum = isNaN(a);\n   const bIsNum = isNaN(b);\n\n   if (aIsNum !== bIsNum) {\n      return aIsNum ? 1 : -1;\n   }\n\n   return aIsNum ? sorted(a, b) : 0;\n}\n\nfunction sorted(a: number, b: number) {\n   return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction trimmed(input: string) {\n   return input.trim();\n}\n\nfunction toNumber(input: string | undefined) {\n   if (typeof input === 'string') {\n      return parseInt(input.replace(/^\\D+/g, ''), 10) || 0;\n   }\n\n   return 0;\n}\n", "import { TagResult } from '../../../typings';\nimport { parseTagList } from '../responses/TagList';\nimport { StringTask } from '../types';\n\n/**\n * Task used by `git.tags`\n */\nexport function tagListTask(customArgs: string[] = []): StringTask<TagResult> {\n   const hasCustomSort = customArgs.some((option) => /^--sort=/.test(option));\n\n   return {\n      format: 'utf-8',\n      commands: ['tag', '-l', ...customArgs],\n      parser(text: string) {\n         return parseTagList(text, hasCustomSort);\n      },\n   };\n}\n\n/**\n * Task used by `git.addTag`\n */\nexport function addTagTask(name: string): StringTask<{ name: string }> {\n   return {\n      format: 'utf-8',\n      commands: ['tag', name],\n      parser() {\n         return { name };\n      },\n   };\n}\n\n/**\n * Task used by `git.addTag`\n */\nexport function addAnnotatedTagTask(\n   name: string,\n   tagMessage: string\n): StringTask<{ name: string }> {\n   return {\n      format: 'utf-8',\n      commands: ['tag', '-a', '-m', tagMessage, name],\n      parser() {\n         return { name };\n      },\n   };\n}\n", "const { GitExecutor } = require('./lib/runners/git-executor');\nconst { SimpleGitApi } = require('./lib/simple-git-api');\n\nconst { Scheduler } = require('./lib/runners/scheduler');\nconst { configurationErrorTask } = require('./lib/tasks/task');\nconst {\n   asArray,\n   filterArray,\n   filterPrimitives,\n   filterString,\n   filterStringOrStringArray,\n   filterType,\n   getTrailingOptions,\n   trailingFunctionArgument,\n   trailingOptionsArgument,\n} = require('./lib/utils');\nconst { applyPatchTask } = require('./lib/tasks/apply-patch');\nconst {\n   branchTask,\n   branchLocalTask,\n   deleteBranchesTask,\n   deleteBranchTask,\n} = require('./lib/tasks/branch');\nconst { checkIgnoreTask } = require('./lib/tasks/check-ignore');\nconst { checkIsRepoTask } = require('./lib/tasks/check-is-repo');\nconst { cloneTask, cloneMirrorTask } = require('./lib/tasks/clone');\nconst { cleanWithOptionsTask, isCleanOptionsArray } = require('./lib/tasks/clean');\nconst { diffSummaryTask } = require('./lib/tasks/diff');\nconst { fetchTask } = require('./lib/tasks/fetch');\nconst { moveTask } = require('./lib/tasks/move');\nconst { pullTask } = require('./lib/tasks/pull');\nconst { pushTagsTask } = require('./lib/tasks/push');\nconst {\n   addRemoteTask,\n   getRemotesTask,\n   listRemotesTask,\n   remoteTask,\n   removeRemoteTask,\n} = require('./lib/tasks/remote');\nconst { getResetMode, resetTask } = require('./lib/tasks/reset');\nconst { stashListTask } = require('./lib/tasks/stash-list');\nconst {\n   addSubModuleTask,\n   initSubModuleTask,\n   subModuleTask,\n   updateSubModuleTask,\n} = require('./lib/tasks/sub-module');\nconst { addAnnotatedTagTask, addTagTask, tagListTask } = require('./lib/tasks/tag');\nconst { straightThroughBufferTask, straightThroughStringTask } = require('./lib/tasks/task');\n\nfunction Git(options, plugins) {\n   this._executor = new GitExecutor(\n      options.binary,\n      options.baseDir,\n      new Scheduler(options.maxConcurrentProcesses),\n      plugins\n   );\n\n   this._trimmed = options.trimmed;\n}\n\n(Git.prototype = Object.create(SimpleGitApi.prototype)).constructor = Git;\n\n/**\n * Sets the path to a custom git binary, should either be `git` when there is an installation of git available on\n * the system path, or a fully qualified path to the executable.\n *\n * @param {string} command\n * @returns {Git}\n */\nGit.prototype.customBinary = function (command) {\n   this._executor.binary = command;\n   return this;\n};\n\n/**\n * Sets an environment variable for the spawned child process, either supply both a name and value as strings or\n * a single object to entirely replace the current environment variables.\n *\n * @param {string|Object} name\n * @param {string} [value]\n * @returns {Git}\n */\nGit.prototype.env = function (name, value) {\n   if (arguments.length === 1 && typeof name === 'object') {\n      this._executor.env = name;\n   } else {\n      (this._executor.env = this._executor.env || {})[name] = value;\n   }\n\n   return this;\n};\n\n/**\n * List the stash(s) of the local repo\n */\nGit.prototype.stashList = function (options) {\n   return this._runTask(\n      stashListTask(\n         trailingOptionsArgument(arguments) || {},\n         (filterArray(options) && options) || []\n      ),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nfunction createCloneTask(api, task, repoPath, localPath) {\n   if (typeof repoPath !== 'string') {\n      return configurationErrorTask(`git.${api}() requires a string 'repoPath'`);\n   }\n\n   return task(repoPath, filterType(localPath, filterString), getTrailingOptions(arguments));\n}\n\n/**\n * Clone a git repo\n */\nGit.prototype.clone = function () {\n   return this._runTask(\n      createCloneTask('clone', cloneTask, ...arguments),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Mirror a git repo\n */\nGit.prototype.mirror = function () {\n   return this._runTask(\n      createCloneTask('mirror', cloneMirrorTask, ...arguments),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Moves one or more files to a new destination.\n *\n * @see https://git-scm.com/docs/git-mv\n *\n * @param {string|string[]} from\n * @param {string} to\n */\nGit.prototype.mv = function (from, to) {\n   return this._runTask(moveTask(from, to), trailingFunctionArgument(arguments));\n};\n\n/**\n * Internally uses pull and tags to get the list of tags then checks out the latest tag.\n *\n * @param {Function} [then]\n */\nGit.prototype.checkoutLatestTag = function (then) {\n   var git = this;\n   return this.pull(function () {\n      git.tags(function (err, tags) {\n         git.checkout(tags.latest, then);\n      });\n   });\n};\n\n/**\n * Pull the updated contents of the current repo\n */\nGit.prototype.pull = function (remote, branch, options, then) {\n   return this._runTask(\n      pullTask(\n         filterType(remote, filterString),\n         filterType(branch, filterString),\n         getTrailingOptions(arguments)\n      ),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Fetch the updated contents of the current repo.\n *\n * @example\n *   .fetch('upstream', 'master') // fetches from master on remote named upstream\n *   .fetch(function () {}) // runs fetch against default remote and branch and calls function\n *\n * @param {string} [remote]\n * @param {string} [branch]\n */\nGit.prototype.fetch = function (remote, branch) {\n   return this._runTask(\n      fetchTask(\n         filterType(remote, filterString),\n         filterType(branch, filterString),\n         getTrailingOptions(arguments)\n      ),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Disables/enables the use of the console for printing warnings and errors, by default messages are not shown in\n * a production environment.\n *\n * @param {boolean} silence\n * @returns {Git}\n */\nGit.prototype.silent = function (silence) {\n   console.warn(\n      'simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3'\n   );\n   return this;\n};\n\n/**\n * List all tags. When using git 2.7.0 or above, include an options object with `\"--sort\": \"property-name\"` to\n * sort the tags by that property instead of using the default semantic versioning sort.\n *\n * Note, supplying this option when it is not supported by your Git version will cause the operation to fail.\n *\n * @param {Object} [options]\n * @param {Function} [then]\n */\nGit.prototype.tags = function (options, then) {\n   return this._runTask(\n      tagListTask(getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Rebases the current working copy. Options can be supplied either as an array of string parameters\n * to be sent to the `git rebase` command, or a standard options object.\n */\nGit.prototype.rebase = function () {\n   return this._runTask(\n      straightThroughStringTask(['rebase', ...getTrailingOptions(arguments)]),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Reset a repo\n */\nGit.prototype.reset = function (mode) {\n   return this._runTask(\n      resetTask(getResetMode(mode), getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Revert one or more commits in the local working copy\n */\nGit.prototype.revert = function (commit) {\n   const next = trailingFunctionArgument(arguments);\n\n   if (typeof commit !== 'string') {\n      return this._runTask(configurationErrorTask('Commit must be a string'), next);\n   }\n\n   return this._runTask(\n      straightThroughStringTask(['revert', ...getTrailingOptions(arguments, 0, true), commit]),\n      next\n   );\n};\n\n/**\n * Add a lightweight tag to the head of the current branch\n */\nGit.prototype.addTag = function (name) {\n   const task =\n      typeof name === 'string'\n         ? addTagTask(name)\n         : configurationErrorTask('Git.addTag requires a tag name');\n\n   return this._runTask(task, trailingFunctionArgument(arguments));\n};\n\n/**\n * Add an annotated tag to the head of the current branch\n */\nGit.prototype.addAnnotatedTag = function (tagName, tagMessage) {\n   return this._runTask(\n      addAnnotatedTagTask(tagName, tagMessage),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Delete a local branch\n */\nGit.prototype.deleteLocalBranch = function (branchName, forceDelete, then) {\n   return this._runTask(\n      deleteBranchTask(branchName, typeof forceDelete === 'boolean' ? forceDelete : false),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Delete one or more local branches\n */\nGit.prototype.deleteLocalBranches = function (branchNames, forceDelete, then) {\n   return this._runTask(\n      deleteBranchesTask(branchNames, typeof forceDelete === 'boolean' ? forceDelete : false),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * List all branches\n *\n * @param {Object | string[]} [options]\n * @param {Function} [then]\n */\nGit.prototype.branch = function (options, then) {\n   return this._runTask(\n      branchTask(getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Return list of local branches\n *\n * @param {Function} [then]\n */\nGit.prototype.branchLocal = function (then) {\n   return this._runTask(branchLocalTask(), trailingFunctionArgument(arguments));\n};\n\n/**\n * Executes any command against the git binary.\n */\nGit.prototype.raw = function (commands) {\n   const createRestCommands = !Array.isArray(commands);\n   const command = [].slice.call(createRestCommands ? arguments : commands, 0);\n\n   for (let i = 0; i < command.length && createRestCommands; i++) {\n      if (!filterPrimitives(command[i])) {\n         command.splice(i, command.length - i);\n         break;\n      }\n   }\n\n   command.push(...getTrailingOptions(arguments, 0, true));\n\n   var next = trailingFunctionArgument(arguments);\n\n   if (!command.length) {\n      return this._runTask(\n         configurationErrorTask('Raw: must supply one or more command to execute'),\n         next\n      );\n   }\n\n   return this._runTask(straightThroughStringTask(command, this._trimmed), next);\n};\n\nGit.prototype.submoduleAdd = function (repo, path, then) {\n   return this._runTask(addSubModuleTask(repo, path), trailingFunctionArgument(arguments));\n};\n\nGit.prototype.submoduleUpdate = function (args, then) {\n   return this._runTask(\n      updateSubModuleTask(getTrailingOptions(arguments, true)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nGit.prototype.submoduleInit = function (args, then) {\n   return this._runTask(\n      initSubModuleTask(getTrailingOptions(arguments, true)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nGit.prototype.subModule = function (options, then) {\n   return this._runTask(\n      subModuleTask(getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nGit.prototype.listRemote = function () {\n   return this._runTask(\n      listRemotesTask(getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Adds a remote to the list of remotes.\n */\nGit.prototype.addRemote = function (remoteName, remoteRepo, then) {\n   return this._runTask(\n      addRemoteTask(remoteName, remoteRepo, getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Removes an entry by name from the list of remotes.\n */\nGit.prototype.removeRemote = function (remoteName, then) {\n   return this._runTask(removeRemoteTask(remoteName), trailingFunctionArgument(arguments));\n};\n\n/**\n * Gets the currently available remotes, setting the optional verbose argument to true includes additional\n * detail on the remotes themselves.\n */\nGit.prototype.getRemotes = function (verbose, then) {\n   return this._runTask(getRemotesTask(verbose === true), trailingFunctionArgument(arguments));\n};\n\n/**\n * Call any `git remote` function with arguments passed as an array of strings.\n *\n * @param {string[]} options\n * @param {Function} [then]\n */\nGit.prototype.remote = function (options, then) {\n   return this._runTask(\n      remoteTask(getTrailingOptions(arguments)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Call any `git tag` function with arguments passed as an array of strings.\n *\n * @param {string[]} options\n * @param {Function} [then]\n */\nGit.prototype.tag = function (options, then) {\n   const command = getTrailingOptions(arguments);\n\n   if (command[0] !== 'tag') {\n      command.unshift('tag');\n   }\n\n   return this._runTask(straightThroughStringTask(command), trailingFunctionArgument(arguments));\n};\n\n/**\n * Updates repository server info\n *\n * @param {Function} [then]\n */\nGit.prototype.updateServerInfo = function (then) {\n   return this._runTask(\n      straightThroughStringTask(['update-server-info']),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Pushes the current tag changes to a remote which can be either a URL or named remote. When not specified uses the\n * default configured remote spec.\n *\n * @param {string} [remote]\n * @param {Function} [then]\n */\nGit.prototype.pushTags = function (remote, then) {\n   const task = pushTagsTask(\n      { remote: filterType(remote, filterString) },\n      getTrailingOptions(arguments)\n   );\n\n   return this._runTask(task, trailingFunctionArgument(arguments));\n};\n\n/**\n * Removes the named files from source control.\n */\nGit.prototype.rm = function (files) {\n   return this._runTask(\n      straightThroughStringTask(['rm', '-f', ...asArray(files)]),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Removes the named files from source control but keeps them on disk rather than deleting them entirely. To\n * completely remove the files, use `rm`.\n *\n * @param {string|string[]} files\n */\nGit.prototype.rmKeepLocal = function (files) {\n   return this._runTask(\n      straightThroughStringTask(['rm', '--cached', ...asArray(files)]),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Returns a list of objects in a tree based on commit hash. Passing in an object hash returns the object's content,\n * size, and type.\n *\n * Passing \"-p\" will instruct cat-file to determine the object type, and display its formatted contents.\n *\n * @param {string[]} [options]\n * @param {Function} [then]\n */\nGit.prototype.catFile = function (options, then) {\n   return this._catFile('utf-8', arguments);\n};\n\nGit.prototype.binaryCatFile = function () {\n   return this._catFile('buffer', arguments);\n};\n\nGit.prototype._catFile = function (format, args) {\n   var handler = trailingFunctionArgument(args);\n   var command = ['cat-file'];\n   var options = args[0];\n\n   if (typeof options === 'string') {\n      return this._runTask(\n         configurationErrorTask('Git.catFile: options must be supplied as an array of strings'),\n         handler\n      );\n   }\n\n   if (Array.isArray(options)) {\n      command.push.apply(command, options);\n   }\n\n   const task =\n      format === 'buffer' ? straightThroughBufferTask(command) : straightThroughStringTask(command);\n\n   return this._runTask(task, handler);\n};\n\nGit.prototype.diff = function (options, then) {\n   const task = filterString(options)\n      ? configurationErrorTask(\n           'git.diff: supplying options as a single string is no longer supported, switch to an array of strings'\n        )\n      : straightThroughStringTask(['diff', ...getTrailingOptions(arguments)]);\n\n   return this._runTask(task, trailingFunctionArgument(arguments));\n};\n\nGit.prototype.diffSummary = function () {\n   return this._runTask(\n      diffSummaryTask(getTrailingOptions(arguments, 1)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nGit.prototype.applyPatch = function (patches) {\n   const task = !filterStringOrStringArray(patches)\n      ? configurationErrorTask(\n           `git.applyPatch requires one or more string patches as the first argument`\n        )\n      : applyPatchTask(asArray(patches), getTrailingOptions([].slice.call(arguments, 1)));\n\n   return this._runTask(task, trailingFunctionArgument(arguments));\n};\n\nGit.prototype.revparse = function () {\n   const commands = ['rev-parse', ...getTrailingOptions(arguments, true)];\n   return this._runTask(\n      straightThroughStringTask(commands, true),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n * Show various types of objects, for example the file at a certain commit\n *\n * @param {string[]} [options]\n * @param {Function} [then]\n */\nGit.prototype.show = function (options, then) {\n   return this._runTask(\n      straightThroughStringTask(['show', ...getTrailingOptions(arguments, 1)]),\n      trailingFunctionArgument(arguments)\n   );\n};\n\n/**\n */\nGit.prototype.clean = function (mode, options, then) {\n   const usingCleanOptionsArray = isCleanOptionsArray(mode);\n   const cleanMode =\n      (usingCleanOptionsArray && mode.join('')) || filterType(mode, filterString) || '';\n   const customArgs = getTrailingOptions([].slice.call(arguments, usingCleanOptionsArray ? 1 : 0));\n\n   return this._runTask(\n      cleanWithOptionsTask(cleanMode, customArgs),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nGit.prototype.exec = function (then) {\n   const task = {\n      commands: [],\n      format: 'utf-8',\n      parser() {\n         if (typeof then === 'function') {\n            then();\n         }\n      },\n   };\n\n   return this._runTask(task);\n};\n\n/**\n * Clears the queue of pending commands and returns the wrapper instance for chaining.\n *\n * @returns {Git}\n */\nGit.prototype.clearQueue = function () {\n   // TODO:\n   // this._executor.clear();\n   return this;\n};\n\n/**\n * Check if a pathname or pathnames are excluded by .gitignore\n *\n * @param {string|string[]} pathnames\n * @param {Function} [then]\n */\nGit.prototype.checkIgnore = function (pathnames, then) {\n   return this._runTask(\n      checkIgnoreTask(asArray(filterType(pathnames, filterStringOrStringArray, []))),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nGit.prototype.checkIsRepo = function (checkType, then) {\n   return this._runTask(\n      checkIsRepoTask(filterType(checkType, filterString)),\n      trailingFunctionArgument(arguments)\n   );\n};\n\nmodule.exports = Git;\n", "import { GitError } from './git-error';\nimport { SimpleGitOptions } from '../types';\n\n/**\n * The `GitConstructError` is thrown when an error occurs in the constructor\n * of the `simple-git` instance itself. Most commonly as a result of using\n * a `baseDir` option that points to a folder that either does not exist,\n * or cannot be read by the user the node script is running as.\n *\n * Check the `.message` property for more detail including the properties\n * passed to the constructor.\n */\nexport class GitConstructError extends GitError {\n   constructor(public readonly config: SimpleGitOptions, message: string) {\n      super(undefined, message);\n   }\n}\n", "import { GitConstructError } from './errors/git-construct-error';\nimport { GitError } from './errors/git-error';\nimport { GitPluginError } from './errors/git-plugin-error';\nimport { GitResponseError } from './errors/git-response-error';\nimport { TaskConfigurationError } from './errors/task-configuration-error';\nimport { CheckRepoActions } from './tasks/check-is-repo';\nimport { CleanOptions } from './tasks/clean';\nimport { GitConfigScope } from './tasks/config';\nimport { grepQueryBuilder } from './tasks/grep';\nimport { ResetMode } from './tasks/reset';\n\nexport {\n   CheckRepoActions,\n   CleanOptions,\n   GitConfigScope,\n   GitConstructError,\n   GitError,\n   GitPluginError,\n   GitResponseError,\n   ResetMode,\n   TaskConfigurationError,\n   grepQueryBuilder,\n};\n", "import { SimpleGitOptions, SimpleGitTask } from '../types';\nimport { GitError } from './git-error';\n\nexport class GitPluginError extends GitError {\n   constructor(\n      public task?: SimpleGitTask<any>,\n      public readonly plugin?: keyof SimpleGitOptions,\n      message?: string\n   ) {\n      super(task, message);\n      Object.setPrototypeOf(this, new.target.prototype);\n   }\n}\n", "import { SimpleGitOptions } from '../types';\nimport { SimpleGitPlugin } from './simple-git-plugin';\nimport { GitPluginError } from '../errors/git-plugin-error';\n\nexport function abortPlugin(signal: SimpleGitOptions['abort']) {\n   if (!signal) {\n      return;\n   }\n\n   const onSpawnAfter: SimpleGitPlugin<'spawn.after'> = {\n      type: 'spawn.after',\n      action(_data, context) {\n         function kill() {\n            context.kill(new GitPluginError(undefined, 'abort', 'Abort signal received'));\n         }\n\n         signal.addEventListener('abort', kill);\n\n         context.spawned.on('close', () => signal.removeEventListener('abort', kill));\n      },\n   };\n\n   const onSpawnBefore: SimpleGitPlugin<'spawn.before'> = {\n      type: 'spawn.before',\n      action(_data, context) {\n         if (signal.aborted) {\n            context.kill(new GitPluginError(undefined, 'abort', 'Abort already signaled'));\n         }\n      },\n   };\n\n   return [onSpawnBefore, onSpawnAfter];\n}\n", "import type { SimpleGitPlugin } from './simple-git-plugin';\n\nimport { GitPluginError } from '../errors/git-plugin-error';\nimport type { SimpleGitPluginConfig } from '../types';\n\nfunction isConfigSwitch(arg: string | unknown) {\n   return typeof arg === 'string' && arg.trim().toLowerCase() === '-c';\n}\n\nfunction preventProtocolOverride(arg: string, next: string) {\n   if (!isConfigSwitch(arg)) {\n      return;\n   }\n\n   if (!/^\\s*protocol(.[a-z]+)?.allow/.test(next)) {\n      return;\n   }\n\n   throw new GitPluginError(\n      undefined,\n      'unsafe',\n      'Configuring protocol.allow is not permitted without enabling allowUnsafeExtProtocol'\n   );\n}\n\nfunction preventUploadPack(arg: string, method: string) {\n   if (/^\\s*--(upload|receive)-pack/.test(arg)) {\n      throw new GitPluginError(\n         undefined,\n         'unsafe',\n         `Use of --upload-pack or --receive-pack is not permitted without enabling allowUnsafePack`\n      );\n   }\n\n   if (method === 'clone' && /^\\s*-u\\b/.test(arg)) {\n      throw new GitPluginError(\n         undefined,\n         'unsafe',\n         `Use of clone with option -u is not permitted without enabling allowUnsafePack`\n      );\n   }\n\n   if (method === 'push' && /^\\s*--exec\\b/.test(arg)) {\n      throw new GitPluginError(\n         undefined,\n         'unsafe',\n         `Use of push with option --exec is not permitted without enabling allowUnsafePack`\n      );\n   }\n}\n\nexport function blockUnsafeOperationsPlugin({\n   allowUnsafeProtocolOverride = false,\n   allowUnsafePack = false,\n}: SimpleGitPluginConfig['unsafe'] = {}): SimpleGitPlugin<'spawn.args'> {\n   return {\n      type: 'spawn.args',\n      action(args, context) {\n         args.forEach((current, index) => {\n            const next = index < args.length ? args[index + 1] : '';\n\n            allowUnsafeProtocolOverride || preventProtocolOverride(current, next);\n            allowUnsafePack || preventUploadPack(current, context.method);\n         });\n\n         return args;\n      },\n   };\n}\n", "import { prefixedArray } from '../utils';\nimport { SimpleGitPlugin } from './simple-git-plugin';\n\nexport function commandConfigPrefixingPlugin(\n   configuration: string[]\n): SimpleGitPlugin<'spawn.args'> {\n   const prefix = prefixedArray(configuration, '-c');\n\n   return {\n      type: 'spawn.args',\n      action(data) {\n         return [...prefix, ...data];\n      },\n   };\n}\n", "import { deferred, DeferredPromise } from '@kwsites/promise-deferred';\nimport { SimpleGitPluginConfig } from '../types';\nimport { delay } from '../utils';\nimport { SimpleGitPlugin } from './simple-git-plugin';\n\nconst never = deferred().promise;\n\nexport function completionDetectionPlugin({\n   onClose = true,\n   onExit = 50,\n}: SimpleGitPluginConfig['completion'] = {}): SimpleGitPlugin<'spawn.after'> {\n   function createEvents() {\n      let exitCode = -1;\n      const events = {\n         close: deferred(),\n         closeTimeout: deferred(),\n         exit: deferred(),\n         exitTimeout: deferred(),\n      };\n\n      const result = Promise.race([\n         onClose === false ? never : events.closeTimeout.promise,\n         onExit === false ? never : events.exitTimeout.promise,\n      ]);\n\n      configureTimeout(onClose, events.close, events.closeTimeout);\n      configureTimeout(onExit, events.exit, events.exitTimeout);\n\n      return {\n         close(code: number) {\n            exitCode = code;\n            events.close.done();\n         },\n         exit(code: number) {\n            exitCode = code;\n            events.exit.done();\n         },\n         get exitCode() {\n            return exitCode;\n         },\n         result,\n      };\n   }\n\n   function configureTimeout(\n      flag: boolean | number,\n      event: DeferredPromise<void>,\n      timeout: DeferredPromise<void>\n   ) {\n      if (flag === false) {\n         return;\n      }\n\n      (flag === true ? event.promise : event.promise.then(() => delay(flag))).then(timeout.done);\n   }\n\n   return {\n      type: 'spawn.after',\n      async action(_data, { spawned, close }) {\n         const events = createEvents();\n\n         let deferClose = true;\n         let quickClose = () => void (deferClose = false);\n\n         spawned.stdout?.on('data', quickClose);\n         spawned.stderr?.on('data', quickClose);\n         spawned.on('error', quickClose);\n\n         spawned.on('close', (code: number) => events.close(code));\n         spawned.on('exit', (code: number) => events.exit(code));\n\n         try {\n            await events.result;\n            if (deferClose) {\n               await delay(50);\n            }\n            close(events.exitCode);\n         } catch (err) {\n            close(events.exitCode, err as Error);\n         }\n      },\n   };\n}\n", "import { GitError } from '../errors/git-error';\nimport { GitExecutorResult, SimpleGitPluginConfig } from '../types';\nimport { SimpleGitPlugin } from './simple-git-plugin';\n\ntype TaskResult = Omit<GitExecutorResult, 'rejection'>;\n\nfunction isTaskError(result: TaskResult) {\n   return !!(result.exitCode && result.stdErr.length);\n}\n\nfunction getErrorMessage(result: TaskResult) {\n   return Buffer.concat([...result.stdOut, ...result.stdErr]);\n}\n\nexport function errorDetectionHandler(\n   overwrite = false,\n   isError = isTaskError,\n   errorMessage: (result: TaskResult) => Buffer | Error = getErrorMessage\n) {\n   return (error: Buffer | Error | undefined, result: TaskResult) => {\n      if ((!overwrite && error) || !isError(result)) {\n         return error;\n      }\n\n      return errorMessage(result);\n   };\n}\n\nexport function errorDetectionPlugin(\n   config: SimpleGitPluginConfig['errors']\n): SimpleGitPlugin<'task.error'> {\n   return {\n      type: 'task.error',\n      action(data, context) {\n         const error = config(data.error, {\n            stdErr: context.stdErr,\n            stdOut: context.stdOut,\n            exitCode: context.exitCode,\n         });\n\n         if (Buffer.isBuffer(error)) {\n            return { error: new GitError(undefined, error.toString('utf-8')) };\n         }\n\n         return {\n            error,\n         };\n      },\n   };\n}\n", "import { SimpleGitPlugin, SimpleGitPluginType, SimpleGitPluginTypes } from './simple-git-plugin';\nimport { append, asArray } from '../utils';\n\nexport class PluginStore {\n   private plugins: Set<SimpleGitPlugin<SimpleGitPluginType>> = new Set();\n\n   public add<T extends SimpleGitPluginType>(\n      plugin: void | SimpleGitPlugin<T> | SimpleGitPlugin<T>[]\n   ) {\n      const plugins: SimpleGitPlugin<T>[] = [];\n\n      asArray(plugin).forEach((plugin) => plugin && this.plugins.add(append(plugins, plugin)));\n\n      return () => {\n         plugins.forEach((plugin) => this.plugins.delete(plugin));\n      };\n   }\n\n   public exec<T extends SimpleGitPluginType>(\n      type: T,\n      data: SimpleGitPluginTypes[T]['data'],\n      context: SimpleGitPluginTypes[T]['context']\n   ): typeof data {\n      let output = data;\n      const contextual = Object.freeze(Object.create(context));\n\n      for (const plugin of this.plugins) {\n         if (plugin.type === type) {\n            output = plugin.action(output, contextual);\n         }\n      }\n\n      return output;\n   }\n}\n", "import { SimpleGitOptions } from '../types';\nimport { asNumber, including } from '../utils';\n\nimport { SimpleGitPlugin } from './simple-git-plugin';\n\nexport function progressMonitorPlugin(progress: Exclude<SimpleGitOptions['progress'], void>) {\n   const progressCommand = '--progress';\n   const progressMethods = ['checkout', 'clone', 'fetch', 'pull', 'push'];\n\n   const onProgress: SimpleGitPlugin<'spawn.after'> = {\n      type: 'spawn.after',\n      action(_data, context) {\n         if (!context.commands.includes(progressCommand)) {\n            return;\n         }\n\n         context.spawned.stderr?.on('data', (chunk: Buffer) => {\n            const message = /^([\\s\\S]+?):\\s*(\\d+)% \\((\\d+)\\/(\\d+)\\)/.exec(chunk.toString('utf8'));\n            if (!message) {\n               return;\n            }\n\n            progress({\n               method: context.method,\n               stage: progressEventStage(message[1]),\n               progress: asNumber(message[2]),\n               processed: asNumber(message[3]),\n               total: asNumber(message[4]),\n            });\n         });\n      },\n   };\n\n   const onArgs: SimpleGitPlugin<'spawn.args'> = {\n      type: 'spawn.args',\n      action(args, context) {\n         if (!progressMethods.includes(context.method)) {\n            return args;\n         }\n\n         return including(args, progressCommand);\n      },\n   };\n\n   return [onArgs, onProgress];\n}\n\nfunction progressEventStage(input: string) {\n   return String(input.toLowerCase().split(' ', 1)) || 'unknown';\n}\n", "import { SpawnOptions } from 'child_process';\nimport { pick } from '../utils';\nimport { SimpleGitPlugin } from './simple-git-plugin';\n\nexport function spawnOptionsPlugin(\n   spawnOptions: Partial<SpawnOptions>\n): SimpleGitPlugin<'spawn.options'> {\n   const options = pick(spawnOptions, ['uid', 'gid']);\n\n   return {\n      type: 'spawn.options',\n      action(data) {\n         return { ...options, ...data };\n      },\n   };\n}\n", "import type { SimpleGitPlugin } from './simple-git-plugin';\n\nimport type { SimpleGitOptions } from '../types';\nimport { GitPluginError } from '../errors/git-plugin-error';\n\nexport function timeoutPlugin({\n   block,\n}: Exclude<SimpleGitOptions['timeout'], undefined>): SimpleGitPlugin<'spawn.after'> | void {\n   if (block > 0) {\n      return {\n         type: 'spawn.after',\n         action(_data, context) {\n            let timeout: NodeJS.Timeout;\n\n            function wait() {\n               timeout && clearTimeout(timeout);\n               timeout = setTimeout(kill, block);\n            }\n\n            function stop() {\n               context.spawned.stdout?.off('data', wait);\n               context.spawned.stderr?.off('data', wait);\n               context.spawned.off('exit', stop);\n               context.spawned.off('close', stop);\n               timeout && clearTimeout(timeout);\n            }\n\n            function kill() {\n               stop();\n               context.kill(new GitPluginError(undefined, 'timeout', `block timeout reached`));\n            }\n\n            context.spawned.stdout?.on('data', wait);\n            context.spawned.stderr?.on('data', wait);\n            context.spawned.on('exit', stop);\n            context.spawned.on('close', stop);\n\n            wait();\n         },\n      };\n   }\n}\n", "import { SimpleGitFactory } from '../../typings';\n\nimport * as api from './api';\nimport {\n   abortPlugin,\n   blockUnsafeOperationsPlugin,\n   commandConfigPrefixingPlugin,\n   completionDetectionPlugin,\n   errorDetectionHandler,\n   errorDetectionPlugin,\n   PluginStore,\n   progressMonitorPlugin,\n   spawnOptionsPlugin,\n   timeoutPlugin,\n} from './plugins';\nimport { createInstanceConfig, folderExists } from './utils';\nimport { SimpleGitOptions } from './types';\n\nconst Git = require('../git');\n\n/**\n * Adds the necessary properties to the supplied object to enable it for use as\n * the default export of a module.\n *\n * Eg: `module.exports = esModuleFactory({ something () {} })`\n */\nexport function esModuleFactory<T>(defaultExport: T) {\n   return Object.defineProperties(defaultExport, {\n      __esModule: { value: true },\n      default: { value: defaultExport },\n   }) as T & { __esModule: true; default: T };\n}\n\nexport function gitExportFactory(factory: SimpleGitFactory) {\n   return Object.assign(factory.bind(null), api);\n}\n\nexport function gitInstanceFactory(\n   baseDir?: string | Partial<SimpleGitOptions>,\n   options?: Partial<SimpleGitOptions>\n) {\n   const plugins = new PluginStore();\n   const config = createInstanceConfig(\n      (baseDir && (typeof baseDir === 'string' ? { baseDir } : baseDir)) || {},\n      options\n   );\n\n   if (!folderExists(config.baseDir)) {\n      throw new api.GitConstructError(\n         config,\n         `Cannot use simple-git on a directory that does not exist`\n      );\n   }\n\n   if (Array.isArray(config.config)) {\n      plugins.add(commandConfigPrefixingPlugin(config.config));\n   }\n\n   plugins.add(blockUnsafeOperationsPlugin(config.unsafe));\n   plugins.add(completionDetectionPlugin(config.completion));\n   config.abort && plugins.add(abortPlugin(config.abort));\n   config.progress && plugins.add(progressMonitorPlugin(config.progress));\n   config.timeout && plugins.add(timeoutPlugin(config.timeout));\n   config.spawnOptions && plugins.add(spawnOptionsPlugin(config.spawnOptions));\n\n   plugins.add(errorDetectionPlugin(errorDetectionHandler(true)));\n   config.errors && plugins.add(errorDetectionPlugin(config.errors));\n\n   return new Git(config, plugins);\n}\n", "import { SimpleGit, SimpleGitOptions } from '../../../typings';\n\nimport { GitResponseError } from '../errors/git-response-error';\nimport { gitInstanceFactory } from '../git-factory';\nimport { SimpleGitTaskCallback } from '../types';\n\nconst functionNamesBuilderApi = ['customBinary', 'env', 'outputHandler', 'silent'];\n\nconst functionNamesPromiseApi = [\n   'add',\n   'addAnnotatedTag',\n   'addConfig',\n   'addRemote',\n   'addTag',\n   'applyPatch',\n   'binaryCatFile',\n   'branch',\n   'branchLocal',\n   'catFile',\n   'checkIgnore',\n   'checkIsRepo',\n   'checkout',\n   'checkoutBranch',\n   'checkoutLatestTag',\n   'checkoutLocalBranch',\n   'clean',\n   'clone',\n   'commit',\n   'cwd',\n   'deleteLocalBranch',\n   'deleteLocalBranches',\n   'diff',\n   'diffSummary',\n   'exec',\n   'fetch',\n   'getRemotes',\n   'init',\n   'listConfig',\n   'listRemote',\n   'log',\n   'merge',\n   'mergeFromTo',\n   'mirror',\n   'mv',\n   'pull',\n   'push',\n   'pushTags',\n   'raw',\n   'rebase',\n   'remote',\n   'removeRemote',\n   'reset',\n   'revert',\n   'revparse',\n   'rm',\n   'rmKeepLocal',\n   'show',\n   'stash',\n   'stashList',\n   'status',\n   'subModule',\n   'submoduleAdd',\n   'submoduleInit',\n   'submoduleUpdate',\n   'tag',\n   'tags',\n   'updateServerInfo',\n];\n\nexport function gitP(\n   ...args: [] | [string] | [Partial<SimpleGitOptions>] | [string, Partial<SimpleGitOptions>]\n): SimpleGit {\n   let git: any;\n\n   let chain = Promise.resolve();\n\n   try {\n      git = gitInstanceFactory(...args);\n   } catch (e) {\n      chain = Promise.reject(e);\n   }\n\n   function builderReturn() {\n      return promiseApi;\n   }\n\n   function chainReturn() {\n      return chain;\n   }\n\n   const promiseApi = [...functionNamesBuilderApi, ...functionNamesPromiseApi].reduce(\n      (api: any, name: string) => {\n         const isAsync = functionNamesPromiseApi.includes(name);\n\n         const valid = isAsync ? asyncWrapper(name, git) : syncWrapper(name, git, api);\n         const alternative = isAsync ? chainReturn : builderReturn;\n\n         Object.defineProperty(api, name, {\n            enumerable: false,\n            configurable: false,\n            value: git ? valid : alternative,\n         });\n\n         return api;\n      },\n      {}\n   );\n\n   return promiseApi as SimpleGit;\n\n   function asyncWrapper(fn: string, git: any): (...args: any[]) => Promise<any> {\n      return function (...args: any[]) {\n         if (typeof args[args.length] === 'function') {\n            throw new TypeError(\n               'Promise interface requires that handlers are not supplied inline, ' +\n                  'trailing function not allowed in call to ' +\n                  fn\n            );\n         }\n\n         return chain.then(function () {\n            return new Promise(function (resolve, reject) {\n               const callback: SimpleGitTaskCallback = (err: Error | null, result?: any) => {\n                  if (err) {\n                     return reject(toError(err));\n                  }\n\n                  resolve(result);\n               };\n               args.push(callback);\n\n               git[fn].apply(git, args);\n            });\n         });\n      };\n   }\n\n   function syncWrapper(fn: string, git: any, api: SimpleGit) {\n      return (...args: any[]) => {\n         git[fn](...args);\n\n         return api;\n      };\n   }\n}\n\nfunction toError(error: Error | string | any): Error {\n   if (error instanceof Error) {\n      return error;\n   }\n\n   if (typeof error === 'string') {\n      return new Error(error);\n   }\n\n   return new GitResponseError(error);\n}\n", "import { gitInstanceFactory } from './lib/git-factory';\n\nexport { gitP } from './lib/runners/promise-wrapped';\nexport * from './lib/api';\n\nexport const simpleGit = gitInstanceFactory;\n\nexport default gitInstanceFactory;\n", "import * as vscode from 'vscode';\nimport { executeAfkCheck, executeLiveCheck } from '../session/sessionUpdate';\n\n\n\n//activateAfkWebview is called upon extension start and registers necessary commands for afk functionality\nexport function activateAfkWebView(context: vscode.ExtensionContext, cfg: any, logger: any) {\n\t//register afk provider by calling class constructor\n    const provider = new AFKWebViewprovider(context.extensionUri, cfg, logger);\n\t//push and regsitser necessary commands\n\tcontext.subscriptions.push(\n\t\tvscode.window.registerWebviewViewProvider(AFKWebViewprovider.viewType, provider));\n\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand('gigo.enableAFK', () => {\n\t\t\tprovider.enableAFK();\n\t\t}));\n\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand('gigo.disableAFK', () => {\n\t\t\tprovider.disableAFK();\n\t\t}));\n}\n\n//afk webview provider has basic functions for handling afk system\nclass AFKWebViewprovider implements vscode.WebviewViewProvider {\n\n    public static readonly viewType = 'gigo.afkView';\n\n    private _view?: vscode.WebviewView;\n    public afkActive?: boolean = false;\n\tpublic cfg: any;\n\tpublic logger: any;\n\n\tconstructor(\n\t\tprivate readonly _extensionUri: vscode.Uri,\n\t\tcfg: any,\n\t\tsysLogger: any\n\t) { \n\t\tthis.cfg = cfg;\n\t\tthis.logger = sysLogger;\n    \n        // load configuration value for afk from\n        let gigoConfig = vscode.workspace.getConfiguration(\"gigo\");\n\t\tconsole.log(`currentAfkValue1: ${this.afkActive}`);\n        //this.afkActive = gigoConfig.get(\"afk.on\");\n\t\tconsole.log(`currentAfkValue2: ${this.afkActive}`);\n\n        //this.disableAFK();\n    }\n\n\n\t//resolveWebviewView handles editor callback functions and basic html render\n\tpublic resolveWebviewView(\n\t\twebviewView: vscode.WebviewView,\n\t\tcontext: vscode.WebviewViewResolveContext,\n\t\t_token: vscode.CancellationToken,\n\t) {\n\t\tthis._view = webviewView;\n\t\tthis._view.webview.postMessage({type: \"hello\", text: `currentAfkValue: ${this.afkActive}`});\n\t\tconsole.log(`currentAfkValue: ${this.afkActive}`);\n\t\tthis._view.webview.html = this._getAfkDisabledHtml(this._view.webview);\n\n\t\tconsole.log(this._view.webview.html);\n\n\t\t//setup webview\n\t\twebviewView.webview.options = {\n\t\t\t// Allow scripts in the webview\n\t\t\tenableScripts: true,\n\n\t\t\tlocalResourceRoots: [\n\t\t\t\tthis._extensionUri\n\t\t\t]\n\t\t};\n\n\n\t\t//render html from getHtmlForWebview function\n\t\twebviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n\t\t//callback for registered commands\n\t\twebviewView.webview.onDidReceiveMessage(data => {\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'enableAFK':\n\t\t\t\t\t//call enable afk function when enableAFK command is called\n                    this.enableAFK();\n                    break;\n                case 'disableAFK':\n\t\t\t\t\t//call disable afk function when disableAFK command is called\n                    this.disableAFK();\n                    break;\n                case \"hello\":\n\t\t\t\t\t//display message when hello command is called\n                    vscode.window.showInformationMessage(data.text);\n                    return;\n\t\t\t}\n\t\t});\n\t}\n\n\t//addColor sends color message to messsage handler\n\tpublic addColor() {\n\t\tif (this._view) {\n\t\t\tthis._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n\t\t\tthis._view.webview.postMessage({ type: 'addColor' });\n\t\t}\n\t}\n\n\t//clearColors sends color message to clear colors to message handler\n\tpublic clearColors() {\n\t\tif (this._view) {\n\t\t\tthis._view.webview.postMessage({ type: 'clearColors' });\n\t\t}\n\t}\n\n\t//enableAFK calls executeAfkCheck and rerenders the page accordingly\n    public enableAFK() {\n\t\t//setup afk variables\n\t\tlet afkActiveStart = this.afkActive;\n        this.afkActive = true;\n\n\t\t//retrieve gigo config\n        let gigoConfig = vscode.workspace.getConfiguration(\"gigo\");\n        gigoConfig.update(\"afk.on\", true);\n\n\t\t//ensure that webview exists and render html\n\t\tif (this._view) {\n\t\t\tthis._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n            this._view.webview.html = this._getHtmlForWebview(this._view.webview);\n\t\t}\n\n\t\t//if afk is not currently active on start call executeAfkCheck\n\t\tif (!afkActiveStart) {\n\n\t\t\t//executeAfkCheck sets current status to afk and retrieves the timestamp of when afk expires\n\t\t\texecuteAfkCheck(\n\t\t\t\tthis.cfg.workspace_id_string,\n\t\t\t\tthis.cfg.secret,\n\t\t\t\t\"60\"\n\t\t\t).then((exp) => {\n\t\t\t\tthis.logger.info.appendLine(`AFK Expires: ${exp} `);\n\t\t\t\tconsole.log(`AFK Expires: ${exp}`);\n\t\t\t\tif (exp > 0){\n\t\t\t\t\t//ensures that webview exists and then sends afk timestamp to callback messenger\n\t\t\t\t\tif (this._view) {\n\t\t\t\t\t\tthis._view.webview.postMessage({ type: \"setExpirationAFK\", value: exp });\n\t\t\t\t\t\t//display afk activated message\n\t\t\t\t\t\tvscode.window.showInformationMessage(\"GIGO AFK Session Activated\");\n\t\t\t\t\t\tthis.logger.info.appendLine(`Afk: Result pushed to afk session: ${exp}.`);\n\t\t\t\t\t}\n\t\t\t\t\t//vscode.window.showInformationMessage(`expiration: ${exp}`);\n\t\t\t\t}else{\n\t\t\t\t\tvscode.window.showInformationMessage(\"GIGO AFK Failed: PLEASE CHECK YOUR INTERNET CONNECTION AND TRY AGAIN\");\n\t\t\t\t\tthis.logger.error.appendLine(`Afk Failed: Result is empty or connection could not be resolved.`);\n\t\t\t\t\tthis.disableAFK();\n\t\t\t\t}\n\t\t\t\n\t\t\t});\n\n\t\t\t\n\t\t}\n\t}\n\n\t//disabelAFK calls executeLiveCheck and rerenders page accordingly\n\tpublic disableAFK() {\n\t\t//settig up afk variables\n\t\tlet afkActiveStart = this.afkActive;\n\t\tthis.afkActive = false;\n\n\t\t//retrieve gigo config\n\t\tlet gigoConfig = vscode.workspace.getConfiguration(\"gigo\");\n\t\tgigoConfig.update(\"afk.on\", false);\n\n\t\t//ensure that webview exists and then rerender html\n\t\tif (this._view) {\n\t\t\tthis._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n\t\t\tthis._view.webview.html = this._getHtmlForWebview(this._view.webview);\n\t\t}\n\n\t\t//if afk is active then executeLiveCheck\n\t\tif (afkActiveStart){\n\t\t\t//executeLiveCheck stes current timestamp to timestamp retrieved from http\n\t\t\texecuteLiveCheck(this.cfg.workspace_id_string, this.cfg.secret);\n\n\t\t\t//display afk session deactivated\n\t\t\tvscode.window.showInformationMessage(\"GIGO AFK Session Deactivated\");\n\t\t\tthis.logger.info.appendLine(`Afk: Deactivated.`);\n\t\t}\n       \n\t}\n\n\t//_getHtmlForWebview renders afk enbaled and disabled pages\n\tprivate _getHtmlForWebview(webview: vscode.Webview) {\n        if (this.afkActive) {\n            return this._getAfkEnabledHtml(webview);\n        }\n        return this._getAfkDisabledHtml(webview);\n\t}\n\n\n\t//_getAfkDisabledHtml renders page for when afk is disabled\n    private _getAfkDisabledHtml(webview: vscode.Webview) {\n        // Get the local path to main script run in the webview, then convert it to a uri we can use in the webview.\n\t\tconst scriptUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'afk', 'disabled_afk.js'));\n\n\t\t// Do the same for the stylesheet.\n\t\tconst styleResetUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'afk', 'reset_afk.css'));\n\t\tconst styleVSCodeUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'afk', 'vscode_afk.css'));\n\t\tconst styleMainUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'afk', 'main_afk.css'));\n\n\t\t// Use a nonce to only allow a specific script to be run.\n\t\tconst nonce = getNonce();\n\n\t\treturn `<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<!--\n\t\t\t\t\tUse a content security policy to only allow loading styles from our extension directory,\n\t\t\t\t\tand only allow scripts that have a specific nonce.\n\t\t\t\t\t(See the 'webview-sample' extension sample for img-src content security policy examples)\n\t\t\t\t-->\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" default-src * 'unsafe-inline' 'unsafe-eval'; script-src ${webview.cspSource} img-src * data: blob: 'unsafe-inline'; frame-src *; style-src * 'unsafe-inline';>\n\t\t\t\t\n\t\t\t\t<link href=\"${styleResetUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleMainUri}\" rel=\"stylesheet\">\n\t\t\t\t<title>GIGO AFK Session</title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<text>\n                Enable AFK to preserve your workspace for up to an hour without activity.\n\t\t\t\t</text>\n                <br/>\n                <br/>\n\t\t\t\t<button class=\"enable-gigo-afk-button\">Enable AFK</button>\n\t\t\t\t<br/>\n\t\t\t\t<br/>\n\t\t\t\t<text id=\"errors\"></text>\n\t\t\t\t<br/>\n\t\t\t\t<br/>\n\t\t\t\t<div class=\"anim\">\n\t\t\t\t\t<script src=\"https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js\"></script> \n\t\t\t\t\t<lottie-player src=\"https://lottie.host/95676da9-1d6e-489a-bd6b-fdf154eacbbb/ApmRq8HOuu.json\" background=\"transparent\" speed=\"1\" loop autoplay></lottie-player>\n\t\t\t\t</div>\n\t\t\t\t<script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n\t\t\t</body>\n\t\t\t</html>`;\n    }\n\n\t//_getAfkEnabledHtml renders page for when afk is enabled\n    private _getAfkEnabledHtml(webview: vscode.Webview) {\n\t\t// Get the local path to main script run in the webview, then convert it to a uri we can use in the webview.\n\t\tconst scriptUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'afk', 'enabled_afk.js'));\n\n\t\t// Do the same for the stylesheet.\n\t\tconst styleResetUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'afk', 'reset_afk.css'));\n\t\tconst styleVSCodeUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'afk', 'vscode_afk.css'));\n\t\tconst styleMainUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'afk', 'main_afk.css'));\n\n\t\t// Use a nonce to only allow a specific script to be run.\n\t\tconst nonce = getNonce();\n\n\t\treturn `<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<!--\n\t\t\t\t\tUse a content security policy to only allow loading styles from our extension directory,\n\t\t\t\t\tand only allow scripts that have a specific nonce.\n\t\t\t\t\t(See the 'webview-sample' extension sample for img-src content security policy examples)\n\t\t\t\t-->\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" default-src * 'unsafe-inline' 'unsafe-eval'; script-src ${webview.cspSource} img-src * data: blob: 'unsafe-inline'; frame-src *; style-src * 'unsafe-inline';>\n\t\t\t\t\n   \n\t\t\t\t<link href=\"${styleResetUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleMainUri}\" rel=\"stylesheet\">\n\t\t\t\t<title>GIGO AFK Session</title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<text>\n                AFK is currently enabled. You session will be preserved for up to an hour without activity. View the remaining time on your AFK session below.\n\t\t\t\t</text>\n                <br/>\n                <br/>\n                  <h4 class=\"expiration-countdown-title\">\n                    AFK Expires In: \n                  </h4>\n                  <div id=\"expiration-countdown-value\" class=\"expiration-countdown-value\">\n                    Loading...\n                  </div>\n                <br/>\n                <br/>\n\t\t\t\t<button class=\"disable-gigo-afk-button\">Disable AFK</button>\n\t\t\t\t<br/>\n                <br/>\n\t\t\t\t<br/>\n                <br/>\n\t\t\t\t<div class=\"anim\">\n\t\t\t\t\t<script src=\"https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js\"></script> <lottie-player src=\"https://lottie.host/b975a4cd-1395-4b1c-aaa2-9f94f5937f4f/cdJEsmskbY.json\" background=\"transparent\" speed=\".5\" loop autoplay></lottie-player>\n\t\t\t\t</div>\n\t\t\t\t<script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n\t\t\t</body>\n\t\t\t</html>`;\n    }\n}\n\n\n\nfunction getNonce() {\n\tlet text = '';\n\tconst possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\tfor (let i = 0; i < 32; i++) {\n\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\n\t}\n\treturn text;\n}", "import * as vscode from 'vscode';\nimport axios from \"axios\";\n\nexport let userHasBeenActive = false;\nlet nextTimeStamp = (Date.now()/1000) + (10 * 60);\nlet isAFK = false;\nvar logger: any;\n\n            \n\n//activateTimeout is called when the extension is activated\nexport async function activateTimeout(context: vscode.ExtensionContext, cfg: any, sysLogger: any) {\n    logger = sysLogger;\n    \n    // link callbacks for tracking user activity\n    checkUserActivity();\n\n    // retry initial live check every 5 minutes until we hit or timeout 10 minutes later\n    while(true) {\n        //if user is not afk but is active call live check to renew session timer\n        let res = await executeLiveCheck(cfg.workspace_id_string, cfg.secret);\n\n        console.log(`INIT LIVE CHECK COMPLETED: ${nextTimeStamp}`);\n\n        if (res === -1){\n            logger.info.appendLine(\"Session: Disconnected from GIGO servers.\");\n            vscode.window.showInformationMessage(\"We are unable to connect to GIGO servers. Please check your network connection.\");\n            await new Promise(f => setTimeout(f, 5000));\n            continue;\n        }\n\n        // update next timestamp\n        nextTimeStamp = res;\n        break;\n    }\n    \n    //core loop iterates until user is inactive for a set amount of time\n    while(true){\n        //interior loop iterates until a sepcified time is remaining before the use is dtermined to be inactive\n        while(true){\n            //if the user is afk wait 100ms before checking again\n            if (!isAFK){\n                // logger.info.appendLine(\"Session: User is not afk, time remaining: \" + (nextTimeStamp - (Date.now()/1000)));\n                // console.log(\"checking if we go time remaining: \" + (nextTimeStamp - (Date.now()/1000)));\n                //determine time remaining before user is considered inactive\n                let currentTimeRemaining = nextTimeStamp - (Date.now()/1000);\n                //if user has less than or equal to 3 minutes remaining break from loop \n                // if (currentTimeRemaining <= 180){\n                //     break;\n                // }\n                if (currentTimeRemaining <= 180) {\n                    console.log(\"checking activity\")\n                    break;\n                }\n            }\n            \n            //wait 100ms before iterating again\n            await new Promise(f => setTimeout(f, 100));\n        }\n        \n\n        console.log(\"calling renewpopup\");\n        //prompt user that with inactive pop-up and display time remaining before session timeout\n        let isRenewed = (await renewPopup()).valueOf();\n        console.log(`isRenewed: ${isRenewed}`);\n\n        //if the user is not afk and is still inactive terminate the session\n        if (!isRenewed && !isAFK){\n            logger.info.appendLine(\"Session: Session is being terminated due to inactivity.\");\n            vscode.window.showInformationMessage(\"Session is being terminated due to inactivity\");\n            break;\n        }\n        \n        console.log(\"CALLING LIVE CHECK\");\n        logger.info.appendLine(`Session: Calling live check user is afk: ${isAFK}  user is active: ${isRenewed}  time remaining: ${(nextTimeStamp - (Date.now()/1000))/60}`);\n        //if user is not afk but is active call live check to renew session timer\n        let res = await executeLiveCheck(cfg.workspace_id_string, cfg.secret);\n        \n        console.log(`LIVE CHECK COMPLETED: ${nextTimeStamp}`);\n\n        if (res === -1){\n            logger.info.appendLine(\"Session: Disconnected from GIGO servers.\");\n            vscode.window.showInformationMessage(\"We are unable to connect to GIGO servers. Please check your network connection.\");\n            await new Promise(f => setTimeout(f, 500));\n            continue;\n        }\n\n        // update next timestamp\n        nextTimeStamp = res;\n        userHasBeenActive = false;\n    }\n}\n\n\n//renewPopup will continously displaya popup every minute prompting the user to renew session or session will end\nasync function renewPopup(): Promise<boolean>{\n    //determine time remaining\n    let timeRemaining = nextTimeStamp - (Date.now()/1000);\n    let isRenewed = false;\n\n    //if the user has not renewed the session and there is time remaining continue looping\n    while(!isRenewed && timeRemaining > 0){\n        //if the user has been active display welcome back message, break from loop, and return true\n        if (userHasBeenActive){\n            logger.info.appendLine(\"Session: User is active.\");\n            // // vscode.window.showInformationMessage(\"Welcome back\");\n            isRenewed = true;\n            console.log(\"setting renewed status inside conditional: \", isRenewed)\n            return true;\n        }\n        //if the user has not been active dip1674382421ay 'are you still there' message\n        vscode.window.showInformationMessage(`Are you still there?\\n    session will auto close in ${Math.round(timeRemaining/60)} minutes`, \"Continue session\").then(selection => {\n            //if user clicks continue button display welcome message, break from loop, and return true\n            vscode.window.showInformationMessage(\"Welcome back\");\n            logger.info.appendLine(\"Session: User is active.\");\n            isRenewed = true;\n            console.log(\"setting renewed status inside popup: \", isRenewed)\n            return true;\n        });\n        \n        //wait for 1 minute before checking again\n        await new Promise(f => setTimeout(f, 60000));\n        //reduce time remaining by 1 minute\n        timeRemaining = timeRemaining - 60;\n    }\n\n    if (isRenewed){\n        console.log(\"renewed varibale setb outside function\")\n        vscode.window.showInformationMessage(\"Welcome back\");\n        return true;\n    }\n\n    //time remaining is 0 and user has not been active, return false\n    return false;\n}\n\n\n//executeLiveCheck will execute a live check to renew session timer by calling http function in GIGO\nexport async function executeLiveCheck(wsID: any, secret: any){\n    let expiration = -1;\n    isAFK = false;\n\n    for(let i = 0; i < 3; i++){\n        try{\n            //await result from http function in GIGO\n            let res = await axios.post(\n                \"https://api.gigo.dev/internal/v1/ext/live-check\", \n                {\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    \"workspace_id\": wsID,\n                    \"secret\": secret\n                }\n            );\n\n            expiration = res.data.expiration;\n            break;\n        }catch(e){\n            logger.error.appendLine(`Session Failed: Failed to retrieve result from live check: ${e}.`);\n            await new Promise(f => setTimeout(f, 300));\n            continue;\n        }\n    }\n\n\n    logger.info.appendLine(`Session: Result from live check: ${expiration}.`);\n    \n    \n    return expiration;\n}\n\n\n//executeAfkCheck will execute a call to get an afk session timestamp from the http function in GIGO\nexport async function executeAfkCheck(wsID: any, secret: any, addMin: any){\n\n    var res: any;\n    for (let i = 0; i < 3; i++){\n        try{\n            //awair result from http function in GIGO\n            let res = await axios.post(\n                \"https://api.gigo.dev/internal/v1/ext/afk\", \n                {\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    \"workspace_id\": wsID,\n                    \"secret\": secret,\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    \"add_min\": addMin\n                }\n            );\n            logger.info.appendLine(`Session: Result from afk check: ${res.data.expiration}.`);\n                //if non status code 200 is returned, return -1 and log failure message\n                // if (res.status !== 200) { \n                //     errors.appendLine(`failed to executeAfkCheck: ${res}`);\n                //     return -1;;\n                // }\n            //set afk variable to true\n            isAFK = true;\n            \n            //return afk timestamp\n            return res.data.expiration;\n            \n        }catch(e){\n            logger.error.appendLine(`Session Failed: Failed to retrieve result from afk check: ${e}.`);\n            await new Promise(f => setTimeout(f, 1000));\n            continue;\n        }\n\n        \n        break;\n    }\n  \n    try{\n        console.log(`afk result: ${res.data.expiration}`);\n        if (res.data.expiration <= 0){\n            logger.error.appendLine(`Session Failed: Failed to retrieve result from afk check: no result found.`);\n            isAFK = false;\n            return -1;\n        }\n    }catch(e){\n        logger.error.appendLine(`Session Failed: Failed to retrieve result from afk check: ${e}.`);\n        isAFK = false;\n        return -1;\n    }\n\n    \n}\n\n\n//activityCallback is called upon user interaction and sets states to user active\nfunction activityCallback() {\n    if (!userHasBeenActive){\n        console.log(\"activity registered at \", Date.now());\n        vscode.window.showInformationMessage(\"Welcome back\");\n        logger.info.appendLine(\"Session: User is active.\");\n    }\n\n    // vscode.window.showInformationMessage(\"activity logged\");\n\n    //set user active to true\n    userHasBeenActive = true;\n    if (isAFK) {\n        \n        //execute disable afk command\n        vscode.commands.executeCommand(\"gigo.disableAFK\");\n        vscode.window.showInformationMessage(\"Welcome back\");\n    }\n    //set is afk to false\n    isAFK = false;\n}\n\n\n//checkUserActivity is a callback funtion that occurs whenever a user does a recognizable input\nfunction checkUserActivity() {\n    \n    //all callback functions call activityCallback on registered input\n    vscode.window.onDidChangeActiveTerminal(activityCallback);\n\n    vscode.window.onDidChangeActiveTextEditor(activityCallback);\n\n    vscode.window.onDidChangeTerminalState(activityCallback);\n\n    vscode.window.onDidCloseTerminal(activityCallback);\n\n    vscode.window.onDidOpenTerminal(activityCallback);\n\n    vscode.window.onDidChangeTextEditorOptions(activityCallback);\n\n    vscode.window.onDidChangeTextEditorSelection(activityCallback);\n\n    vscode.window.onDidChangeTextEditorViewColumn(activityCallback);\n\n    // vscode.window.onDidChangeTextEditorVisibleRanges(activityCallback);\n\n    vscode.window.onDidChangeVisibleTextEditors(activityCallback);\n\n    //TODO\n    // vscode.window.onDidChangeWindowState(activityCallback);\n   \n    // vscode.workspace.onDidChangeTextDocument(activityCallback);\n\n    // vscode.workspace.onDidCloseTextDocument(activityCallback);\n\n    // vscode.workspace.onDidOpenTextDocument(activityCallback);\n    //TODO\n\n    vscode.workspace.onDidChangeNotebookDocument(activityCallback);\n\n    vscode.workspace.onDidCloseNotebookDocument(activityCallback);\n\n    vscode.workspace.onDidOpenNotebookDocument(activityCallback);\n\n    vscode.workspace.onDidCreateFiles(activityCallback);\n\n    vscode.workspace.onDidDeleteFiles(activityCallback);\n}", "'use strict';\n\nexport default function bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n", "'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  const pattern = '[object FormData]';\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) ||\n    toString.call(thing) === pattern ||\n    (isFunction(thing.toString) && thing.toString() === pattern)\n  );\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    if (reducer(descriptor, name, obj) !== false) {\n      reducedDescriptors[name] = descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n}\n\nconst ALPHA = 'abcdefghijklmnopqrstuvwxyz'\n\nconst DIGIT = '0123456789';\n\nconst ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n}\n\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\n  let str = '';\n  const {length} = alphabet;\n  while (size--) {\n    str += alphabet[Math.random() * length|0]\n  }\n\n  return str;\n}\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject\n};\n", "'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\n\nconst prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nexport default AxiosError;\n", "import FormData from 'form-data';\n\nexport default FormData;\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\nimport PlatformFormData from '../platform/node/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (PlatformFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n", "'use strict';\n\nimport toFormData from './toFormData.js';\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\nexport default AxiosURLSearchParams;\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n", "'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n", "'use strict';\n\nexport default {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n", "'use strict';\n\nimport url from 'url';\nexport default url.URLSearchParams;\n", "import URLSearchParams from './classes/URLSearchParams.js'\nimport FormData from './classes/FormData.js'\n\nexport default {\n  isNode: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob: typeof Blob !== 'undefined' && Blob || null\n  },\n  protocols: [ 'http', 'https', 'file', 'data' ]\n};\n", "'use strict';\n\nimport utils from '../utils.js';\nimport toFormData from './toFormData.js';\nimport platform from '../platform/index.js';\n\nexport default function toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n", "'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nexport default formDataToJSON;\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\nconst DEFAULT_CONTENT_TYPE = {\n  'Content-Type': undefined\n};\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      if (!hasJSONContentType) {\n        return data;\n      }\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nexport default defaults;\n", "'use strict';\n\nimport utils from './../utils.js';\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nexport default rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n", "'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nfunction isValidHeaderName(str) {\n  return /^[-_a-zA-Z]+$/.test(str.trim());\n}\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\nutils.freezeMethods(AxiosHeaders.prototype);\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n", "'use strict';\n\nimport utils from './../utils.js';\nimport defaults from '../defaults/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nexport default function transformData(fns, response) {\n  const config = this || defaults;\n  const context = response || config;\n  const headers = AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n", "'use strict';\n\nexport default function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n", "'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport utils from '../utils.js';\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nexport default CanceledError;\n", "'use strict';\n\nimport AxiosError from './AxiosError.js';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nexport default function settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n", "'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport default function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n", "'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nexport default function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n", "'use strict';\n\nimport isAbsoluteURL from '../helpers/isAbsoluteURL.js';\nimport combineURLs from '../helpers/combineURLs.js';\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nexport default function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n", "'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport buildURL from './../helpers/buildURL.js';\nimport {getProxyForUrl} from 'proxy-from-env';\nimport http from 'http';\nimport https from 'https';\nimport util from 'util';\nimport followRedirects from 'follow-redirects';\nimport zlib from 'zlib';\nimport {VERSION} from '../env/data.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport platform from '../platform/index.js';\nimport fromDataURI from '../helpers/fromDataURI.js';\nimport stream from 'stream';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport AxiosTransformStream from '../helpers/AxiosTransformStream.js';\nimport EventEmitter from 'events';\nimport formDataToStream from \"../helpers/formDataToStream.js\";\nimport readBlob from \"../helpers/readBlob.js\";\nimport ZlibHeaderTransformStream from '../helpers/ZlibHeaderTransformStream.js';\n\nconst zlibOptions = {\n  flush: zlib.constants.Z_SYNC_FLUSH,\n  finishFlush: zlib.constants.Z_SYNC_FLUSH\n};\n\nconst brotliOptions = {\n  flush: zlib.constants.BROTLI_OPERATION_FLUSH,\n  finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH\n}\n\nconst isBrotliSupported = utils.isFunction(zlib.createBrotliDecompress);\n\nconst {http: httpFollow, https: httpsFollow} = followRedirects;\n\nconst isHttps = /https:?/;\n\nconst supportedProtocols = platform.protocols.map(protocol => {\n  return protocol + ':';\n});\n\n/**\n * If the proxy or config beforeRedirects functions are defined, call them with the options\n * object.\n *\n * @param {Object<string, any>} options - The options object that was passed to the request.\n *\n * @returns {Object<string, any>}\n */\nfunction dispatchBeforeRedirect(options) {\n  if (options.beforeRedirects.proxy) {\n    options.beforeRedirects.proxy(options);\n  }\n  if (options.beforeRedirects.config) {\n    options.beforeRedirects.config(options);\n  }\n}\n\n/**\n * If the proxy or config afterRedirects functions are defined, call them with the options\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} configProxy configuration from Axios options object\n * @param {string} location\n *\n * @returns {http.ClientRequestArgs}\n */\nfunction setProxy(options, configProxy, location) {\n  let proxy = configProxy;\n  if (!proxy && proxy !== false) {\n    const proxyUrl = getProxyForUrl(location);\n    if (proxyUrl) {\n      proxy = new URL(proxyUrl);\n    }\n  }\n  if (proxy) {\n    // Basic proxy authorization\n    if (proxy.username) {\n      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');\n    }\n\n    if (proxy.auth) {\n      // Support proxy auth object form\n      if (proxy.auth.username || proxy.auth.password) {\n        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');\n      }\n      const base64 = Buffer\n        .from(proxy.auth, 'utf8')\n        .toString('base64');\n      options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n    }\n\n    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');\n    const proxyHost = proxy.hostname || proxy.host;\n    options.hostname = proxyHost;\n    // Replace 'host' since options is not a URL object\n    options.host = proxyHost;\n    options.port = proxy.port;\n    options.path = location;\n    if (proxy.protocol) {\n      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : `${proxy.protocol}:`;\n    }\n  }\n\n  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {\n    // Configure proxy for redirected request, passing the original config proxy to apply\n    // the exact same logic as if the redirected request was performed by axios directly.\n    setProxy(redirectOptions, configProxy, redirectOptions.href);\n  };\n}\n\nconst isHttpAdapterSupported = typeof process !== 'undefined' && utils.kindOf(process) === 'process';\n\n/*eslint consistent-return:0*/\nexport default isHttpAdapterSupported && function httpAdapter(config) {\n  /*eslint no-async-promise-executor:0*/\n  return new Promise(async function dispatchHttpRequest(resolvePromise, rejectPromise) {\n    let data = config.data;\n    const responseType = config.responseType;\n    const responseEncoding = config.responseEncoding;\n    const method = config.method.toUpperCase();\n    let isFinished;\n    let isDone;\n    let rejected = false;\n    let req;\n\n    // temporary internal emitter until the AxiosRequest class will be implemented\n    const emitter = new EventEmitter();\n\n    function onFinished() {\n      if (isFinished) return;\n      isFinished = true;\n\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(abort);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', abort);\n      }\n\n      emitter.removeAllListeners();\n    }\n\n    function done(value, isRejected) {\n      if (isDone) return;\n\n      isDone = true;\n\n      if (isRejected) {\n        rejected = true;\n        onFinished();\n      }\n\n      isRejected ? rejectPromise(value) : resolvePromise(value);\n    }\n\n    const resolve = function resolve(value) {\n      done(value);\n    };\n\n    const reject = function reject(value) {\n      done(value, true);\n    };\n\n    function abort(reason) {\n      emitter.emit('abort', !reason || reason.type ? new CanceledError(null, config, req) : reason);\n    }\n\n    emitter.once('abort', reject);\n\n    if (config.cancelToken || config.signal) {\n      config.cancelToken && config.cancelToken.subscribe(abort);\n      if (config.signal) {\n        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);\n      }\n    }\n\n    // Parse url\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    const parsed = new URL(fullPath, 'http://localhost');\n    const protocol = parsed.protocol || supportedProtocols[0];\n\n    if (protocol === 'data:') {\n      let convertedData;\n\n      if (method !== 'GET') {\n        return settle(resolve, reject, {\n          status: 405,\n          statusText: 'method not allowed',\n          headers: {},\n          config\n        });\n      }\n\n      try {\n        convertedData = fromDataURI(config.url, responseType === 'blob', {\n          Blob: config.env && config.env.Blob\n        });\n      } catch (err) {\n        throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);\n      }\n\n      if (responseType === 'text') {\n        convertedData = convertedData.toString(responseEncoding);\n\n        if (!responseEncoding || responseEncoding === 'utf8') {\n          convertedData = utils.stripBOM(convertedData);\n        }\n      } else if (responseType === 'stream') {\n        convertedData = stream.Readable.from(convertedData);\n      }\n\n      return settle(resolve, reject, {\n        data: convertedData,\n        status: 200,\n        statusText: 'OK',\n        headers: new AxiosHeaders(),\n        config\n      });\n    }\n\n    if (supportedProtocols.indexOf(protocol) === -1) {\n      return reject(new AxiosError(\n        'Unsupported protocol ' + protocol,\n        AxiosError.ERR_BAD_REQUEST,\n        config\n      ));\n    }\n\n    const headers = AxiosHeaders.from(config.headers).normalize();\n\n    // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    // User-Agent is specified; handle case where no UA header is desired\n    // Only set header if it hasn't been set in config\n    headers.set('User-Agent', 'axios/' + VERSION, false);\n\n    const onDownloadProgress = config.onDownloadProgress;\n    const onUploadProgress = config.onUploadProgress;\n    const maxRate = config.maxRate;\n    let maxUploadRate = undefined;\n    let maxDownloadRate = undefined;\n\n    // support for spec compliant FormData objects\n    if (utils.isSpecCompliantForm(data)) {\n      const userBoundary = headers.getContentType(/boundary=([-_\\w\\d]{10,70})/i);\n\n      data = formDataToStream(data, (formHeaders) => {\n        headers.set(formHeaders);\n      }, {\n        tag: `axios-${VERSION}-boundary`,\n        boundary: userBoundary && userBoundary[1] || undefined\n      });\n      // support for https://www.npmjs.com/package/form-data api\n    } else if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n      headers.set(data.getHeaders());\n\n      if (!headers.hasContentLength()) {\n        try {\n          const knownLength = await util.promisify(data.getLength).call(data);\n          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);\n          /*eslint no-empty:0*/\n        } catch (e) {\n        }\n      }\n    } else if (utils.isBlob(data)) {\n      data.size && headers.setContentType(data.type || 'application/octet-stream');\n      headers.setContentLength(data.size || 0);\n      data = stream.Readable.from(readBlob(data));\n    } else if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(new AxiosError(\n          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',\n          AxiosError.ERR_BAD_REQUEST,\n          config\n        ));\n      }\n\n      // Add Content-Length header if data exists\n      headers.setContentLength(data.length, false);\n\n      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n        return reject(new AxiosError(\n          'Request body larger than maxBodyLength limit',\n          AxiosError.ERR_BAD_REQUEST,\n          config\n        ));\n      }\n    }\n\n    const contentLength = utils.toFiniteNumber(headers.getContentLength());\n\n    if (utils.isArray(maxRate)) {\n      maxUploadRate = maxRate[0];\n      maxDownloadRate = maxRate[1];\n    } else {\n      maxUploadRate = maxDownloadRate = maxRate;\n    }\n\n    if (data && (onUploadProgress || maxUploadRate)) {\n      if (!utils.isStream(data)) {\n        data = stream.Readable.from(data, {objectMode: false});\n      }\n\n      data = stream.pipeline([data, new AxiosTransformStream({\n        length: contentLength,\n        maxRate: utils.toFiniteNumber(maxUploadRate)\n      })], utils.noop);\n\n      onUploadProgress && data.on('progress', progress => {\n        onUploadProgress(Object.assign(progress, {\n          upload: true\n        }));\n      });\n    }\n\n    // HTTP basic authentication\n    let auth = undefined;\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n\n    if (!auth && parsed.username) {\n      const urlUsername = parsed.username;\n      const urlPassword = parsed.password;\n      auth = urlUsername + ':' + urlPassword;\n    }\n\n    auth && headers.delete('authorization');\n\n    let path;\n\n    try {\n      path = buildURL(\n        parsed.pathname + parsed.search,\n        config.params,\n        config.paramsSerializer\n      ).replace(/^\\?/, '');\n    } catch (err) {\n      const customErr = new Error(err.message);\n      customErr.config = config;\n      customErr.url = config.url;\n      customErr.exists = true;\n      return reject(customErr);\n    }\n\n    headers.set(\n      'Accept-Encoding',\n      'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false\n      );\n\n    const options = {\n      path,\n      method: method,\n      headers: headers.toJSON(),\n      agents: { http: config.httpAgent, https: config.httpsAgent },\n      auth,\n      protocol,\n      beforeRedirect: dispatchBeforeRedirect,\n      beforeRedirects: {}\n    };\n\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname;\n      options.port = parsed.port;\n      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n\n    let transport;\n    const isHttpsRequest = isHttps.test(options.protocol);\n    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsRequest ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n      if (config.beforeRedirect) {\n        options.beforeRedirects.config = config.beforeRedirect;\n      }\n      transport = isHttpsRequest ? httpsFollow : httpFollow;\n    }\n\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    } else {\n      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited\n      options.maxBodyLength = Infinity;\n    }\n\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    }\n\n    // Create the request\n    req = transport.request(options, function handleResponse(res) {\n      if (req.destroyed) return;\n\n      const streams = [res];\n\n      const responseLength = +res.headers['content-length'];\n\n      if (onDownloadProgress) {\n        const transformStream = new AxiosTransformStream({\n          length: utils.toFiniteNumber(responseLength),\n          maxRate: utils.toFiniteNumber(maxDownloadRate)\n        });\n\n        onDownloadProgress && transformStream.on('progress', progress => {\n          onDownloadProgress(Object.assign(progress, {\n            download: true\n          }));\n        });\n\n        streams.push(transformStream);\n      }\n\n      // decompress the response body transparently if required\n      let responseStream = res;\n\n      // return the last request in case of redirects\n      const lastRequest = res.req || req;\n\n      // if decompress disabled we should not decompress\n      if (config.decompress !== false && res.headers['content-encoding']) {\n        // if no content, but headers still say that it is encoded,\n        // remove the header not confuse downstream operations\n        if (method === 'HEAD' || res.statusCode === 204) {\n          delete res.headers['content-encoding'];\n        }\n\n        switch (res.headers['content-encoding']) {\n        /*eslint default-case:0*/\n        case 'gzip':\n        case 'x-gzip':\n        case 'compress':\n        case 'x-compress':\n          // add the unzipper to the body stream processing pipeline\n          streams.push(zlib.createUnzip(zlibOptions));\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        case 'deflate':\n          streams.push(new ZlibHeaderTransformStream());\n\n          // add the unzipper to the body stream processing pipeline\n          streams.push(zlib.createUnzip(zlibOptions));\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        case 'br':\n          if (isBrotliSupported) {\n            streams.push(zlib.createBrotliDecompress(brotliOptions));\n            delete res.headers['content-encoding'];\n          }\n        }\n      }\n\n      responseStream = streams.length > 1 ? stream.pipeline(streams, utils.noop) : streams[0];\n\n      const offListeners = stream.finished(responseStream, () => {\n        offListeners();\n        onFinished();\n      });\n\n      const response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: new AxiosHeaders(res.headers),\n        config,\n        request: lastRequest\n      };\n\n      if (responseType === 'stream') {\n        response.data = responseStream;\n        settle(resolve, reject, response);\n      } else {\n        const responseBuffer = [];\n        let totalResponseBytes = 0;\n\n        responseStream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length;\n\n          // make sure the content length is not over the maxContentLength if specified\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            // stream.destroy() emit aborted event before calling reject() on Node.js v16\n            rejected = true;\n            responseStream.destroy();\n            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n              AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n          }\n        });\n\n        responseStream.on('aborted', function handlerStreamAborted() {\n          if (rejected) {\n            return;\n          }\n\n          const err = new AxiosError(\n            'maxContentLength size of ' + config.maxContentLength + ' exceeded',\n            AxiosError.ERR_BAD_RESPONSE,\n            config,\n            lastRequest\n          );\n          responseStream.destroy(err);\n          reject(err);\n        });\n\n        responseStream.on('error', function handleStreamError(err) {\n          if (req.destroyed) return;\n          reject(AxiosError.from(err, null, config, lastRequest));\n        });\n\n        responseStream.on('end', function handleStreamEnd() {\n          try {\n            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n            if (responseType !== 'arraybuffer') {\n              responseData = responseData.toString(responseEncoding);\n              if (!responseEncoding || responseEncoding === 'utf8') {\n                responseData = utils.stripBOM(responseData);\n              }\n            }\n            response.data = responseData;\n          } catch (err) {\n            reject(AxiosError.from(err, null, config, response.request, response));\n          }\n          settle(resolve, reject, response);\n        });\n      }\n\n      emitter.once('abort', err => {\n        if (!responseStream.destroyed) {\n          responseStream.emit('error', err);\n          responseStream.destroy();\n        }\n      });\n    });\n\n    emitter.once('abort', err => {\n      reject(err);\n      req.destroy(err);\n    });\n\n    // Handle errors\n    req.on('error', function handleRequestError(err) {\n      // @todo remove\n      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n      reject(AxiosError.from(err, null, config, req));\n    });\n\n    // set tcp keep alive to prevent drop connection by peer\n    req.on('socket', function handleRequestSocket(socket) {\n      // default interval of sending ack packet is 1 minute\n      socket.setKeepAlive(true, 1000 * 60);\n    });\n\n    // Handle request timeout\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      const timeout = parseInt(config.timeout, 10);\n\n      if (isNaN(timeout)) {\n        reject(new AxiosError(\n          'error trying to parse `config.timeout` to int',\n          AxiosError.ERR_BAD_OPTION_VALUE,\n          config,\n          req\n        ));\n\n        return;\n      }\n\n      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devouring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        if (isDone) return;\n        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n        const transitional = config.transitional || transitionalDefaults;\n        if (config.timeoutErrorMessage) {\n          timeoutErrorMessage = config.timeoutErrorMessage;\n        }\n        reject(new AxiosError(\n          timeoutErrorMessage,\n          transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n          config,\n          req\n        ));\n        abort();\n      });\n    }\n\n\n    // Send the request\n    if (utils.isStream(data)) {\n      let ended = false;\n      let errored = false;\n\n      data.on('end', () => {\n        ended = true;\n      });\n\n      data.once('error', err => {\n        errored = true;\n        req.destroy(err);\n      });\n\n      data.on('close', () => {\n        if (!ended && !errored) {\n          abort(new CanceledError('Request stream has been aborted', config, req));\n        }\n      });\n\n      data.pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n}\n\nexport const __setProxy = setProxy;\n", "export const VERSION = \"1.3.3\";", "'use strict';\n\nexport default function parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n", "'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport parseProtocol from './parseProtocol.js';\nimport platform from '../platform/index.js';\n\nconst DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\\s\\S]*)$/;\n\n/**\n * Parse data uri to a Buffer or Blob\n *\n * @param {String} uri\n * @param {?Boolean} asBlob\n * @param {?Object} options\n * @param {?Function} options.Blob\n *\n * @returns {Buffer|Blob}\n */\nexport default function fromDataURI(uri, asBlob, options) {\n  const _Blob = options && options.Blob || platform.classes.Blob;\n  const protocol = parseProtocol(uri);\n\n  if (asBlob === undefined && _Blob) {\n    asBlob = true;\n  }\n\n  if (protocol === 'data') {\n    uri = protocol.length ? uri.slice(protocol.length + 1) : uri;\n\n    const match = DATA_URL_PATTERN.exec(uri);\n\n    if (!match) {\n      throw new AxiosError('Invalid URL', AxiosError.ERR_INVALID_URL);\n    }\n\n    const mime = match[1];\n    const isBase64 = match[2];\n    const body = match[3];\n    const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? 'base64' : 'utf8');\n\n    if (asBlob) {\n      if (!_Blob) {\n        throw new AxiosError('Blob is not supported', AxiosError.ERR_NOT_SUPPORT);\n      }\n\n      return new _Blob([buffer], {type: mime});\n    }\n\n    return buffer;\n  }\n\n  throw new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_NOT_SUPPORT);\n}\n", "'use strict';\n\nimport stream from 'stream';\nimport utils from '../utils.js';\nimport throttle from './throttle.js';\nimport speedometer from './speedometer.js';\n\nconst kInternals = Symbol('internals');\n\nclass AxiosTransformStream extends stream.Transform{\n  constructor(options) {\n    options = utils.toFlatObject(options, {\n      maxRate: 0,\n      chunkSize: 64 * 1024,\n      minChunkSize: 100,\n      timeWindow: 500,\n      ticksRate: 2,\n      samplesCount: 15\n    }, null, (prop, source) => {\n      return !utils.isUndefined(source[prop]);\n    });\n\n    super({\n      readableHighWaterMark: options.chunkSize\n    });\n\n    const self = this;\n\n    const internals = this[kInternals] = {\n      length: options.length,\n      timeWindow: options.timeWindow,\n      ticksRate: options.ticksRate,\n      chunkSize: options.chunkSize,\n      maxRate: options.maxRate,\n      minChunkSize: options.minChunkSize,\n      bytesSeen: 0,\n      isCaptured: false,\n      notifiedBytesLoaded: 0,\n      ts: Date.now(),\n      bytes: 0,\n      onReadCallback: null\n    };\n\n    const _speedometer = speedometer(internals.ticksRate * options.samplesCount, internals.timeWindow);\n\n    this.on('newListener', event => {\n      if (event === 'progress') {\n        if (!internals.isCaptured) {\n          internals.isCaptured = true;\n        }\n      }\n    });\n\n    let bytesNotified = 0;\n\n    internals.updateProgress = throttle(function throttledHandler() {\n      const totalBytes = internals.length;\n      const bytesTransferred = internals.bytesSeen;\n      const progressBytes = bytesTransferred - bytesNotified;\n      if (!progressBytes || self.destroyed) return;\n\n      const rate = _speedometer(progressBytes);\n\n      bytesNotified = bytesTransferred;\n\n      process.nextTick(() => {\n        self.emit('progress', {\n          'loaded': bytesTransferred,\n          'total': totalBytes,\n          'progress': totalBytes ? (bytesTransferred / totalBytes) : undefined,\n          'bytes': progressBytes,\n          'rate': rate ? rate : undefined,\n          'estimated': rate && totalBytes && bytesTransferred <= totalBytes ?\n            (totalBytes - bytesTransferred) / rate : undefined\n        });\n      });\n    }, internals.ticksRate);\n\n    const onFinish = () => {\n      internals.updateProgress(true);\n    };\n\n    this.once('end', onFinish);\n    this.once('error', onFinish);\n  }\n\n  _read(size) {\n    const internals = this[kInternals];\n\n    if (internals.onReadCallback) {\n      internals.onReadCallback();\n    }\n\n    return super._read(size);\n  }\n\n  _transform(chunk, encoding, callback) {\n    const self = this;\n    const internals = this[kInternals];\n    const maxRate = internals.maxRate;\n\n    const readableHighWaterMark = this.readableHighWaterMark;\n\n    const timeWindow = internals.timeWindow;\n\n    const divider = 1000 / timeWindow;\n    const bytesThreshold = (maxRate / divider);\n    const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;\n\n    function pushChunk(_chunk, _callback) {\n      const bytes = Buffer.byteLength(_chunk);\n      internals.bytesSeen += bytes;\n      internals.bytes += bytes;\n\n      if (internals.isCaptured) {\n        internals.updateProgress();\n      }\n\n      if (self.push(_chunk)) {\n        process.nextTick(_callback);\n      } else {\n        internals.onReadCallback = () => {\n          internals.onReadCallback = null;\n          process.nextTick(_callback);\n        };\n      }\n    }\n\n    const transformChunk = (_chunk, _callback) => {\n      const chunkSize = Buffer.byteLength(_chunk);\n      let chunkRemainder = null;\n      let maxChunkSize = readableHighWaterMark;\n      let bytesLeft;\n      let passed = 0;\n\n      if (maxRate) {\n        const now = Date.now();\n\n        if (!internals.ts || (passed = (now - internals.ts)) >= timeWindow) {\n          internals.ts = now;\n          bytesLeft = bytesThreshold - internals.bytes;\n          internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;\n          passed = 0;\n        }\n\n        bytesLeft = bytesThreshold - internals.bytes;\n      }\n\n      if (maxRate) {\n        if (bytesLeft <= 0) {\n          // next time window\n          return setTimeout(() => {\n            _callback(null, _chunk);\n          }, timeWindow - passed);\n        }\n\n        if (bytesLeft < maxChunkSize) {\n          maxChunkSize = bytesLeft;\n        }\n      }\n\n      if (maxChunkSize && chunkSize > maxChunkSize && (chunkSize - maxChunkSize) > minChunkSize) {\n        chunkRemainder = _chunk.subarray(maxChunkSize);\n        _chunk = _chunk.subarray(0, maxChunkSize);\n      }\n\n      pushChunk(_chunk, chunkRemainder ? () => {\n        process.nextTick(_callback, null, chunkRemainder);\n      } : _callback);\n    };\n\n    transformChunk(chunk, function transformNextChunk(err, _chunk) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (_chunk) {\n        transformChunk(_chunk, transformNextChunk);\n      } else {\n        callback(null);\n      }\n    });\n  }\n\n  setLength(length) {\n    this[kInternals].length = +length;\n    return this;\n  }\n}\n\nexport default AxiosTransformStream;\n", "'use strict';\n\n/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  const threshold = 1000 / freq;\n  let timer = null;\n  return function throttled(force, args) {\n    const now = Date.now();\n    if (force || now - timestamp > threshold) {\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n      timestamp = now;\n      return fn.apply(null, args);\n    }\n    if (!timer) {\n      timer = setTimeout(() => {\n        timer = null;\n        timestamp = Date.now();\n        return fn.apply(null, args);\n      }, threshold - (now - timestamp));\n    }\n  };\n}\n\nexport default throttle;\n", "'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n", "import {TextEncoder} from 'util';\nimport {Readable} from 'stream';\nimport utils from \"../utils.js\";\nimport readBlob from \"./readBlob.js\";\n\nconst BOUNDARY_ALPHABET = utils.ALPHABET.ALPHA_DIGIT + '-_';\n\nconst textEncoder = new TextEncoder();\n\nconst CRLF = '\\r\\n';\nconst CRLF_BYTES = textEncoder.encode(CRLF);\nconst CRLF_BYTES_COUNT = 2;\n\nclass FormDataPart {\n  constructor(name, value) {\n    const {escapeName} = this.constructor;\n    const isStringValue = utils.isString(value);\n\n    let headers = `Content-Disposition: form-data; name=\"${escapeName(name)}\"${\n      !isStringValue && value.name ? `; filename=\"${escapeName(value.name)}\"` : ''\n    }${CRLF}`;\n\n    if (isStringValue) {\n      value = textEncoder.encode(String(value).replace(/\\r?\\n|\\r\\n?/g, CRLF));\n    } else {\n      headers += `Content-Type: ${value.type || \"application/octet-stream\"}${CRLF}`\n    }\n\n    this.headers = textEncoder.encode(headers + CRLF);\n\n    this.contentLength = isStringValue ? value.byteLength : value.size;\n\n    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;\n\n    this.name = name;\n    this.value = value;\n  }\n\n  async *encode(){\n    yield this.headers;\n\n    const {value} = this;\n\n    if(utils.isTypedArray(value)) {\n      yield value;\n    } else {\n      yield* readBlob(value);\n    }\n\n    yield CRLF_BYTES;\n  }\n\n  static escapeName(name) {\n      return String(name).replace(/[\\r\\n\"]/g, (match) => ({\n        '\\r' : '%0D',\n        '\\n' : '%0A',\n        '\"' : '%22',\n      }[match]));\n  }\n}\n\nconst formDataToStream = (form, headersHandler, options) => {\n  const {\n    tag = 'form-data-boundary',\n    size = 25,\n    boundary = tag + '-' + utils.generateString(size, BOUNDARY_ALPHABET)\n  } = options || {};\n\n  if(!utils.isFormData(form)) {\n    throw TypeError('FormData instance required');\n  }\n\n  if (boundary.length < 1 || boundary.length > 70) {\n    throw Error('boundary must be 10-70 characters long')\n  }\n\n  const boundaryBytes = textEncoder.encode('--' + boundary + CRLF);\n  const footerBytes = textEncoder.encode('--' + boundary + '--' + CRLF + CRLF);\n  let contentLength = footerBytes.byteLength;\n\n  const parts = Array.from(form.entries()).map(([name, value]) => {\n    const part = new FormDataPart(name, value);\n    contentLength += part.size;\n    return part;\n  });\n\n  contentLength += boundaryBytes.byteLength * parts.length;\n\n  contentLength = utils.toFiniteNumber(contentLength);\n\n  const computedHeaders = {\n    'Content-Type': `multipart/form-data; boundary=${boundary}`\n  }\n\n  if (Number.isFinite(contentLength)) {\n    computedHeaders['Content-Length'] = contentLength;\n  }\n\n  headersHandler && headersHandler(computedHeaders);\n\n  return Readable.from((async function *() {\n    for(const part of parts) {\n      yield boundaryBytes;\n      yield* part.encode();\n    }\n\n    yield footerBytes;\n  })());\n};\n\nexport default formDataToStream;\n", "const {asyncIterator} = Symbol;\n\nconst readBlob = async function* (blob) {\n  if (blob.stream) {\n    yield* blob.stream()\n  } else if (blob.arrayBuffer) {\n    yield await blob.arrayBuffer()\n  } else if (blob[asyncIterator]) {\n    yield* blob[asyncIterator]();\n  } else {\n    yield blob;\n  }\n}\n\nexport default readBlob;\n", "\"use strict\";\n\nimport stream from \"stream\";\n\nclass ZlibHeaderTransformStream extends stream.Transform {\n  __transform(chunk, encoding, callback) {\n    this.push(chunk);\n    callback();\n  }\n\n  _transform(chunk, encoding, callback) {\n    if (chunk.length !== 0) {\n      this._transform = this.__transform;\n\n      // Add Default Compression headers if no zlib headers are present\n      if (chunk[0] !== 120) { // Hex: 78\n        const header = Buffer.alloc(2);\n        header[0] = 120; // Hex: 78\n        header[1] = 156; // Hex: 9C \n        this.push(header, encoding);\n      }\n    }\n\n    this.__transform(chunk, encoding, callback);\n  }\n}\n\nexport default ZlibHeaderTransformStream;\n", "'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.isStandardBrowserEnv ?\n\n// Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        const cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n// Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })();\n", "'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.isStandardBrowserEnv ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    const msie = /(msie|trident)/i.test(navigator.userAgent);\n    const urlParsingNode = document.createElement('a');\n    let originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      let href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n          urlParsingNode.pathname :\n          '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n          parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })();\n", "'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport cookies from './../helpers/cookies.js';\nimport buildURL from './../helpers/buildURL.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport isURLSameOrigin from './../helpers/isURLSameOrigin.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport speedometer from '../helpers/speedometer.js';\n\nfunction progressEventReducer(listener, isDownloadStream) {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e\n    };\n\n    data[isDownloadStream ? 'download' : 'upload'] = true;\n\n    listener(data);\n  };\n}\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    let requestData = config.data;\n    const requestHeaders = AxiosHeaders.from(config.headers).normalize();\n    const responseType = config.responseType;\n    let onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData) && (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv)) {\n      requestHeaders.setContentType(false); // Let the browser set it\n    }\n\n    let request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));\n    }\n\n    const fullPath = buildFullPath(config.baseURL, config.url);\n\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (platform.isStandardBrowserEnv) {\n      // Add xsrf header\n      const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath))\n        && config.xsrfCookieName && cookies.read(config.xsrfCookieName);\n\n      if (xsrfValue) {\n        requestHeaders.set(config.xsrfHeaderName, xsrfValue);\n      }\n    }\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(fullPath);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n", "import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if(fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      if((adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter)) {\n        break;\n      }\n    }\n\n    if (!adapter) {\n      if (adapter === false) {\n        throw new AxiosError(\n          `Adapter ${nameOrAdapter} is not supported by the environment`,\n          'ERR_NOT_SUPPORT'\n        );\n      }\n\n      throw new Error(\n        utils.hasOwnProp(knownAdapters, nameOrAdapter) ?\n          `Adapter '${nameOrAdapter}' is not available in the build` :\n          `Unknown adapter '${nameOrAdapter}'`\n      );\n    }\n\n    if (!utils.isFunction(adapter)) {\n      throw new TypeError('adapter is not a function');\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n", "'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n", "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? thing.toJSON() : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n", "'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n", "'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer !== undefined) {\n      validator.assertOptions(paramsSerializer, {\n        encode: validators.function,\n        serialize: validators.function\n      }, true);\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    let contextHeaders;\n\n    // Flatten headers\n    contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    contextHeaders && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n", "'use strict';\n\nimport CanceledError from './CanceledError.js';\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nexport default CancelToken;\n", "'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n", "'use strict';\n\nimport utils from './../utils.js';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nexport default function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n", "const HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nexport default HttpStatusCode;\n", "'use strict';\n\nimport utils from './utils.js';\nimport bind from './helpers/bind.js';\nimport Axios from './core/Axios.js';\nimport mergeConfig from './core/mergeConfig.js';\nimport defaults from './defaults/index.js';\nimport formDataToJSON from './helpers/formDataToJSON.js';\nimport CanceledError from './cancel/CanceledError.js';\nimport CancelToken from './cancel/CancelToken.js';\nimport isCancel from './cancel/isCancel.js';\nimport {VERSION} from './env/data.js';\nimport toFormData from './helpers/toFormData.js';\nimport AxiosError from './core/AxiosError.js';\nimport spread from './helpers/spread.js';\nimport isAxiosError from './helpers/isAxiosError.js';\nimport AxiosHeaders from \"./core/AxiosHeaders.js\";\nimport HttpStatusCode from './helpers/HttpStatusCode.js';\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios(defaultConfig);\n  const instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.HttpStatusCode = HttpStatusCode;\n\naxios.default = axios;\n\n// this module should only have a default export\nexport default axios\n", "import axios from './lib/axios.js';\n\n// This module is intended to unwrap Axios default export as named.\n// Keep top-level export same with static properties\n// so that it can keep same with es module or cjs\nconst {\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  mergeConfig\n} = axios;\n\nexport {\n  axios as default,\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  mergeConfig\n}\n", "import { runInThisContext } from 'vm';\nimport * as vscode from 'vscode';\nimport { Uri, Webview } from 'vscode';\nimport { executeAfkCheck, executeLiveCheck } from '../session/sessionUpdate';\n\n//activateAfkWebview is called upon extension start and registers necessary commands for afk functionality\nexport async function activateTutorialWebView(context: vscode.ExtensionContext, logger: any) {\n    //register afk provider by calling class constructor\n    const provider = new TutorialWebViewprovider(context.extensionUri, logger);\n\n    if (provider.codeTour){\n        provider.codeTour.activate();\n    }\n    \n\n    //push and regsitser necessary commands\n    context.subscriptions.push(\n        vscode.window.registerWebviewViewProvider(TutorialWebViewprovider.viewType, provider));\n}\n\n//afk webview provider has basic functions for handling afk system\nclass TutorialWebViewprovider implements vscode.WebviewViewProvider {\n\n    //defining local variables\n    private themeConfigSection: string = 'markdown-preview-github-styles';\n    private themeConfigKey: string = 'colorTheme';\n    private defaultThemeConfiguration: string = 'auto';\n    public tuitorialPanel!: vscode.WebviewPanel;\n    public context: any;\n    public toolkitUri!: vscode.Uri;\n    public mainUri!: vscode.Uri;\n    public baseWorkspaceUri!: vscode.Uri;\n    public isTutorialActive?: boolean = true;\n    public minPages = 1;\n    public maxPages = 8;\n    public numOfTutorials: number = 0;\n    public pageButtonsHTML = \"\";\n    public tourSteps: any[] = [];\n    public codeTour = vscode.extensions.getExtension(\n        \"vsls-contrib.codetour\"\n      );\n\n    //defining base color pallettes\n    private themeConfigValues: { [key: string]: boolean } = {\n        'auto': true,\n        'system': true,\n        'light': true,\n        'dark': true\n    };\n    private currentPage = 0;\n\n    public static readonly viewType = 'gigo.tutorialView';\n\n    private _view?: vscode.WebviewView;\n    public logger: any;\n    public configPath: any;\n    public configFoldr: any;\n\n\n    constructor(\n        private readonly _extensionUri: vscode.Uri,\n        sysLogger: any,\n    ) {\n\n       \n        \n        // load configuration value for afk from\n        let gigoConfig = vscode.workspace.getConfiguration(\"gigo\");\n        this.isTutorialActive = gigoConfig.get(\"gigo.tutorial.on\");\n        this.logger = sysLogger;\n        \n    }\n\n    //_getCurrentPage retrieves the number of the current page from the configfile\n    private _getCurrentPage(webview: vscode.Webview) {\n        //get message from message hander of current page number\n        webview.onDidReceiveMessage(\n            async (message: any) => {\n                const command = message.command;\n                const text = message.text;\n\n                //verify command received is currentPage and write to config file\n                switch (command) {\n                    case \"currentPage\":\n                        try {\n                            const fs = require('fs');\n                            //create json formatted string\n                            let yamlContent = `{\\\"currentPageNum\\\": ${text}}`;\n                            //write json formatted string to config file\n                            fs.writeFileSync(this.configPath, yamlContent);\n                            //render page with current page number as main page\n                            if (this._view) {\n                                this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n                                await this._getHtmlForWebview(this._view.webview, \"\");\n\n                            }\n                        } catch (err) {\n                            this.logger.error.appendLine(`Tutorial Failed: Failed to change pages in tutorial view: ${err}`);\n                            console.log(err);\n                        }\n                        break;\n                    case \"nextGroup\":\n                        try {\n                            if (this._view) {\n                                this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n                                await this._getHtmlForWebview(this._view.webview, \"next\");\n\n                            }\n\n                        } catch (err) {\n                            this.logger.error.appendLine(`Tutorial Failed: Failed to change to next group in tutorial view: ${err}`);\n                            console.log(err);\n\n                        }\n                        break;\n                    case \"lastGroup\":\n                        try {\n                            if (this._view) {\n                                this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n                                await this._getHtmlForWebview(this._view.webview, \"last\");\n\n                            }\n\n                        } catch (err) {\n                            this.logger.error.appendLine(`Tutorial Failed: Failed to change to last page in tutorial view: ${err}`);\n                            console.log(err);\n\n                        }\n                        break;\n                    case \"startCodeTour\":\n                        try {\n                            if (this.codeTour) {\n                                const codeTourApi = this.codeTour.exports;\n                                let uri = vscode.Uri.file(`${this.baseWorkspaceUri.fsPath}/.gigo/.tours/tutorial-${message.text}.tour`);\n                                codeTourApi.startTourByUri(uri);\n                            }\n\n                        } catch (err) {\n                            this.logger.error.appendLine(`Tutorial Failed: Failed to start code tour in tutorial view: ${err}`);\n                            console.log(err);\n\n                        }\n                        break;\n                    case \"startCodeTourStep\":\n                        try {\n                            const step = message.step;\n                            if (this.codeTour) {\n                                const codeTourApi = this.codeTour.exports;\n                                let uri = vscode.Uri.file(`${this.baseWorkspaceUri.fsPath}/.gigo/.tours/tutorial-${message.text}.tour`);\n                                try {\n                                    await codeTourApi.endCurrentTour();\n                                } catch (err) {\n                                    this.logger.error.appendLine(`Tutorial Failed: Failed partial execution fo code tour step in tutorial view: ${err}`);\n                                }\n                                await codeTourApi.startTourByUri(uri, 0);\n                                await codeTourApi.startTourByUri(uri, step - 1);\n                                // await codeTourApi.startTourByUri(uri, step - 1);\n                                //codeTourApi.startTourByUri(uri, step - 1);\n                                \n                                //codeTourApi.endCurrentTour();\n                            }\n\n                        } catch (err) {\n                            this.logger.error.appendLine(`Tutorial Failed: Failed to start code tour step in tutorial view: ${err}`);\n                            console.log(err);\n\n                        }\n                        break;\n\n                        return;\n                }\n            },\n            undefined,\n        );\n    }\n\n\n    //resolveWebviewView handles editor callback functions and basic html render\n    public async resolveWebviewView(\n        webviewView: vscode.WebviewView,\n        context: vscode.WebviewViewResolveContext,\n        _token: vscode.CancellationToken,\n    ) {\n\n        this._view = webviewView;\n\n\n\n        //setup webview\n        webviewView.webview.options = {\n            // Allow scripts in the webview\n            enableScripts: true,\n\n            localResourceRoots: [\n                this._extensionUri\n            ]\n        };\n\n        //ensure that user has opened a project before continuing\n        if (!vscode.workspace.workspaceFolders) {\n            vscode.window.showInformationMessage(\"Open a folder/workspace first\");\n            this.logger.error.appendLine(`Tutorial Failed: Failed to start tutorial, a workspace must be open`);\n            return;\n        }\n\n        //set base path of workspace for future file handling \n        this.baseWorkspaceUri = vscode.workspace.workspaceFolders[0].uri;\n        this.baseWorkspaceUri.fsPath.replace(\"file://\", \"\");\n\n        const path = require('node:path');\n        this.configPath =  path.join(this.baseWorkspaceUri.fsPath, \".gigo/tutorial/.tutorial_config.json\");\n        this.configFoldr = path.join(this.baseWorkspaceUri.fsPath, \".gigo/tutorial\");\n\n\n        if (this._view) {\n            this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n            this._getCurrentPage(this._view.webview);\n            await this._getHtmlForWebview(this._view.webview, \"\");\n        }\n\n        //callback for registered commands\n        webviewView.webview.onDidReceiveMessage(data => {\n            switch (data.type) {\n                case \"hello\":\n                    //display message when hello command is called\n                    vscode.window.showInformationMessage(data.text);\n                    return;\n            }\n        });\n    }\n\n    //addColor sends color message to messsage handler\n    public addColor() {\n        if (this._view) {\n            this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n            this._view.webview.postMessage({ type: 'addColor' });\n        }\n    }\n\n    //clearColors sends color message to clear colors to message handler\n    public clearColors() {\n        if (this._view) {\n            this._view.webview.postMessage({ type: 'clearColors' });\n        }\n    }\n\n\n\n    //_getHtmlForWebview renders afk enbaled and disabled pages\n    private async _getHtmlForWebview(webview: vscode.Webview, group: string) {\n        {\n            await this._getHtml(webview, group);\n        }\n    }\n\n\n    //findMDFiles finds all markdown files in the workspace folder\n    public async findMDFiles(): Promise<any[]> {\n        var mdArr: any[] = [];\n        try {\n            const fs = require('fs');\n            const markdown = require('markdown-it');\n            const shiki = require('shiki');\n            var md: any;\n\n            //use shikit to render markdown syntax and get all markdown files\n            await shiki.getHighlighter({\n                theme: 'github-dark'\n            }).then((highlighter: { codeToHtml: (arg0: any, arg1: { lang: any; }) => any; }) => {\n                //render markdown with shiki highlighter\n                const md = markdown({\n                    html: true,\n                    highlight: (code: any, lang: any) => {\n                        return highlighter.codeToHtml(code, { lang });\n                    }\n                });\n                //get path to tutorial\n                let tuitotialPaths = this.baseWorkspaceUri.fsPath + \"/.gigo\" + \"/.tutorials/\";\n                //get all README files from file path and push to markdown array\n                fs.readdir(tuitotialPaths, (err: any, files: any) => {\n                    files.forEach((f: any) => {\n                        if (f.endsWith(\".md\") && f.indexOf(\"tutorial-\") !== -1) {\n                            var numberPattern = /\\d+/g;;\n                            let tutorialNum = f.match(numberPattern)[0];\n                            if (tutorialNum) {\n                                mdArr[tutorialNum - 1] = md.render(fs.readFileSync(`${tuitotialPaths}${f}`, 'utf-8'));\n                            }\n                        }\n                    });\n\n                });\n            });\n\n        } catch (err) {\n            this.logger.error.appendLine(`Tutorial Failed: Failed to start tutorial, a workspace must be open`);\n            console.log(err);\n        }\n\n\n\n        //return markdown array\n        return await mdArr;\n    }\n\n    public getCodeTours(): any{\n        const fs = require('fs');\n        var ctArr: any[] = [];\n        var numberPattern = /\\d+/g;;\n     \n        \n        let tourPaths = this.baseWorkspaceUri.fsPath + \"/.gigo\" + \"/.tours/\";\n        fs.readdir(tourPaths, (err: any, files: any) => {\n            files.forEach((f: any) => {\n                if (f.endsWith(\".tour\") && f.indexOf(\"tutorial-\")!== -1){\n                    let tourNum = f.match(numberPattern)[0];\n                    if (tourNum) {\n                        let tour = fs.readFileSync(`${tourPaths}${f}`, 'utf-8');\n                        let ts = JSON.parse(tour).steps;\n                        this.tourSteps[tourNum - 1] = ts.length;\n                        ctArr[tourNum - 1] = f;\n                    }\n                }\n            });\n        });\n        return ctArr;\n    }\n\n\n    private getUri(webview: Webview, extensionUri: Uri, pathList: string[]) {\n        return webview.asWebviewUri(Uri.joinPath(extensionUri, ...pathList));\n    }\n\n\n\n    //renderBottomButtons renders the pagination buttons on the bottom of the page\n    public renderBottomButtons(currentPgNum: number) {\n\n        let bottomPages = \"\";\n\n        //if the current page number is more than 8\n        if (currentPgNum > 8) {\n            //set the max number of displayed pages to be the next number above the current divisible by 8\n            this.maxPages = (currentPgNum + 8) - ((currentPgNum + 8) % 8);\n            //set the min number to be the next number below the current divisible by 8\n            this.minPages = currentPgNum - (currentPgNum % 8);\n        }\n\n        //add last group button to return to the last grouping of 8 pages\n        let lastGroup = `<button class=\"pageButton\" name=\"lastPageGroup\" onclick=\"lastGroup()\"><</button>`;\n        //add next page group button to proceed to the next grouping of 8 pages\n        let nextGroup = `<button class=\"pageButton\" name=\"nextPageGroup\" onclick=\"nextGroup()\">></button>`;\n\n        //if the current page number is less than 8\n        if (currentPgNum < 8) {\n            //disable the last group button as there are no groups before this\n            lastGroup = `<button disabled class=\"pageButton\" name=\"lastPageGroup\" onclick=\"lastGroup()\"><</button>`;\n            //set the range to be 1-8\n            this.maxPages = 8;\n            this.minPages = 1;\n        }\n\n\n        //add last group button to page render\n        bottomPages += lastGroup;\n\n\n        //if the current page number is divisible by 8 and that number is not 1 or 0\n        if ((currentPgNum % 8 === 0) && (currentPgNum > 1)) {\n            //add 8 to the max range and set the min range to be the current number\n            this.maxPages = currentPgNum + 8;\n            this.minPages = currentPgNum;\n        }\n\n        //if the max of the range has exceeded the number of markdown files\n        if (this.maxPages >= this.numOfTutorials) {\n            //set the max range to the number of markdown files\n            this.maxPages = this.numOfTutorials;\n            //disable the next group button as there are no groups after this\n            nextGroup = `<button disabled class=\"pageButton\" name=\"nextPageGroup\" onclick=\"nextGroup()\">></button>`;\n        }\n\n\n        //iterate from the minPage to the maxPage and add a pagination button for each number in the range\n        for (let i = this.minPages; i <= this.maxPages; i++) {\n            if (i === currentPgNum) {\n                bottomPages += `<button disabled current class=\"pageButton\" onclick=\"page(${i})\" name=\"page-${i}\">${i}</button>\\n`;\n                continue;\n            }\n            bottomPages += `<button class=\"pageButton\" onclick=\"page(${i})\" name=\"page-${i}\">${i}</button>\\n`;\n        }\n\n        //if the current page number is greater than or equal to the number of markdown files\n        if (currentPgNum >= this.numOfTutorials) {\n            //disable the next page group button as there are no groups after this\n            nextGroup = `<button disabled class=\"pageButton\" name=\"nextPageGroup\" onclick=\"nextGroup()\">></button>`;\n        }\n\n        // //add next page group button to proceed to the next grouping of 8 pages\n        bottomPages += nextGroup;\n\n        //set html to page button variable to be added to page later\n        this.pageButtonsHTML = bottomPages;\n\n    }\n\n\n    //nextPageGroup reRenders only the bottom pagination buttons to allow the user to scroll to the next grouping without changing pages\n    public nextPageGroup(currentPgNum: number) {\n        let bottomPages = \"\";\n\n        this.minPages = (this.maxPages) - (this.maxPages) % 8;\n\n        if (this.minPages < 0) {\n            this.minPages = 1;\n        }\n\n        //set the min pages to the old max\n        //this.minPages = this.maxPages;\n        //set the maxpages to the next page number divisible by 8\n        this.maxPages = (this.maxPages + 8) - (this.maxPages + 8) % 8;\n\n        //last group button allows user to scroll back to the last grouping of 8 pages\n        let lastGroup = `<button class=\"pageButton\" name=\"lastPageGroup\" onclick=\"lastGroup()\"><</button>`;\n        //add last group button to the page\n        bottomPages += lastGroup;\n\n        //next group button allows user to scroll to the next grouping of 8 pages\n        let nextGroup = `<button class=\"pageButton\" name=\"nextPageGroup\" onclick=\"nextGroup()\">></button>`;\n\n\n\n\n        //if the max pages has exceeded the number of markdown files\n        if (this.maxPages >= this.numOfTutorials) {\n            //disable the next group button\n            nextGroup = `<button disabled class=\"pageButton\" name=\"nextPageGroup\" onclick=\"nextGroup()\">></button>`;\n            //set the max pages to the number of markdown files\n            this.maxPages = this.numOfTutorials;\n        }\n\n\n        //iterate over the range from minPages to maxPages and create the page buttons\n        for (let i = this.minPages; i <= this.maxPages; i++) {\n            //when the currently displayed markdown is reached, disbaled the page button for it\n            if (i === currentPgNum) {\n                bottomPages += `<button disabled current class=\"pageButton\" onclick=\"page(${i})\" name=\"page-${i}\">${i}</button>\\n`;\n                continue;\n            }\n            //add the page button to the page\n            bottomPages += `<button class=\"pageButton\" onclick=\"page(${i})\" name=\"page-${i}\">${i}</button>\\n`;\n        }\n\n        //if the current page is the last page\n        if (currentPgNum >= this.numOfTutorials) {\n            //disabled the next group button\n            nextGroup = `<button disabled class=\"pageButton\" name=\"nextPageGroup\" onclick=\"nextGroup()\">></button>`;\n        }\n\n        //add the next group button to the page\n        bottomPages += nextGroup;\n\n        //set the page button member variable to be the html generated in this function\n        this.pageButtonsHTML = bottomPages;\n\n    }\n\n\n    //lastPageGroup reRenders only the bottom pagination buttons to allow the user to scroll to the last grouping without changing pages\n    public lastPageGroup(currentPageNum: number) {\n        let bottomPages = \"\";\n\n        //set the max number pages to the old minimum number of pages\n        this.maxPages = this.minPages;\n        //subtract 8 from the min number of pages\n        this.minPages = this.minPages - 8;\n\n\n\n        //create last page button and next page button for pagination of the last and next grouping of 8 respectively\n        let lastGroup = `<button class=\"pageButton\" name=\"lastPageGroup\" onclick=\"lastGroup()\"><</button>`;\n        let nextGroup = `<button class=\"pageButton\" name=\"nextPageGroup\" onclick=\"nextGroup()\">></button>`;\n\n        //if the min number of pages is less than 1 \n        if (this.minPages <= 0) {\n            //set the number of pages to 1\n            this.minPages = 1;\n            //disable the last group button\n            lastGroup = `<button disabled class=\"pageButton\" name=\"lastPageGroup\" onclick=\"lastGroup()\"><</button>`;\n        }\n\n\n\n        //if the max pages is less than or equal to 8\n        if (this.maxPages <= 8) {\n            //disable the last group button\n            lastGroup = `<button disabled class=\"pageButton\" name=\"lastPageGroup\" onclick=\"lastGroup()\"><</button>`;\n            if (this.numOfTutorials >= 8) {\n                this.maxPages = 8;\n            }\n        }\n\n        //add the last group button to the page\n        bottomPages += lastGroup;\n\n        //iterate over the range of minPages to maxPages and add the page buttons\n        for (let i = this.minPages; i <= this.maxPages; i++) {\n            //when the current page number is reached\n            if (i === currentPageNum) {\n                //disable the current page button\n                bottomPages += `<button disabled class=\"pageButton\" onclick=\"page(${i})\" name=\"page-${i}\">${i}</button>\\n`;\n                continue;\n            }\n            //add the page button to the page\n            bottomPages += `<button class=\"pageButton\" onclick=\"page(${i})\" name=\"page-${i}\">${i}</button>\\n`;\n        }\n\n        //ad the next group button to the page\n        bottomPages += nextGroup;\n\n        //set the page buttons to the member variable for the bottom of the page\n        this.pageButtonsHTML = bottomPages;\n    }\n\n    //_getAfkDisabledHtml renders page for when afk is disabled\n    //takes in a group string to determine whether to render the whole page or\n    //to just render the next and last group page controls\n    private async _getHtml(webview: vscode.Webview, group: string) {\n        //get markdown files\n        let mds = await this.findMDFiles();\n        let cts = this.getCodeTours();\n\n        //init packages\n        const fs = require('fs');\n        const markdown = require('markdown-it');\n        const shiki = require('shiki');\n\n        //get shiki highlighter\n        shiki.getHighlighter({\n            theme: 'github-dark'\n        }).then((highlighter: { codeToHtml: (arg0: any, arg1: { lang: any; }) => any; }) => {\n            const md = markdown({\n                html: true,\n                highlight: (code: any, lang: any) => {\n                    return highlighter.codeToHtml(code, { lang });\n                }\n            });\n\n            var currentPgNum: any;\n\n            //check if tutorial config exists and get current page number\n            try {\n                \n  \n                \n                //if tutorial config exists get current page number from it\n                if (fs.existsSync(this.configPath)) {\n                    let obj = JSON.parse(fs.readFileSync(this.configPath, 'utf8'));\n                    currentPgNum = obj.currentPageNum;\n                    this.logger.info.appendLine(`Tutorial: Loaded tutorial config.`);\n\n                } else {\n                    //if tutorial config does not exist create it and set current page number to 1\n                    let yamlContent = \"{\\\"currentPageNum\\\": 1}\";\n                    if (!fs.existsSync(this.configFoldr)){\n                        fs.mkdirSync(this.configFoldr);\n                    }\n                    \n                    fs.writeFileSync(this.configPath, yamlContent);\n                    currentPgNum = 1;\n                    this.logger.info.appendLine(`Tutorial: Created new tutorial config.`);\n\n                }\n            } catch (err) {\n                this.logger.error.appendLine(`Tutorial Failed: Failed to open/create tutorial config: ${err}`);\n                console.log(err);\n                return;\n            }\n\n            //html of previous button\n            var previousButton = `<button class=\"enable-gigo-tutorial-previous-button\">Previous Tutorial</button>`;\n\n            //if current page number is 1 disable previoous button\n            if (currentPgNum === 1) {\n                previousButton = ` <button disabled class=\"enable-gigo-tutorial-previous-button\">Previous Tutorial</button>`;\n            }\n\n            //html of next button\n            var nextButton = `<button class=\"enable-gigo-tutorial-next-button\">Next Tutorial</button>`;\n\n            //if current page number is last page disable next button\n            if (currentPgNum >= mds.length) {\n                nextButton = `<button disabled class=\"enable-gigo-tutorial-next-button\">Next Tutorial</button>`;\n            }\n\n            //set current index to bed 1 less than current page\n            let index = currentPgNum - 1;\n\n\n\n            // Get the local path to main script run in the webview, then convert it to a uri we can use in the webview.\n            const scriptUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'tutorial', 'buttons_tutorial.js'));\n\n            // Do the same for the stylesheet.\n            const styleResetUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'tutorial', 'reset_tutorial.css'));\n            const styleVSCodeUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'tutorial', 'vscode_tutorial.css'));\n            const styleMainUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'tutorial', 'main_tutorial.css'));\n\n            // Use a nonce to only allow a specific script to be run.\n            const nonce = getNonce();\n\n            //set the number of tutorials to the current number of markdown files matching the preset formatting\n            this.numOfTutorials = mds.length;\n\n            let codeTourButton = \"\";\n\n            if (cts[index]){\n                codeTourButton = ` <div class=\"codeTourLink\">\n                    <button id=\"codeTour\" class=\"codeTourButton\" onclick=\"startCodeTour(${currentPgNum})\">Start CodeTour</button>\n                </div>`;\n                if (mds[index].indexOf(\"@@@\")){\n                    var numberPattern = '@@@.*([Ss][Tt][Ee][Pp]).*(?<step_number>\\\\d+).*@@@';\n                    let stepNumber = [...mds[index].matchAll(numberPattern)];\n                    for (let i = 0; i < stepNumber.length; i++) {\n                        if (stepNumber[i][2] > this.tourSteps[index]){\n                            continue;\n                        }\n                        let stepButton = ` <div class=\"codeTourStep\">\n                        <button id=\"codeStep${stepNumber[i][2]}\" class=\"codeTourStep\" onclick=\"startCodeTour(${currentPgNum}, ${stepNumber[i][2]})\">Interactive Step ${stepNumber[i][2]}</button>\n                    </div>`;\n                        mds[index] = mds[index].replace(stepNumber[i][0], stepButton);\n                       \n                    }\n\n\n                }\n            }\n\n            \n\n            //group control\n            switch (group) {\n                //render the next group page buttons\n                case \"next\":\n                    this.nextPageGroup(currentPgNum);\n                    break;\n                //render the last group page buttons\n                case \"last\":\n                    this.lastPageGroup(currentPgNum);\n                    break;\n                //if no string is input or an unrecognized string is passed\n                //render the page normally\n                default:\n                    this.renderBottomButtons(currentPgNum);\n                    break;\n            }\n\n            if (mds[index] === undefined) {\n                mds[index] = \"For a more interactive experience add tutorials for others to view.\";\n                this.logger.info.appendLine(`Tutorial: No tutorials found in workspace.`);\n            }\n\n            if (this._view) {\n                //render the html for the page by passing it to the view\n                this._view.webview.html = `<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n            <input name=\"currentPgNum\" type=\"hidden\" value=\"${currentPgNum}\"></input>\n            <input name=\"maxPageNum\" type=\"hidden\" value=\"${mds.length}\"></input>\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<!--\n\t\t\t\t\tUse a content security policy to only allow loading styles from our extension directory,\n\t\t\t\t\tand only allow scripts that have a specific nonce.\n\t\t\t\t\t(See the 'webview-sample' extension sample for img-src content security policy examples)\n\t\t\t\t-->\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource}; script-src 'nonce-${nonce}';\">\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t<link href=\"${styleResetUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleMainUri}\" rel=\"stylesheet\">\n\t\t\t\t<title>GIGO AFK Session</title>\n\t\t\t</head>\n            ${codeTourButton}\n            <div id=\"big\">\n                ${mds[index]}\n            </div>\n\t\t\t<body>\n                <br/>\n                <br/>\n                <div id=\"nextButton\">\n                    ${nextButton}\n                </div>\n                <div id=\"previousButton\">\n                    ${previousButton}\n                </div>\n                <br/>\n                <br/>\n                <div class=\"pageButtonContainer\">\n                    ${this.pageButtonsHTML}\n                </div>\n               \n\t\t\t</body>\n\n            <style>\n                :root {\n                    --shiki-color-text: #EEEEEE;\n                    --shiki-color-background: #333333;\n                    --shiki-token-constant: #660000;\n                    --shiki-token-string: #770000;\n                    --shiki-token-comment: #880000;\n                    --shiki-token-keyword: #990000;\n                    --shiki-token-parameter: #AA0000;\n                    --shiki-token-function: #BB0000;\n                    --shiki-token-string-expression: #CC0000;\n                    --shiki-token-punctuation: #DD0000;\n                    --shiki-token-link: #EE0000;\n                }\n                </style>\n                        \n            <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n           \n\t\t\t</html>`;\n            }\n\n\n        });\n\n\n\n\n\n\n    }\n\n\n}\n\n\n\nfunction getNonce() {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 32; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}", "import axios from 'axios';\nimport { runInThisContext } from 'vm';\nimport * as vscode from 'vscode';\nimport { Uri, Webview } from 'vscode';\nimport {getExplosion} from './explosion';\n\nvar messageData: any;\n\n//activateAfkWebview is called upon extension start and registers necessary commands for afk functionality\nexport async function activateStreakWebView(context: vscode.ExtensionContext, cfg: any, logger: any) {\n    //register afk provider by calling class constructor\n    const provider = new StreakWebViewprovider(context.extensionUri, logger);\n\n    // let res = await provider.executeStreakCheck(cfg.workspace_id_string, cfg.secret);\n    // console.log(res);\n    logger.info.appendLine(\"Streak: starting streak websocket\")\n    provider.websocketStreakCheck(cfg.workspace_id_string, cfg.secret)\n    provider.renewStats();\n\n    //push and regsitser necessary commands\n    context.subscriptions.push(\n        vscode.window.registerWebviewViewProvider(StreakWebViewprovider.viewType, provider));\n}\n\n//afk webview provider has basic functions for handling afk system\nclass StreakWebViewprovider implements vscode.WebviewViewProvider {\n\n    //defining local variables\n    public tuitorialPanel!: vscode.WebviewPanel;\n    public context: any;\n    public toolkitUri!: vscode.Uri;\n    public mainUri!: vscode.Uri;\n    public baseWorkspaceUri!: vscode.Uri;\n\n    public streakAnim: any;\n    public streakNum: any;\n\n    public decorations: vscode.TextEditorDecorationType[] = [];\n\n    public activeDays!: any;\n    public activeDaysHTML: string = `\n    <div class=\"weekday\"><span>M</span></div>\n    <div class=\"separator\">-</div>\n    <div class=\"weekday\"><span>T</span></div>\n    <div class=\"separator\">-</div>\n    <div class=\"weekday\"><span>W</span></div>\n    <div class=\"separator\">-</div>\n    <div class=\"weekday\"><span>T</span></div>\n    <div class=\"separator\">-</div>\n    <div class=\"weekday\"><span>F</span></div>\n    <div class=\"separator\">-</div>\n    <div class=\"weekday\"><span>S</span></div>\n    <div class=\"separator\">-</div>\n    <div class=\"weekday\"><span>S</span></div>`;\n\n\n    public weekDays: string[] =[\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n\n    public isOnFire: boolean = false;\n    public dayOfTheWeek: string = \"\";\n   \n\n    public static readonly viewType = 'gigo.streakView';\n\n    private _view?: vscode.WebviewView;\n    public logger: any;\n\n  \n\n    constructor(\n        private readonly _extensionUri: vscode.Uri,\n        sysLogger: any,\n    ) {\n\n        this.logger = sysLogger;\n        // this.activeDays = [1,2];\n\n        this.streakAnim = `<div class=\"streakAnim\">\n        <script src=\"https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js\"></script> \n        <lottie-player src=\"https://lottie.host/6a43c37a-8fb7-43e8-adcb-1a650a039733/NwYos3Ht64.json\" background=\"transparent\" speed=\"1\"  loop autoplay></lottie-player>\n        </div>`;\n        // load configuration value for afk from\n        let gigoConfig = vscode.workspace.getConfiguration(\"gigo\");\n        \n        \n    }\n\n\n    // public websocketStreakCheck(wsID: any, secret: any){\n    //     const WebSocket = require('isomorphic-ws');\n\n    //     const ws = new WebSocket(`wss://api.gigo.dev/internal/v1/ext/streak-check/${wsID}/${secret}`);\n\n    //     ws.onerror = function error(err: any){\n    //         console.log('Streak Websocket: failed, err: ', err);\n    //     };\n\n    //     ws.onopen = function open() {\n    //     console.log('Streak Websocket: connected');\n    //     // ws.send(Date.now());\n    //     ws.send('PONG');\n    //     };\n\n    //     ws.onclose = function close() {\n    //     console.log('Streak Websocket: disconnected');\n    //     };\n\n    //     ws.onmessage = function incoming(data: any) {\n    //     console.log(`Streak Websocket: Roundtrip time: ${Date.now() - data.data} ms`);\n\n    //     setTimeout(function timeout() {\n    //         ws.send(Date.now());\n    //     }, 500);\n    //     };\n    // }\n\n    public websocketStreakCheck(wsID: any, secret: any) {\n        \n        var WebSocketClient = require('websocket').client;\n\n        var client = new WebSocketClient();\n\n        client.on('connectFailed', function(error: any) {\n            console.log('Connect Error: ' + error.toString());\n        });\n\n        let logger = this.logger;\n        logger.info.appendLine(\"Streak: inside streak websocket\")\n\n        client.on('connect', function(connection: any) {\n            console.log('WebSocket Client Connected');\n            logger.info.appendLine('WebSocket Client Connected')\n            connection.on('error', function(error: any) {\n                console.log(\"Connection Error: \" + error.toString());\n                logger.error.appendLine(\"Connection Error: \" + error.toString())\n            });\n            connection.on('close', function() {\n                console.log('echo-protocol Connection Closed');\n                logger.error.appendLine('echo-protocol Connection Closed');\n            });\n            connection.on('message', function(message: any) {\n                if (message.type === 'utf8') {\n                    if (message.utf8Data === \"PING\"){\n                        client.send(\"PONG\");\n                    }\n                    console.log(\"Received: '\" + message.utf8Data + \"'\");\n                    logger.info.appendLine(\"Received: '\" + message.utf8Data + \"'\");\n\n                    if (message.utf8Data !== 'Socket connected successfully'){\n                        try{\n                            messageData = JSON.parse(message.utf8Data);\n                        }catch(err){\n                            console.log(message.utf8Data)\n                            console.log(\"Streak: failed to parse message intio json, err: \", err, \" message: \", message.utf8Data)\n                        }\n                    }\n                   \n                    \n                }\n            });\n\n        \n        });\n\n        logger.info.appendLine(\"Streak: calling websocket\");\n\n        client.connect(`wss://api.gigo.dev/internal/v1/ext/streak-check/${wsID}/${secret}`);\n    }\n\n\n    public async renewStats(){\n\n        while(true){\n            console.log(\"display explode\")\n            // this.explode(vscode.window.activeTextEditor, false);\n            console.log(\"past explode\")\n            try{\n                let wasFire = this.isOnFire\n                this.isOnFire = messageData.streak_active;\n                this.activeDays = messageData.week_in_review;\n                this.streakNum = messageData.current_streak;\n                this.dayOfTheWeek = messageData.current_day_of_week;\n\n                \n\n                if (!wasFire && this.isOnFire){\n                    console.log(\"displaying notification streak wasFire: \", wasFire, \" isOnFire: \", this.isOnFire)\n                    this.explode(vscode.window.activeTextEditor, false);\n                }\n\n                console.log(\"Streak: set params{ isOnFire: \", messageData.streak_active, \" weekInReview: \", messageData.week_in_review, \" streakNum: \", messageData.current_streak, \" current day of week: \", messageData.current_day_of_week);\n                if (this._view) {\n\n                    if(this._view.visible){\n                        this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n                        //this._getCurrentPage(this._view.webview);\n                        await this._getHtmlForWebview(this._view.webview, \"\");\n                    }\n                  \n                }\n        \n\n            }catch(err){\n                console.log(\"Streak: failed to set variables from message, err: \", err)\n            }\n\n\n            await new Promise(f => setTimeout(f, 4000));\n            for (let d in this.decorations){\n                this.decorations[d].dispose();\n            }\n            \n                            \n            //wait for 1 minute before checking again\n            await new Promise(f => setTimeout(f, 1000));\n        }\n       \n    }\n\n    //executeAfkCheck will execute a call to get an afk session timestamp from the http function in GIGO\n    public async executeStreakCheck(wsID: any, secret: any){\n        //awair result from http function in GIGO\n        let res = await axios.post(\n            \"https://api.gigo.dev/internal/v1/ext/streak-check\", \n            {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                \"workspace_id\": wsID,\n                \"secret\": secret,\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                // \"owner_id\": ownerID,\n\n            }\n        );\n\n        //if non status code 200 is returned, return -1 and log failure message\n        if (res.status !== 200) { \n            console.log(\"failed to execute live-check: \", res);\n            return -1;\n        }\n\n        console.log(JSON.stringify(res));\n        this.logger.info.appendLine(JSON.stringify(res));\n        vscode.window.showInformationMessage(`${JSON.stringify(res)}`)\n\n        this.isOnFire = res.data.is_on_fire;\n        this.activeDays = res.data.streak_week_days;\n        this.streakNum = res.data.current_streak_num;\n        \n        return; \n    }\n\n\n    private explode = (editor: vscode.TextEditor | any, left = false) => {\n        console.log(\"inside explode\")\n        // To give the explosions space, only explode every X strokes\n        // Where X is the configured explosion frequency\n        // This counter resets if the user does not type for 1 second.\n        // clearTimeout(this.counterTimeout);\n        // this.counterTimeout = setTimeout(() => {\n        //     this.keystrokeCounter = -1;\n        // }, 1000);\n\n        // if (++this.keystrokeCounter % this.config[\"explosions.frequency\"] !== 0) {\n        //     return;\n        // }\n\n        const cursorPosition = editor.selection.active;\n        // The delta is greater to the left than to the right because otherwise the gif doesn't appear\n        const delta = left ? -2 : 1;\n        // const newRange = new vscode.Range(\n        //     cursorPosition.with(cursorPosition.line, cursorPosition.character),\n        //     // Value can't be negative\n        //     cursorPosition.with(cursorPosition.line, Math.max(0, cursorPosition.character + delta))\n        // );\n\n        console.log(\"cursor position: \", editor.visibleRanges[0])\n\n        // var start = Math.floor(Math.random() * cursorPosition.line - 1);\n        // var end = Math.floor(Math.random() * cursorPosition.line - 1);\n\n        var start = editor.visibleRanges[0].start.line;\n        var end = editor.visibleRanges[0].end.line  - 5;\n        \n        \n\n\n        if (start < 1){\n            start = 1\n        }\n\n        if (end < 1){\n            end = 1;\n        }\n\n        console.log(\"start and end: \", start, end)\n\n\n        const newRange = new vscode.Range(\n            editor.document.lineAt(start).range.start,\n            // Value can't be negative\n            editor.document.lineAt(end).range.start\n        );\n\n        // Dispose excess explosions\n        // while(this.activeDecorations.length >= this.config[\"explosions.maxExplosions\"]) {\n        //     this.activeDecorations.shift().dispose();\n        // }\n\n        \n\n        // A new decoration is used each time because otherwise adjacent\n        // gifs will all be identical. This helps them be at least a little\n        // offset.\n        // const decoration = this.getExplosionDecoration(newRange.start);\n        const decoration = this.getExplosionDecoration(newRange.end);\n        if (!decoration) {\n            return;\n        }\n\n        console.log(\"anim placement: \", newRange.end)\n\n\n        this.decorations.push(decoration);\n       \n        // editor.setDecorations(decoration, [newRange]);\n        editor.setDecorations(decoration, [newRange]);\n\n\n    }\n\n\n    private getExplosionDecoration = (position: vscode.Position): any => {\n        const explosion = getExplosion();\n\n        console.log(\"animation range: \", position)\n        if (!explosion) {\n            return null;\n        }\n\n        return this.createExplosionDecorationType(explosion, position);\n    }\n\n\n\n    private createExplosionDecorationType = (explosion: string, editorPosition: vscode.Position ): vscode.TextEditorDecorationType => {\n        // subtract 1 ch to account for the character and divide by two to make it centered\n        // Use Math.floor to skew to the right which especially helps when deleting chars\n\n        // const leftValue = Math.floor((10 - 1) / 2);\n\n        const leftValue = Math.floor(Math.random() * (30 - 1 + 1) + 1);\n        console.log(\"left value: \", leftValue)\n\n        // By default, the top of the gif will be at the top of the text.\n        // Setting the top to a negative value will raise it up.\n        // The default gifs are \"tall\" and the bottom halves are empty.\n        // Lowering them makes them appear in a more natural position,\n        // but limiting the top to the line number keeps it from going\n        // off the top of the editor\n        const topValue = 10 * .25;\n\n        const explosionUrl = explosion;\n\n        const backgroundCss = this.getBackgroundCssSettings(\"https://api.gigo.dev/static/ext/streak-notif.gif\");\n        console.log(\"https://api.gigo.dev/static/ext/streak-notif.gif\");\n\n        const defaultCss = {\n            position: 'absolute',\n            [\"margin-left\"] : `-${leftValue}ch`,\n            loop: 'once',\n            width: `10ch`,\n            height: `10rem`,\n            display: `inline-block`,\n            ['z-index']: 1,\n            ['pointer-events']: 'none',\n        };\n\n        const backgroundCssString = this.objectToCssString(backgroundCss);\n        const defaultCssString = this.objectToCssString(defaultCss);\n        const customCssString = this.objectToCssString({});\n\n        // return vscode.window.createTextEditorDecorationType(<vscode.DecorationRenderOptions>{\n        //     before: {\n        //         contentText: '',\n        //         textDecoration: `none; ${defaultCssString} ${backgroundCssString} ${customCssString}`,\n        //     },\n        //     textDecoration: `none; position: relative;`,\n        //     rangeBehavior: vscode.DecorationRangeBehavior.ClosedClosed,\n        // });\n\n\n\n        return vscode.window.createTextEditorDecorationType(<vscode.DecorationRenderOptions>{\n            before: {\n                contentText: '',\n                textDecoration: `none; ${defaultCssString} ${backgroundCssString} ${customCssString}`,\n            },\n            textDecoration: `none; position: relative;`,\n            rangeBehavior: vscode.DecorationRangeBehavior.ClosedClosed,\n        });\n\n      \n    }\n\n    private getBackgroundCssSettings(explosion: any) {\n        return {\n            'background-repeat': 'no-repeat',\n            'background-size': 'contain',\n            'background-image': `url(\"${explosion}\")`,\n            'width': `600px`,\n            'height': `600px`,\n            'top': `10%`,\n            'left': `40%`,\n            // 'filter': `invert(53%) sepia(18%) saturate(5540%) hue-rotate(353deg) brightness(104%) contrast(101%);`\n        }\n    }\n\n    private getMaskCssSettings(explosion: string): any {\n        return {\n            'background-color': 'currentColor',\n            '-webkit-mask-repeat': 'no-repeat',\n            '-webkit-mask-size': 'contain',\n            '-webkit-mask-image': `url(\"${explosion}\")`,\n            filter: 'saturate(150%)',\n        }\n    }\n\n    private objectToCssString(settings: any): string {\n        let value = '';\n        const cssString = Object.keys(settings).map(setting => {\n            value = settings[setting];\n            if (typeof value === 'string' || typeof value === 'number') {\n                return `${setting}: ${value};`\n            }\n        }).join(' ');\n\n        return cssString;\n    }\n\n\n    // //_getCurrentPage retrieves the number of the current page from the configfile\n    // private _getCurrentPage(webview: vscode.Webview) {\n    //     //get message from message hander of current page number\n    //     webview.onDidReceiveMessage(\n    //         async (message: any) => {\n    //             const command = message.command;\n    //             const text = message.text;\n\n    //             //verify command received is currentPage and write to config file\n    //             switch (command) {\n    //                 case \"currentPage\":\n    //                     try {\n    //                         const fs = require('fs');\n    //                         //create json formatted string\n    //                         let yamlContent = `{\\\"currentPageNum\\\": ${text}}`;\n    //                         //write json formatted string to config file\n    //                         fs.writeFileSync(this.baseWorkspaceUri.fsPath + \"/.tutorial_config.json\", yamlContent);\n    //                         //render page with current page number as main page\n    //                         if (this._view) {\n    //                             this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n    //                             await this._getHtmlForWebview(this._view.webview, \"\");\n\n    //                         }\n    //                     } catch (err) {\n    //                         console.log(err);\n    //                     }\n    //                     break;\n    //                 case \"nextGroup\":\n    //                     try {\n    //                         if (this._view) {\n    //                             this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n    //                             await this._getHtmlForWebview(this._view.webview, \"next\");\n\n    //                         }\n\n    //                     } catch (err) {\n    //                         console.log(err);\n\n    //                     }\n    //                     break;\n    //                 case \"lastGroup\":\n    //                     try {\n    //                         if (this._view) {\n    //                             this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n    //                             await this._getHtmlForWebview(this._view.webview, \"last\");\n\n    //                         }\n\n    //                     } catch (err) {\n    //                         console.log(err);\n    // main_afk.css\n    //                     }\n    //                     break;\n    //                 case \"startCodeTour\":\n    //                     try {\n    //                         if (this.codeTour) {\n    //                             const codeTourApi = this.codeTour.exports;\n    //                             let uri = vscode.Uri.file(`${this.baseWorkspaceUri.fsPath}/.tours/tutorial-${message.text}.tour`);\n    //                             codeTourApi.startTourByUri(uri);\n    //                         }\n\n    //                     } catch (err) {\n    //                         console.log(err);\n\n    //                     }\n    //                     break;\n    //                 case \"startCodeTourStep\":\n    //                     try {\n    //                         const step = message.step;\n    //                         if (this.codeTour) {\n    //                             const codeTourApi = this.codeTour.exports;\n    //                             let uri = vscode.Uri.file(`${this.baseWorkspaceUri.fsPath}/.tours/tutorial-${message.text}.tour`);\n    //                             try {\n    //                                 await codeTourApi.endCurrentTour();\n    //                             } catch (err) {}\n    //                             await codeTourApi.startTourByUri(uri, 0);\n    //                             await codeTourApi.startTourByUri(uri, step - 1);\n    //                             // await codeTourApi.startTourByUri(uri, step - 1);\n    //                             //codeTourApi.startTourByUri(uri, step - 1);\n                                \n    //                             //codeTourApi.endCurrentTour();\n    //                         }\n\n    //                     } catch (err) {\n    //                         console.log(err);\n\n    //                     }\n    //                     break;\n\n    //                     return;\n    //             }\n    //         },\n    //         undefined,\n    //     );\n    // }\n\n\n    //resolveWebviewView handles editor callback functions and basic html render\n    public async resolveWebviewView(\n        webviewView: vscode.WebviewView,\n        context: vscode.WebviewViewResolveContext,\n        _token: vscode.CancellationToken,\n    ) {\n\n        this._view = webviewView;\n\n\n\n        //setup webview\n        webviewView.webview.options = {\n            // Allow scripts in the webview\n            enableScripts: true,\n\n            localResourceRoots: [\n                this._extensionUri\n            ]\n        };\n\n        //ensure that user has opened a project before continuing\n        if (!vscode.workspace.workspaceFolders) {\n            vscode.window.showInformationMessage(\"Open a folder/workspace first\");\n            return;\n        }\n\n        //set base path of workspace for future file handling \n        this.baseWorkspaceUri = vscode.workspace.workspaceFolders[0].uri;\n        this.baseWorkspaceUri.fsPath.replace(\"file://\", \"\");\n\n\n\n        if (this._view) {\n            this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n            //this._getCurrentPage(this._view.webview);\n            await this._getHtmlForWebview(this._view.webview, \"\");\n        }\n\n        //callback for registered commands\n        webviewView.webview.onDidReceiveMessage(data => {\n            switch (data.type) {\n                case \"hello\":\n                    //display message when hello command is called\n                    vscode.window.showInformationMessage(data.text);\n                    return;\n            }\n        });\n    }\n\n    //addColor sends color message to messsage handler\n    public addColor() {\n        if (this._view) {\n            this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n            this._view.webview.postMessage({ type: 'addColor' });\n        }\n    }\n\n    //clearColors sends color message to clear colors to message handler\n    public clearColors() {\n        if (this._view) {\n            this._view.webview.postMessage({ type: 'clearColors' });\n        }\n    }\n\n\n\n    //_getHtmlForWebview renders afk enbaled and disabled pages\n    private async _getHtmlForWebview(webview: vscode.Webview, group: string) {\n        {\n            await this._getHtml(webview, group);\n        }\n    }\n\n\n\n\n\n    private getUri(webview: Webview, extensionUri: Uri, pathList: string[]) {\n        return webview.asWebviewUri(Uri.joinPath(extensionUri, ...pathList));\n    }\n\n\n\n   \n    //_getAfkDisabledHtml renders page for when afk is disabled\n    //takes in a group string to determine whether to render the whole page or\n    //to just render the next and last group page controls\n    private async _getHtml(webview: vscode.Webview, group: string) {\n\n            var streakNumHtml = `<span class=\"streakNumber\">\n            ${this.streakNum}\n        \n            </span>`;\n\n\n            if (this.isOnFire){\n                this.streakAnim = `<div class=\"streakAnimOnFire\">\n                <script src=\"https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js\"></script> \n                <lottie-player src=\"https://lottie.host/943c92a4-fc4d-42d7-b9f5-fd5f2f2783bd/PgLfoB1v2G.json\" background=\"transparent\" speed=\"1\" loop autoplay></lottie-player>\n                </div>`;\n\n                streakNumHtml = `<span class=\"streakNumberOnFire\">\n                            ${this.streakNum}\n                           \n                            </span>`;\n            }\n\n\n            console.log(\"Streak: active days: \", this.activeDays);\n           \n            if (this.activeDays){\n                this.activeDaysHTML = ``\n                console.log(\"this day of the week: \", this.dayOfTheWeek);\n                \n                for (let day in this.weekDays){\n                    let dayString = this.weekDays[day]\n                    console.log(\"Streak iter day initial: \", dayString)\n                    console.log(\"Streak iterating iter day : \", dayString, \" streak active value: \", this.activeDays[dayString]);\n                    if (this.dayOfTheWeek === dayString){\n                        console.log(\"Streak iter on today: \", dayString)\n\n                        if (this.activeDays[dayString]){\n                            \n                            this.activeDaysHTML += `<div class=\"weekday weekdayActive\"><span>${dayString.charAt(0)}</span></div>`\n                        }else{\n                            this.activeDaysHTML += `<div class=\"weekday weekdayToday\"><span>${dayString.charAt(0)}</span></div>`\n                        }\n\n                        if (dayString !== \"Sunday\"){\n\n                           \n                            this.activeDaysHTML += `<div class=\"separator\">-</div>`;\n                            \n\n                            \n                        }\n\n                    }else{\n\n                        if (this.activeDays[dayString]){\n                        \n                            this.activeDaysHTML += `<div class=\"weekday weekdayActive\"><span>${dayString.charAt(0)}</span></div>`\n\n                        }else{\n                            this.activeDaysHTML += `<div class=\"weekday\"><span>${dayString.charAt(0)}</span></div>`\n                        }\n                       \n\n                        if (dayString !== \"Sunday\"){\n\n                            if (this.activeDays[dayString]){\n                                this.activeDaysHTML += `<div class=\"separator separatorActive\">-</div>`;\n\n                            }else{\n                                this.activeDaysHTML += `<div class=\"separator\">-</div>`;\n                            }\n\n                            \n                        }\n                    }\n\n                   \n                       \n                }\n                console.log(\"Streak week html: \", this.activeDaysHTML)\n            }\n\n\n            // Get the local path to main script run in the webview, then convert it to a uri we can use in the webview.\n            // const scriptUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'teacher', 'buttons_teacher.js'));\n            const styleMainUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'streak', 'main_streak.css'));\n\n\n            // Use a nonce to only allow a specific script to be run.\n            const nonce = getNonce();\n\n            if (this._view) {\n                //render the html for the page by passing it to the view\n                this._view.webview.html = `<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<!--\n\t\t\t\t\tUse a content security policy to only allow loading styles from our extension directory,\n\t\t\t\t\tand only allow scripts that have a specific nonce.\n\t\t\t\t\t(See the 'webview-sample' extension sample for img-src content security policy examples)\n\t\t\t\t-->\n\n                <meta http-equiv=\"Content-Security-Policy\" default-src * 'unsafe-inline' 'unsafe-eval'; script-src ${webview.cspSource} img-src * data: blob: 'unsafe-inline'; frame-src *; style-src * 'unsafe-inline';>\n\t\t\t\t\n                <link href=\"${styleMainUri}\" rel=\"stylesheet\">\n\t\t\t\t<title>GIGO Streak</title>\n                \n\t\t\t</head>\n                <p>\n                    <span class=\"bigger\">Streaks are recorded every day when the user has reached 30 minutes of activity.</span>\n                </p>\n                <br/>\n                <br/>\n\t\t\t<body>\n                <br/>\n                <br/>\n                <div class=\"streakBox\">\n                    <span class=\"streakText\">Current Streak</span>\n\n                    \n\n\n\n\n                    \n\n                    \n                    ${this.streakAnim}\n                \n                    ${streakNumHtml}\n                        \n                        \n                </div>\n                <br/>\n                <br/>\n                <div class=\"streakWeekBox\">\n                    <span class=\"streakWeekText\">Week In Review</span>\n                    <br/>\n                    <br/>\n                    <div class=\"weekdays\" >\n                        ${this.activeDaysHTML}\n                    </div>\n\n                </div>\n                <br/>\n                <br/>\n               \n\t\t\t</body>\n\n            <style>\n                :root {\n                    --shiki-color-text: #EEEEEE;\n                    --shiki-color-background: #333333;\n                    --shiki-token-constant: #660000;\n                    --shiki-token-string: #770000;\n                    --shiki-token-comment: #880000;\n                    --shiki-token-keyword: #990000;\n                    --shiki-token-parameter: #AA0000;\n                    --shiki-token-function: #BB0000;\n                    --shiki-token-string-expression: #CC0000;\n                    --shiki-token-punctuation: #DD0000;\n                    --shiki-token-link: #EE0000;\n                }\n                </style>\n                    \n           \n\t\t\t</html>`;\n            }\n\n\n        }\n\n\n\n\n\n\n}\n\n\n\n\n\n\nfunction getNonce() {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 32; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}", "export function getExplosion(){\nconst arrowUp = \"\"\n\nreturn arrowUp\n}\n\n", "import axios from 'axios';\nimport { runInThisContext } from 'vm';\nimport * as vscode from 'vscode';\nimport { Uri, Webview } from 'vscode';\nimport { executeAfkCheck, executeLiveCheck } from '../session/sessionUpdate';\n\n//activateAfkWebview is called upon extension start and registers necessary commands for afk functionality\nexport async function activateTeacherWebView(context: vscode.ExtensionContext, logger: any) {\n    //register afk provider by calling class constructor\n    const provider = new TeacherWebViewprovider(context.extensionUri, logger);\n\n    if (provider.codeTour){\n        provider.codeTour.activate();\n    }\n    \n\n    \n\n    //push and regsitser necessary commands\n    context.subscriptions.push(\n        vscode.window.registerWebviewViewProvider(TeacherWebViewprovider.viewType, provider));\n}\n\n//afk webview provider has basic functions for handling afk system\nclass TeacherWebViewprovider implements vscode.WebviewViewProvider {\n\n    //defining local variables\n    private themeConfigSection: string = 'markdown-preview-github-styles';\n    private themeConfigKey: string = 'colorTheme';\n    private defaultThemeConfiguration: string = 'auto';\n    public tuitorialPanel!: vscode.WebviewPanel;\n    public context: any;\n    public toolkitUri!: vscode.Uri;\n    public mainUri!: vscode.Uri;\n    public baseWorkspaceUri!: vscode.Uri;\n    public isTutorialActive?: boolean = true;\n    public minPages = 1;\n    public maxPages = 8;\n    public numOfTutorials: number = 0;\n    public loadingTitle: any;\n    public loadingIcon: any;\n    public submitButton: any;\n    public inputBox1: any;\n    public inputBox2: any;\n    public solution: any;\n    public code: any;\n    public error: any;\n    public solutionBox: any;\n    public pageButtonsHTML = \"\";\n    public tourSteps: any[] = [];\n    public codeTour = vscode.extensions.getExtension(\n        \"vsls-contrib.codetour\"\n      );\n\n    //defining base color pallettes\n    private themeConfigValues: { [key: string]: boolean } = {\n        'auto': true,\n        'system': true,\n        'light': true,\n        'dark': true\n    };\n    private currentPage = 0;\n\n    public static readonly viewType = 'gigo.teacherView';\n\n    private _view?: vscode.WebviewView;\n    public logger: any;\n\n\n    constructor(\n        private readonly _extensionUri: vscode.Uri,\n        sysLogger: any,\n    ) {\n        \n        this.logger = sysLogger;\n        this.logger.info.appendLine(\"Code Teacher: Starting...\");\n\n        this.loadingIcon = `<div id=\"loadingAnim\" style=\"display:none\">\n        <script src=\"https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js\"></script>\n        <lottie-player src=\"https://assets3.lottiefiles.com/packages/lf20_DVSwGQ.json\"  background=\"transparent\"  speed=\"1\"  style=\"width: 300px; height: 300px;\"  loop  autoplay></lottie-player>\n        </div>`;\n\n        this.submitButton = `<div class=\"buttonWrapper\">\n        <button class=\"submitButton\" onclick=\"submitFunc()\">Fix My Code</button>\n        </div>`;\n\n        this.inputBox1 = `<div class=\"input-group\">\n        <label class=\"inputTitle\">Code</label>\n        <textarea class=\"inputBox\" name=\"inputBox1\" rows=\"10\" cols=\"10\" wrap=\"soft\"></textarea>\n        </div>`;\n\n        this.inputBox2 = `<div class=\"input-group\">\n        <text class=\"inputTitle\">Error</text>\n        <textarea class=\"inputBox\" name=\"inputBox2\" rows=\"10\" cols=\"10\" wrap=\"soft\"></textarea>\n        </div>`;\n\n        this.loadingTitle = `<div hidden class=\"loadingTitle\"><text class=\"loadingText\">Your code is being processed by a bot.\\nRemeber copying code is only based if you understand it.</text></div>`;\n        this.solutionBox = `<div hidden class=\"outputBox\">\n        <label class=\"outputTitle\">Solution</label>\n        <br/>\n        <br/>\n        <div class=\"solutionBox\">\n            <code class=\"solutionCode\" name=\"outputBox\" rows=\"5\" cols=\"10\" wrap=\"soft\">\n                <pre>\n${this.solution}\n                </pre>\n            </code>\n        </div>\n    </div>`;\n        \n        // load configuration value for afk from\n        // let gigoConfig = vscode.workspace.getConfiguration(\"gigo\");\n        // this.isTutorialActive = gigoConfig.get(\"gigo.tutorial.on\");\n        \n    }\n\n    //_getCurrentPage retrieves the number of the current page from the configfile\n    private _getCurrentPage(webview: vscode.Webview) {\n        var code: any;\n        var error: any;\n        //get message from message hander of current page number\n        webview.onDidReceiveMessage(\n            async (message: any) => {\n                const command = message.command;\n                const text = message.text;\n\n                //verify command received is currentPage and write to config file\n                switch (command) {\n                    \n                    case \"loadingIcon\":\n                        try {\n                            if (this._view) {\n                                this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n                                if (message.text === \"enable\"){\n                                    this.logger.info.appendLine(\"Code Teacher: Executing call\");\n                                    this.solutionBox = `<div hidden class=\"outputBox\">\n                                    <label class=\"outputTitle\">Solution</label>\n                                    <br/>\n                                    <br/>\n                                    <div class=\"solutionBox\">\n                                        <code class=\"solutionCode\" name=\"outputBox\" rows=\"5\" cols=\"10\" wrap=\"soft\">\n                                            <pre>\n                            ${this.solution}\n                                            </pre>\n                                        </code>\n                                    </div>\n                                </div>`;\n                                    \n                                    this.loadingIcon =  `<div id=\"loadingAnim\">\n                                    <script src=\"https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js\"></script>\n                                    <lottie-player src=\"https://assets3.lottiefiles.com/packages/lf20_DVSwGQ.json\"  background=\"transparent\"  speed=\"1\"  loop  autoplay></lottie-player>\n                                    </div>`;\n                                    this.submitButton =  `<div class=\"buttonWrapper\">\n                                    <button disabled class=\"submitButton\"><div class=\"button--loading\"/></button>\n                                    </div>`;\n\n                                    this.inputBox1 = `<div hidden class=\"input-group\">\n                                    <label class=\"inputTitle\">Code</label>\n                                    <textarea class=\"inputBox\" name=\"inputBox1\" rows=\"10\" cols=\"10\" wrap=\"soft\"></textarea>\n                                    </div>`;\n\n                                    this.inputBox2 = `<div hidden class=\"input-group\">\n                                    <text class=\"inputTitle\">Error</text>\n                                    <textarea class=\"inputBox\" name=\"inputBox2\" rows=\"10\" cols=\"10\" wrap=\"soft\"></textarea>\n                                    </div>`;\n\n                                    this.loadingTitle = `<div class=\"loadingTitle\"><text class=\"loadingText\">Your code is being processed by a bot.\\nRemeber copying code is only based if you understand it.</text></div>`;\n\n                                    await this._getHtml(this._view.webview);\n                                    this.code = message.value.code;\n                                    this.error = message.value.error;\n                                \n                                    await this.codeRequest(message.value.code, message.value.error);\n                                    this.solutionBox = `<div class=\"outputBox\">\n                                    <label class=\"outputTitle\">Solution</label>\n                                    <br/>\n                                    <br/>\n                                    <div class=\"solutionBox\">\n                                        <code class=\"solutionCode\" name=\"outputBox\" rows=\"5\" cols=\"10\" wrap=\"soft\">\n                                            <pre>\n${this.solution}\n                                            </pre>\n                                        </code>\n                                    </div>\n                                </div>`;\n                                    console.log(\"POST SUCCESS CALL\");\n                                    await this._getHtml(this._view.webview);\n                                    \n\n                                }else{\n                                    this.code = \"\";\n                                    this.error = \"\";\n                                    this.solution = \"\";\n                                    this.loadingIcon = `<div id=\"loadingAnim\" style=\"display:none\">\n                                    <script src=\"https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js\"></script>\n                                    <lottie-player src=\"https://assets3.lottiefiles.com/packages/lf20_DVSwGQ.json\"  background=\"transparent\"  speed=\"1\"  loop  autoplay></lottie-player>\n                                    </div>`;\n                                    this.submitButton =  `<div class=\"buttonWrapper\">\n                                    <button class=\"submitButton\" onclick=\"submitFunc()\">Fix My Code</button>\n                                    </div>`;\n                                    this.inputBox1 = `<div class=\"input-group\">\n                                    <label class=\"inputTitle\">Code</label>\n                                    <textarea class=\"inputBox\" name=\"inputBox1\" rows=\"10\" cols=\"10\" wrap=\"soft\"></textarea>\n                                    </div>`;\n\n                                    this.inputBox2 = `<div class=\"input-group\">\n                                    <text class=\"inputTitle\">Error</text>\n                                    <textarea class=\"inputBox\" name=\"inputBox2\" rows=\"10\" cols=\"10\" wrap=\"soft\"></textarea>\n                                    </div>`;\n\n                                    this.loadingTitle = `<div hidden class=\"loadingTitle\"><text class=\"loadingText\">Your code is being processed by a bot.\\nRemeber copying code is only based if you understand it.</text></div>`;\n                                    this.solutionBox = `<div hidden class=\"outputBox\">\n                                    <label class=\"outputTitle\">Solution</label>\n                                    <br/>\n                                    <br/>\n                                    <div class=\"solutionBox\">\n                                        <code class=\"solutionCode\" name=\"outputBox\" rows=\"5\" cols=\"10\" wrap=\"soft\">\n                                            <pre>\n${this.solution}\n                                            </pre>\n                                        </code>\n                                    </div>\n                                </div>`;\n                                    await this._getHtml(this._view.webview);\n\n                                }\n\n                                console.log(this.loadingIcon);\n                                \n                                await this._getHtml(this._view.webview);\n\n                            }\n\n                        } catch (err) {\n                            this.logger.error.appendLine(\"Code Teacher Failed: Failed to render page for loading\");\n                            console.log(err);\n\n                        }\n                        break;\n                   \n                }\n            },\n            undefined,\n        );\n    }\n\n\n    //resolveWebviewView handles editor callback functions and basic html render\n    public async resolveWebviewView(\n        webviewView: vscode.WebviewView,\n        context: vscode.WebviewViewResolveContext,\n        _token: vscode.CancellationToken,\n    ) {\n\n        this._view = webviewView;\n\n\n\n        //setup webview\n        webviewView.webview.options = {\n            // Allow scripts in the webview\n            enableScripts: true,\n\n            localResourceRoots: [\n                this._extensionUri\n            ]\n        };\n\n        //ensure that user has opened a project before continuing\n        if (!vscode.workspace.workspaceFolders) {\n            vscode.window.showInformationMessage(\"Open a folder/workspace first\");\n            return;\n        }\n\n        //set base path of workspace for future file handling \n        this.baseWorkspaceUri = vscode.workspace.workspaceFolders[0].uri;\n        this.baseWorkspaceUri.fsPath.replace(\"file://\", \"\");\n\n\n\n        if (this._view) {\n            this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n            this._getCurrentPage(this._view.webview);\n            await this._getHtmlForWebview(this._view.webview, \"\");\n        }\n\n        //callback for registered commands\n        webviewView.webview.onDidReceiveMessage(data => {\n            switch (data.type) {\n                case \"hello\":\n                    //display message when hello command is called\n                    vscode.window.showInformationMessage(data.text);\n                    return;\n            }\n        });\n    }\n\n    //addColor sends color message to messsage handler\n    public addColor() {\n        if (this._view) {\n            this._view.show?.(true); // `show` is not implemented in 1.49 but is for 1.50 insiders\n            this._view.webview.postMessage({ type: 'addColor' });\n        }\n    }\n\n    //clearColors sends color message to clear colors to message handler\n    public clearColors() {\n        if (this._view) {\n            this._view.webview.postMessage({ type: 'clearColors' });\n        }\n    }\n\n\n\n    //_getHtmlForWebview renders afk enbaled and disabled pages\n    private async _getHtmlForWebview(webview: vscode.Webview, group: string) {\n        {\n            await this._getHtml(webview);\n        }\n    }\n\n\n\n    private getUri(webview: Webview, extensionUri: Uri, pathList: string[]) {\n        return webview.asWebviewUri(Uri.joinPath(extensionUri, ...pathList));\n    }\n\n\n    public async codeRequest(code: any, error: string){\n\n        // let http = axios.create({\n        //     headers: {\n        //         token: `7ffd6689-5587-4107-9457-b0f70bbd3220 `\n        //     }\n        // })\n\n        axios.defaults.headers.common[\"token\"] = `7ffd6689-5587-4107-9457-b0f70bbd3220`; \n        \n          //awair result from http function in GIGO\n        let res = await axios.post(\n            \"http://192.168.1.188:8000/api/v1/debug\", \n            {\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                \"code\": code,\n                \"error\": error,\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n            }\n        );\n \n        //if non status code 200 is returned, return -1 and log failure message\n        if (res.status !== 200) { \n            console.log(\"failed to execute code request: \", res);\n            this.logger.error.appendLine(`Code Teacher Failed: Failed to execute code request: ${res}`);\n            return -1;\n        }\n\n        console.log(`response: ${res.data.response}`)\n        console.log(`code res: ${res.data}`)\n\n        this.loadingIcon = `<div id=\"loadingAnim\" style=\"display:none\">\n        <script src=\"https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js\"></script>\n        <lottie-player src=\"https://assets3.lottiefiles.com/packages/lf20_DVSwGQ.json\"  background=\"transparent\"  speed=\"1\"  loop  autoplay></lottie-player>\n        </div>`;\n        this.submitButton =  `<div class=\"buttonWrapper\">\n        <button class=\"submitButton\" onclick=\"submitFunc()\">Fix My Code</button>\n        </div>`;\n        this.inputBox1 = `<div class=\"input-group\">\n        <label class=\"inputTitle\">Code</label>\n        <textarea class=\"inputBox\" name=\"inputBox1\" rows=\"10\" cols=\"10\" wrap=\"soft\">${code}</textarea>\n        </div>`;\n\n        this.inputBox2 = `<div class=\"input-group\">\n        <text class=\"inputTitle\">Error</text>\n        <textarea class=\"inputBox\" name=\"inputBox2\" rows=\"10\" cols=\"10\" wrap=\"soft\">${error}</textarea>\n        </div>`;\n\n        this.loadingTitle = `<div hidden class=\"loadingTitle\"><text class=\"loadingText\">Your code is being processed by a bot.\\nRemeber copying code is only based if you understand it.</text></div>`;\n\n        this.solution = res.data.response;\n        this.logger.info.appendLine(\"Code Teacher: Retrieved result from server\");\n    }\n\n\n   \n\n    //_getAfkDisabledHtml renders page for when afk is disabled\n    //takes in a group string to determine whether to render the whole page or\n    //to just render the next and last group page controls\n    private async _getHtml(webview: vscode.Webview) {\n        this.logger.info.appendLine(\"Code Teacher: Rendering page\");\n        \n\n         // Get the local path to main script run in the webview, then convert it to a uri we can use in the webview.\n         const scriptUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'teacher', 'buttons_teacher.js'));\n\n         // Do the same for the stylesheet.\n         const styleResetUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'afk', 'reset_afk.css'));\n         const styleVSCodeUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'afk', 'vscode_afk.css'));\n         const styleMainUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'dist', 'teacher', 'main_teacher.css'));\n       \n           \n        \n        // Use a nonce to only allow a specific script to be run.\n        const nonce = getNonce();\n        \n//         let solution = `\n// import chad-lang\n// import os\n\n// def isBased():\n//     for i in os.opendir(\"/daniel-gym-photos/):\n//         if i.contains(\"daniel\"):\n//             print(\"whata fuckin bloatlord chad\")\n//             return True\n// isBased()`\n            let solutionPre = `\n${this.solution}\n`\n        \n\n        if (this._view) {\n            \n            //render the html for the page by passing it to the view\n            this._view.webview.html = `<!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <!--\n                Use a content security policy to only allow loading styles from our extension directory,\n                and only allow scripts that have a specific nonce.\n                (See the 'webview-sample' extension sample for img-src content security policy examples)\n            -->\n            <meta http-equiv=\"Content-Security-Policy\" default-src * 'unsafe-inline' 'unsafe-eval'; script-src ${webview.cspSource} img-src * data: blob: 'unsafe-inline'; frame-src *; style-src * 'unsafe-inline';>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <link href=\"${styleResetUri}\" rel=\"stylesheet\">\n            <link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n            <link href=\"${styleMainUri}\" rel=\"stylesheet\">\n         \n            <title>GIGO Code Teacher</title>\n        </head>\n        <div class = \"betaAnimation\">\n            <script src=\"https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js\"></script> \n            <lottie-player src=\"https://lottie.host/e7405d0c-ceaa-42a4-accf-5699b5009196/VIpLHU1HM2.json\" background=\"transparent\" speed=\"1\" loop autoplay></lottie-player> \n        </div>\n        <details><summary><b class=\"aboutTitle\">About Code Teacher</b></summary>\n            <div id=\"aboutContent\" class=\"aboutText\">\n                <div class=\"big\">\n                    GIGO Code Teacher is an AI system that helps users interpret error messages and understand problems in their code. It is a powerful tool designed to assist developers in quickly identifying errors, as well as providing explanations for why they occurred.\n                </div>\n                <div class=\"codeTeacherAnimation\">\n                    <script src=\"https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js\"></script>\n                    <lottie-player src=\"https://assets7.lottiefiles.com/private_files/lf30_Fy9W8c.json\"  background=\"transparent\"  speed=\".6\"    loop  autoplay></lottie-player>   <body>\n                </div>\n                <div class=\"big\">\n                    During its experimental Beta release, you can enjoy using Code Teacher for free while it continues to learn and improve with each use. However, please note that since this is an experimental system at times the responses may be incorrect or incoherent so always double-check before making any changes based on the advice provided by Code Teacher.\n                </div>\n            </div>\n        </details>\n       \n            <br/>\n            <br/>\n            \n            <div class=\"inputs\">\n                ${this.inputBox1}\n                <br/>\n                <br/>\n                ${this.inputBox2}\n                ${this.loadingTitle}\n                ${this.loadingIcon}\n                <br/>\n                <br/>\n                ${this.submitButton}\n            </div>\n\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n\n            \n            \n            ${this.solutionBox}\n            \n            <br/>\n            <br/>\n\n            \n        </body>\n\n        <style>\n            :root {\n                --shiki-color-text: #EEEEEE;\n                --shiki-color-background: #333333;\n                --shiki-token-constant: #660000;\n                --shiki-token-string: #770000;\n                --shiki-token-comment: #880000;\n                --shiki-token-keyword: #990000;\n                --shiki-token-parameter: #AA0000;\n                --shiki-token-function: #BB0000;\n                --shiki-token-string-expression: #CC0000;\n                --shiki-token-punctuation: #DD0000;\n                --shiki-token-link: #EE0000;\n            }\n            </style>\n                    \n        <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n        \n        </html>`;\n    }\n\n\n    \n\n\n\n\n\n\n    }\n\n\n}\n\n\n\nfunction getNonce() {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 32; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}", "import path = require('path');\nimport { stringify } from 'querystring';\nimport { cachedDataVersionTag } from 'v8';\nimport * as vscode from 'vscode';\n\n\nexport async function activateEditor(context: vscode.ExtensionContext) {\n\tconsole.log(\"WE FUCKIN HERE!\");\n\t\n\t// Register our custom editor providers\n\tcontext.subscriptions.push(TutorialEditorProvider.register(context));\n\t\n}\n\n\n/**\n * Provider for cat scratch editors.\n * \n * Cat scratch editors are used for `.cscratch` files, which are just json files.\n * To get started, run this extension and open an empty `.cscratch` file in VS Code.\n * \n * This provider demonstrates:\n * \n * - Setting up the initial webview for a custom editor.\n * - Loading scripts and styles in a custom editor.\n * - Synchronizing changes between a text document and a custom editor.\n */\nexport class TutorialEditorProvider implements vscode.CustomTextEditorProvider {\n\n\tpublic static register(context: vscode.ExtensionContext): vscode.Disposable {\n\t\tconst provider = new TutorialEditorProvider(context);\n\t\tconst options = {suppportsMultipleEditorsPerDocument: false, webviewOptions: {enableScripts: true, retainContextWhenHidden: true}};\n\t\tconst providerRegistration = vscode.window.registerCustomEditorProvider(TutorialEditorProvider.viewType, provider, options);\n\t\treturn providerRegistration;\n\t}\n\n\tpublic text: any;\n\tpublic addCodeTourBtn: any = `<button class=\"add-code-tour\" onclick=\"addCodeTour()\">Create Code Tour</button>`;\n\n\tprivate static readonly viewType = 'catCustoms.catScratch';\n\n\tpublic updateCounter: number = 0;\n\tpublic baseWorkspaceUri!: vscode.Uri;\n\tpublic codeTourSteps: string[] = [];\n\tpublic numOfSteps: number = 0;\n\tpublic moveSVG: any;\n\tpublic trashOpen = `<svg disabled=\"true\" class=\"trash-icon-open\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n\t<path class=\"trash-icon-path\" d=\"M9 13v6c0 .552-.448 1-1 1s-1-.448-1-1v-6c0-.552.448-1 1-1s1 .448 1 1zm7-1c-.552 0-1 .448-1 1v6c0 .552.448 1 1 1s1-.448 1-1v-6c0-.552-.448-1-1-1zm-4 0c-.552 0-1 .448-1 1v6c0 .552.448 1 1 1s1-.448 1-1v-6c0-.552-.448-1-1-1zm4.333-8.623c-.882-.184-1.373-1.409-1.189-2.291l-5.203-1.086c-.184.883-1.123 1.81-2.004 1.625l-5.528-1.099-.409 1.958 19.591 4.099.409-1.958-5.667-1.248zm4.667 4.623v16h-18v-16h18zm-2 14v-12h-14v12h14z\"/>\n\t</svg>`;\n\tpublic tourFilePath: string = \"\";\n\tpublic fullTour: any;\n\n\tconstructor(\n\t\tprivate readonly context: vscode.ExtensionContext\n\t) { this.text = \"\"; }\n\n\t/**\n\t * Called when our custom editor is opened.\n\t * \n\t * \n\t */\n\tpublic async resolveCustomTextEditor(\n\t\tdocument: vscode.TextDocument,\n\t\twebviewPanel: vscode.WebviewPanel,\n\t\t_token: vscode.CancellationToken\n\t): Promise<void> {\n\t\tconsole.log(\"WE FUCKIN HERE!\");\n\n\n\t\t  //ensure that user has opened a project before continuing\n\t\t  if (!vscode.workspace.workspaceFolders) {\n            vscode.window.showInformationMessage(\"Open a folder/workspace first\");\n            return;\n        }\n\n\t\tthis.baseWorkspaceUri = vscode.workspace.workspaceFolders[0].uri;\n        this.baseWorkspaceUri.fsPath.replace(\"file://\", \"\");\n\t\t// Setup initial content for the webview\n\t\twebviewPanel.webview.options = {\n\t\t\tenableScripts: true\n\t\t};\n\n\t\t// const panel = vscode.window.createWebviewPanel(\n\t\t// \t'catCoding',\n\t\t// \t'Cat Coding',\n\t\t// \tvscode.ViewColumn.One,\n\t\t// \t{\n\t\t// \t  enableScripts: true,\n\t\t// \t  retainContextWhenHidden: true\n\t\t// \t}\n\t\t//   );\n\n\t\t// webviewPanel.options.retainContextWhenHidden = true;\n\t\t\n\n\t\tlet fs = require('fs')\n\n\t\tvar files = document.fileName.split(\"/\");\n\t\tvar fileName = files[files.length - 1];\n\t\tvar fileNoExt = fileName.split(\".\")[0];\n\n\t\tconsole.log(`DOC NAME: ${fileNoExt}`);\n\t\tthis.tourFilePath = path.join(this.baseWorkspaceUri.fsPath, \".gigo\", \".tours\", `${fileNoExt}.tour`);\n\n\t\tif (fs.existsSync(this.tourFilePath)) {\n\t\t\tlet tour = fs.readFileSync(this.tourFilePath, 'utf-8');\n\t\t\tlet ts = JSON.parse(tour).steps;\n\t\t\tthis.numOfSteps = ts.length;\n\t\t\tthis.fullTour = JSON.parse(tour);\n\t\t\tconsole.log(\"REGISTERED EXITS\")\n\t\t} else{\n\t\t\tconsole.log(\"NOT REGISTERED EXITS\")\n\t\t\tvar obj = {\n\t\t\t\t$schema: \"https://aka.ms/codetour-schema\",\n\t\t\t\ttitle: fileNoExt,\n\t\t\t\tsteps: [],\n\t\t\t\tref: \"master\",\n\t\t\t};\n\n\t\t\tthis.fullTour = JSON.stringify(obj);\n\n\t\t\tfs.writeFileSync(this.tourFilePath, this.fullTour, 'utf-8');\n\t\t}\n\n\t\tconsole.log(`text from load: ${document.getText()}`);\n\t\tthis.text = document.getText();\n\t\tfunction updateWebview() {\n\t\t\twebviewPanel.webview.postMessage({\n\t\t\t\ttype: 'update',\n\t\t\t\ttext: document.getText(),\n\t\t\t});\n\t\t}\n\n\t\twebviewPanel.webview.html = this.getHtmlForWebview(webviewPanel.webview);\n\t\tthis.moveSVG =  webviewPanel.webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'tutorial-editor', 'move_icon_2.svg'));\n\t\tvscode.window.onDidChangeActiveColorTheme(() =>{\n\t\t\twebviewPanel.webview.html = this.getHtmlForWebview(webviewPanel.webview);\n\t\t\t\n\t\t\t\n\t\t});\n\n\t\t\n\t\t\n\n\t\t// Hook up event handlers so that we can synchronize the webview with the text document.\n\t\t//\n\t\t// The text document acts as our model, so we have to sync change in the document to our\n\t\t// editor and sync changes in the editor back to the document.\n\t\t// \n\t\t// Remember that a single text document can also be shared between multiple custom\n\t\t// editors (this happens for example when you split a custom editor)\n\n\t\tconst changeDocumentSubscription = vscode.workspace.onDidChangeTextDocument(e => {\n\t\t\tif (e.document.uri.toString() === document.uri.toString()) {\n\t\t\t\tupdateWebview();\n\t\t\t}\n\t\t});\n\n\t\t// webviewPanel.onDidChangeViewState(() => {\n\t\t// \tconsole.log(`code tours: ${this.codeTourSteps}`)\n\t\t// \twebviewPanel.webview.html = this.getHtmlForWebview(webviewPanel.webview);\n\t\t// })\n\t\t\n\n\t\t// Make sure we get rid of the listener when our editor is closed.\n\t\twebviewPanel.onDidDispose(() => {\n\t\t\tchangeDocumentSubscription.dispose();\n\t\t});\n\n\t\t// Receive message from the webview.\n\t\twebviewPanel.webview.onDidReceiveMessage(e => {\n\t\t\tswitch (e.type) {\n\t\t\t\tcase 'syntaxHighlight':\n\t\t\t\t\tvar Prism = require('prismjs');\n\t\t\t\t\tPrism.highlightElement(e.message);\n                    return;\n\t\t\t\tcase 'hello':\n\t\t\t\t\tvscode.window.showInformationMessage(e.message);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'updateFile':\n\t\t\t\t\tthis.updateCounter++;\n\t\t\t\t\tthis.text = e.message;\n\t\t\t\t\tvscode.window.showInformationMessage(`${e.message.length}`);\n\t\t\t\t\ttry{\n\t\t\t\t\t\tfs.writeFileSync(document.fileName, this.text, 'utf-8');\n\t\t\t\t\t}catch(err){\n\t\t\t\t\t\tvscode.window.showInformationMessage(`error in file write ${err}`);\n\t\t\t\t\t}\n\n\t\t\t\t\t// if (this.updateCounter >= 30){\n\t\t\t\t\t// \twebviewPanel.webview.html = this.getHtmlForWebview(webviewPanel.webview);\n\t\t\t\t\t// \tthis.updateCounter = 0;\n\t\t\t\t\t// }\n\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\tcase \"openCodeTourDialog\":\n\t\t\t\t\tvscode.window.showInformationMessage('openCodeTourDialog');\n\t\t\t\t\treturn;\n\t\t\t\tcase 'addCodeTour':\n\t\t\t\t\tvscode.window.showInformationMessage('add code tour');\n\t\t\t\t\t// webviewPanel.webview.html = this.getHtmlForWebview(webviewPanel.webview);\n\t\t\t\t\t\n\n\t\t\t\t\treturn;\n\t\t\t\tcase 'saveTourStep':\n\t\t\t\t\t// vscode.window.showInformationMessage(`saveTourStep tour num: ${this.numOfSteps}`);\n\t\t\t\t\tconsole.log(`${e.message}`)\n\t\t\t\t\tconsole.log(`saveTourStep tour num: ${this.numOfSteps}`)\n\n\t\t\t\t\tlet tour = fs.readFileSync(this.tourFilePath, 'utf-8');\n\t\t\t\t\tlet ts = JSON.parse(tour);\n\t\t\t\t\t\n\n\t\t\t\t\tlet parsedMsg = JSON.parse(e.message);\n\t\t\t\t\t\n\t\t\t\t\tparsedMsg.line = parseInt(parsedMsg.line);\n\t\t\t\t\tvar stepNum = parseInt(parsedMsg.step);\n\t\t\t\t\tdelete parsedMsg['step'];\n\n\n\t\t\t\t\tconsole.log('before all checking steps')\n\t\t\t\t\tif (parsedMsg.line < 1) {\n\t\t\t\t\t\tconsole.log('incorrect value passed for parsedMsg.line: ', parsedMsg.line);\n\t\t\t\t\t\tvscode.window.showInformationMessage(`Incorrect line number for step. Please ensure that the line number is greater than 0.`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\t\n\n\t\t\t\t\tconsole.log(\"before do exist check\")\n\t\t\t\t\tvar doExist = false;\n\n\t\t\t\t\ttry{\n\t\t\t\t\t\tdoExist = fs.existsSync(path.join(this.baseWorkspaceUri.fsPath, parsedMsg.file));\n\n\t\t\t\t\t}catch(e){\n\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t}\n\n\t\t\t\t\t\n\t\t\t\t\tconsole.log(\"after do exist\")\n\n\t\t\t\t\tif (!doExist) {\n\t\t\t\t\t\tconsole.log(\"does exist: \", doExist, \" file path: \", path.join(this.baseWorkspaceUri.fsPath, parsedMsg.file));\n\t\t\t\t\t\tvscode.window.showInformationMessage(`Incorrect file path for step. Please ensure that the file exists and is the relative path to the file.`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole.log(\"after file check\")\n\n\t\t\t\t\tconst readline = require('readline');\n\t\t\t\t\t\n\t\t\t\t\tvar fileP = path.join(this.baseWorkspaceUri.fsPath, parsedMsg.file);\n\t\t\t\t\tvar linesCount = 0;\n\t\t\t\t\tvar rl = readline.createInterface({\n\t\t\t\t\tinput: fs.createReadStream(fileP),\n\t\t\t\t\toutput: process.stdout,\n\t\t\t\t\tterminal: false\n\t\t\t\t\t});\n\t\t\t\t\t\trl.on('line', function (line: any) {\n\t\t\t\t\t\tlinesCount++; // on each linebreak, add +1 to 'linesCount'\n\t\t\t\t\t});\n\t\t\t\t\t\trl.on('close', function () {\n\t\t\t\t\t\tconsole.log(linesCount); // print the result when the 'close' event is called\n\t\t\t\t\t});\n\n\n\t\t\t\t\tconsole.log(`than number of lines in file ${linesCount}`);\n\n\n\t\t\t\t\tif (parsedMsg > linesCount){\n\t\t\t\t\t\tconsole.log(`number of lines in pass ${parsedMsg.line} is greater than number of lines in file ${linesCount}`);\n\t\t\t\t\t\tvscode.window.showInformationMessage(`Incorrect line number for step. Please ensure that the line number exists in file.`);\n                        return;\n\t\t\t\t\t}\n\n\n\t\t\t\t\tconsole.log(\"after line num check\")\n\n\n\t\t\t\t\tif (stepNum > this.numOfSteps) {\n\t\t\t\t\t\tthis.numOfSteps++;\n\t\t\t\t\t\tts.steps.push(parsedMsg);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tts.steps[stepNum - 1] = parsedMsg;\n\t\t\t\t\t\tconsole.log(`ts: ${JSON.stringify(ts)}`);\n                    }\n\t\t\t\t\t\n\n\t\t\t\t\t\n\n\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tthis.fullTour = JSON.stringify(ts);\n\t\t\t\t\tfs.writeFileSync(this.tourFilePath, this.fullTour, 'utf-8');\n\t\t\t\t\t// vscode.window.showInformationMessage(`save code tour, fp: ${e.message.file}, ln: ${e.message.line} desc: ${e.message.description}`);\n\t\t\t\t\tbreak;\n\t\t\t\t\t// let tourName = document.fileName.replace('cscratch', 'tour');\n\t\t\t\t\t// fs.writeFileSync(path.join(this.baseWorkspaceUri.fsPath, \".tours\", `${tourName}`), );\n\n\t\t\t\tcase 'deleteTourStep':\n\t\t\t\t\tvar deletedStepNum = parseInt(e.message);\n\t\t\t\t\t// vscode.window.showInformationMessage(`delete step: ${deletedStepNum} `);\n\t\t\t\t\tlet tours = fs.readFileSync(this.tourFilePath, 'utf-8');\n\t\t\t\t\tlet tss = JSON.parse(tours);\n\t\t\t\t\tthis.numOfSteps--;\n\n\n\t\t\t\t\ttss.steps = tss.steps.splice(deletedStepNum);\n\t\t\t\t\t// vscode.window.showInformationMessage(`new steps: ${JSON.stringify(tss.steps.splice(deletedStepNum))} `);\n\t\t\t\t\tthis.fullTour = JSON.stringify(tss);\n\t\t\t\t\tfs.writeFileSync(this.tourFilePath, this.fullTour, 'utf-8');\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\t\t});\n\n\t\tupdateWebview();\n\t}\n\n\t/**\n\t * Get the static html used for the editor webviews.\n\t */\n\tprivate getHtmlForWebview(webview: vscode.Webview): string {\n\t\tconst fs = require('fs');\n\t\tlet tour = fs.readFileSync(this.tourFilePath, 'utf-8');\n\t\tthis.fullTour = JSON.parse(tour);\n\n\t\tlet highlightStyle = `<link id=\"import-theme\" rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/themes/prism-dark.css\"/>`;\n\n\t\tif (vscode.window.activeColorTheme.kind === vscode.ColorThemeKind.Light){\n\t\t\thighlightStyle = `<link id=\"import-theme\" rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/themes/prism.css\"/>`;\n\t\t}\n\n\n\t\tconsole.log(\"WE FUCKIN HERE!\");\n\t\tconsole.log(this.context.extensionUri);\n\t\t// Local path to script and css for the webview\n\t\tconst scriptUri = webview.asWebviewUri(vscode.Uri.joinPath(\n\t\t\tthis.context.extensionUri, 'dist', 'tutorial-editor', 'catScratch.js'));\n\n\t\tconst styleResetUri = webview.asWebviewUri(vscode.Uri.joinPath(\n\t\t\tthis.context.extensionUri, 'dist','tutorial-editor', 'reset.css'));\n\n\t\tconst styleVSCodeUri = webview.asWebviewUri(vscode.Uri.joinPath(\n\t\t\tthis.context.extensionUri, 'dist','tutorial-editor', 'vscode.css'));\n\n\t\tconst styleMainUri = webview.asWebviewUri(vscode.Uri.joinPath(\n\t\t\tthis.context.extensionUri, 'dist', 'tutorial-editor', 'catScratch.css'));\n\t\tconst styleJS = webview.asWebviewUri(vscode.Uri.joinPath(\n\t\t\tthis.context.extensionUri, 'dist', 'tutorial-editor', 'style.js'));\n\n\t\tconst codeIn = webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'tutorial-editor',  'code-input.js'));\n\t\tconst codeAutoDetect = webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'tutorial-editor', 'autodetect.min.js'));\n\t\tconst codeIndent= webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'tutorial-editor', 'indent.js'));\n\t\tconst codeComplete= webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'tutorial-editor',  'autocomplete.js'));\n\t\tconst codeCompleteStyle= webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'tutorial-editor', 'autocomplete.css'));\n\t\tconst codeInStyling = webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'tutorial-editor',  'code-input.css'));\n\t\tconst codeDeBounce = webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'tutorial-editor',  'debounce-update.js'));\n\n\t\tconst codeTourScript = webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'tutorial-editor',  'code-tour.js'));\n\t\tconst codeTourStyle = webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'tutorial-editor',  'code-tour.css'));\n\n\n\t\tconst coordsUtil = webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'tutorial-editor', 'textareaCoords.js'));\n\n\t\tthis.moveSVG = webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'tutorial-editor',  'move_icon_2.svg'));\n\t\tconst trashPng = webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'dist', 'tutorial-editor',  'trash.png'));\n\n\t\t// Use a nonce to whitelist which scripts can be run\n\t\tconst nonce = getNonce();\n\n\t\tvar parsedText = this.text.replace(/[\"]/g, `'`);\n\t\t \n\t\tconsole.log(`text before render: ${this.text.length}`);\n\t\tconsole.log(`steps befor load: ${JSON.stringify(this.fullTour.steps)}`);\n\t\treturn /* html */`\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\n\t\t\t\t<!--\n\t\t\t\tUse a content security policy to only allow loading images from https or from our extension directory,\n\t\t\t\tand only allow scripts that have a specific nonce.\n\t\t\t\t-->\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" default-src * 'unsafe-inline' 'unsafe-eval'; script-src ${webview.cspSource} img-src * data: blob: 'unsafe-inline'; frame-src *; style-src * 'unsafe-inline';>\n\t\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n\t\t\t\t<input id=\"tour-step-num\" name=\"tour-step-num\" type=\"hidden\" value=\"${this.numOfSteps}\"></input>\n\t\t\t\t<input id=\"tour-path\" name=\"tour-path\" type=\"hidden\" value=\"${this.tourFilePath}\"></input>\n\t\t\t\t<input id=\"tour-step-objs\" name=\"tour-step-objs\" type=\"hidden\" value='${JSON.stringify(this.fullTour.steps)}'></input>\n\n\t\t\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github-dark.min.css\" integrity=\"sha512-rO+olRTkcf304DQBxSWxln8JXCzTHlKnIdnMUwYvQa9/Jd4cQaNkItIUj6Z4nvW1dqK0SKXLbn9h4KwZTNtAyw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n\t\t\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/9000.0.1/themes/default.css\" integrity=\"sha512-HPYcuSKzZ/FwxsRKIiNX6imjfnr5+82poiPO+oXi9WCEEe2q1x2OOBpbF+6cRG+hwoEsBXfs7oQveu5yHbY64g==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n\t\t\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/plugins/line-numbers/prism-line-numbers.min.css\" integrity=\"sha512-cbQXwDFK7lj2Fqfkuxbo5iD1dSbLlJGXGpfTDqbggqjHJeyzx88I3rfwjS38WJag/ihH7lzuGlGHpDBymLirZQ==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/9000.0.1/prism.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/9000.0.1/components/prism-markdown.js\"></script>\n\t\t\t\t<link href=\"${styleResetUri}\" rel=\"stylesheet\" />\n\t\t\t\t<link href=\"${styleVSCodeUri}\" rel=\"stylesheet\" />\n\t\t\t\t<link href=\"${styleMainUri}\" rel=\"stylesheet\" />\n\t\t\t\t<link href=\"${codeInStyling}\" rel=\"stylesheet\" />\n\t\t\t\t<link href=\"${codeCompleteStyle}\" rel=\"stylesheet\" />\n\t\t\t\t<link href=\"${codeTourStyle}\" rel=\"stylesheet\" />\n\n\t\t\t\t<script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n\t\t\t\t\n\n\t\t\t\t${highlightStyle}\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/components/prism-core.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/plugins/line-numbers/prism-line-numbers.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/plugins/autoloader/prism-autoloader.min.js\"></script>\n\n\n\t\t\t\t<title>Cat Scratch</title>\n\t\t\t</head>\n\n\t\t\t<script src=\"${codeTourScript}\"></script>\n\n\t\t\t\n\t\t\t<div id=\"container\" style=\"height: 100%\"></div>\n\t\t\t<body class=\"line-numbers\" id=\"body\" style=\"overflow: scroll\" >\n\t\t\t\n\t\t\t<div id=\"page\" class=\"page\">\n\t\t\t<script src=\"${codeIn}\"></script>\n\t\t\t<!--...-->\n\t\t\t<script src=\"${codeAutoDetect}\"></script>\n\t\t\t<script src=\"${codeIndent}\"></script>\n\t\t\t<script src=\"${codeComplete}\"></script>\n\t\t\t<script src=\"${codeDeBounce}\"></script>\n\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t<!--...-->\n\t\t\t<script>\n\t\t\tcodeInput.registerTemplate(\"code-input\", \n\t\t\t\tcodeInput.templates.prism(\n\t\t\t\tPrism, \n\t\t\t\t[\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tnew codeInput.plugins.Indent()\n\t\t\t\t]\n\t\t\t\t)\n\t\t\t);\n\t\t\t</script>\n\t\t\t<div class=\"storage-tray\">\n\t\t\t\t<button class=\"storage-tray-button\" id=\"storage-tray-button\" onclick=\"addCodeTour(this)\">+</button>\n\t\t\t\t</br>\n\t\t\t\t</br>\n\t\t\t\t<button id=\"trash\" class=\"trash\">\n\t\t\t\t\t<svg id=\"trash-icon\" class=\"trash-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t<path class=\"trash-icon-path\" d=\"M3 6v18h18v-18h-18zm5 14c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm5 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm5 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4-18v2h-20v-2h5.711c.9 0 1.631-1.099 1.631-2h5.315c0 .901.73 2 1.631 2h5.712z\"/>\n\t\t\t\t\t</svg>\n\n\t\t\t\t\t\n\t\t\t\t</button>\n\t\t\t\t\n\t\t\t</div>\n\t\t\t<div id=\"pop-container\" class=\"pop-up-container\">\n\t\t\t\t<div id=\"add-pop\" class=\"add-pop-up\"></div>\n\t\t\t\t<div id=\"pop-arrow\" class=\"arrow-left\"></div>\n\t\t\t</div>\n\n\t\t\t\t\t\n\n\t\t\t\t\t<div id=\"delete-container\" class=\"delete-container\">\n\t\t\t\t\t   <b id=\"delete-prompt\" class=\"delete-prompt\" >Are you sure you want to delete?</b>\n\t\t\t\t\t   </br>\n\n\t\t\t\t\t   <div class=\"code-steps-inner\">\t\n\t\t\t\t\t\t\t<span  class=\"step-title\"><b>Step 0</b></span> \n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t   </br>\n\t\t\t\t\t   <div id=\"button-container\" style=\"padding-top: 50%; display: flex; justify-content: center\">\n\t\t\t\t\t   <button id=\"delete-btn\" class=\"delete-btn\">Delete</button>\n\t\t\t\t\t   <button id=\"cancel-btn\" class=\"cancel-btn\" onclick=\"closeDeleteBox()\">Cancel</button>\n\t\t\t\t\t   </div>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\t<div class=\"code-steps-box\">\n\t\t\t\t\t\t\t<div id=\"@@@Step0@@@\" draggable=\"true\" ondragstart=\"dragElement(this)\" oncontextmenu=\"expandStep(event, this)\" class=\"code-steps\">\n\t\t\t\t\t\t\t<img  class=\"move-icon\"  src = \"${this.moveSVG}\" alt=\"My Happy SVG\">\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t</img>\n\n\t\t\t\t\t\t\t<div class=\"code-steps-inner\">\t\n\t\t\t\t\t\t\t<span  class=\"step-title\"><b>Step 0</b></span> \n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div id=\"file-path-div\">\n\t\t\t\t\t\t\t\t<label>File Path*:</label>\n\t\t\t\t\t\t\t\t<input id=\"file-path\" class=\"file-path-box\">\n\t\t\t\t\t\t\t\t</input>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div id=\"line-number-div\">\n\t\t\t\t\t\t\t\t<label>Line Number*:</label>\n\t\t\t\t\t\t\t\t<input id=\"line-number\" class=\"line-number-box\">\n\t\t\t\t\t\t\t\t</input>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div id=\"description-div\">\n\t\t\t\t\t\t\t\t<label>Description/Code:</label>\n\t\t\t\t\t\t\t\t<textarea id=\"description-input\" class=\"description-box\">\n\t\t\t\t\t\t\t\t</textarea>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\n\n\n\t\t\t\t\t\t\t<button id=\"save-step-button\" class=\"save-step\" onclick=\"saveStep(this)\">Save</button>\n\t\t\t\t\t\t\t<button style=\"display: none;\" id=\"edit-step-button\" class=\"edit-step\" onclick=\"editStep(this)\">Edit</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\n\t\t\t\t\t<div class=\"input-container\">\n\t\t\t\t\t\t<code-input id=\"ci-external\" lang=\"Markdown\" style=\"letter-spacing: inherit;\" value=\"${parsedText}\"></code-input>\n\t\t\t\t\t</div>\n\t\t\t\n\n\t\t\t\t<script  nonce=\"${nonce}\" src=\"${styleJS}\" ></script>\n\t\t\t\t<script type=\"module\" nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n\t\t\t</div>\n\t\t\t</body>\n\t\t\t</html>`;\n\t}\n\n\t\n\t/**\n\t * Try to get a current document as json text.\n\t */\n\tprivate getDocumentAsJson(document: vscode.TextDocument): any {\n\t\tconst text = document.getText();\n\t\tif (text.trim().length === 0) {\n\t\t\treturn {};\n\t\t}\n\n\t\ttry {\n\t\t\treturn JSON.parse(text);\n\t\t} catch {\n\t\t\tthrow new Error('Could not get document as json. Content is not valid json');\n\t\t}\n\t}\n\n\t/**\n\t * Write out the json to a given document.\n\t */\n\tprivate updateTextDocument(document: vscode.TextDocument, json: any) {\n\t\tconst edit = new vscode.WorkspaceEdit();\n\n\t\t// Just replace the entire document every time for this example extension.\n\t\t// A more complete extension should compute minimal edits instead.\n\t\tedit.replace(\n\t\t\tdocument.uri,\n\t\t\tnew vscode.Range(0, 0, document.lineCount, 0),\n\t\t\tJSON.stringify(json, null, 2));\n\n\t\treturn vscode.workspace.applyEdit(edit);\n\t}\n}\n\n\nexport function getNonce() {\n\tlet text = '';\n\tconst possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\tfor (let i = 0; i < 32; i++) {\n\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\n\t}\n\treturn text;\n}\n"],
  "mappings": "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",
  "names": ["module", "module", "debug", "self", "extend", "module", "module", "module", "stream", "module", "util", "useColors", "debug", "module", "path", "isFile", "exists", "__export", "deferred", "module", "util", "module", "util", "stream", "self", "module", "module", "charset", "path", "extension", "extensions", "module", "module", "module", "module", "module", "module", "module", "module", "module", "module", "module", "module", "util", "path", "http", "https", "fs", "FormData", "append", "defaults", "getProxyForUrl", "url", "module", "debug", "module", "url", "URL", "http", "https", "debug", "self", "isString", "isBuffer", "isFunction", "exports", "noop", "module", "require_entities", "module", "module", "module", "encode", "module", "module", "url", "module", "url", "module", "require_regex", "module", "require_regex", "module", "require_regex", "module", "require_regex", "module", "isString", "module", "module", "module", "module", "module", "self", "module", "module", "module", "module", "url", "module", "module", "module", "last", "module", "module", "module", "module", "module", "last", "module", "module", "module", "module", "module", "module", "module", "module", "module", "module", "module", "module", "first", "last", "module", "module", "require_linkify", "module", "url", "module", "module", "module", "module", "module", "module", "module", "module", "url", "module", "module", "module", "module", "last", "module", "module", "module", "module", "isString", "isObject", "isRegExp", "isFunction", "defaultOptions", "self", "module", "module", "module", "module", "url", "self", "module", "module", "t", "n", "e", "r", "i", "o", "a", "s", "f", "u", "c", "root", "factory", "exports", "module", "define", "amd", "this", "e", "t", "Object", "defineProperty", "value", "UseOnigurumaFindOptions", "DebugFlags", "InDebugMode", "process", "env", "LocalStackElement", "StackElement", "ScopeListElement", "StackElementMetadata", "Grammar", "ScopeMetadata", "ScopeDependencyProcessor", "ScopeDependencyCollector", "PartialScopeDependency", "FullScopeDependency", "createGrammar", "utils_1", "rule_1", "matcher_1", "debug_1", "performanceNow", "performance", "Date", "now", "scopeName", "grammar", "initialLanguage", "embeddedLanguages", "tokenTypes", "grammarRepository", "onigLib", "include", "prototype", "toKey", "full", "partial", "visitedRule", "Set", "_seenFull", "_seenPartial", "add", "dep", "has", "push", "_extractIncludedScopesInPatterns", "result", "baseGrammar", "selfGrammar", "patterns", "repository", "_i", "patterns_1", "length", "pattern", "patternRepository", "mergeObjects", "Array", "isArray", "collectDependencies", "charAt", "collectSpecificDependencies", "substring", "sharpIndex", "indexOf", "includedName", "repo", "initialScopeName", "seenFullScopeRequests", "seenPartialScopeRequests", "Q", "processQueue", "q", "deps", "q_1", "collectDependenciesForDep", "_a", "_b", "_c", "_d", "lookup", "injections", "injections_1", "injection", "Error", "scopesAreMatching", "thisScopeName", "len", "substr", "nameMatcher", "identifers", "scopes", "lastIndex", "every", "identifier", "i", "collectInjections", "selector", "rule", "ruleFactoryHelper", "matchers", "createMatchers", "ruleId", "RuleFactory", "getCompiledRuleId", "matchers_1", "matcher", "debugSelector", "priority", "languageId", "tokenType", "themeData", "ScopeMetadataProvider", "themeProvider", "_initialLanguage", "_themeProvider", "_cache", "Map", "_defaultMetaData", "getDefaults", "_embeddedLanguages", "create", "keys", "scope", "language", "console", "warn", "escapedScopes", "map", "_escapeRegExpCharacters", "_embeddedLanguagesRegex", "sort", "reverse", "RegExp", "join", "onDidChangeTheme", "getDefaultMetadata", "replace", "getMetadataForScope", "_NULL_SCOPE_METADATA", "get", "_doGetMetadataForScope", "set", "_scopeToLanguage", "standardTokenType", "_toStandardTokenType", "themeMatch", "m", "match", "STANDARD_TOKEN_TYPE_REGEXP", "_scopeName", "_scopeMetadataProvider", "_onigLib", "_rootId", "_lastRuleId", "_ruleId2desc", "_includedGrammars", "_grammarRepository", "_grammar", "initGrammar", "_injections", "_tokenTypeMatchers", "matchers_2", "type", "dispose", "createOnigScanner", "sources", "createOnigString", "_collectInjections", "_this", "getExternalGrammar", "dependencyProcessor", "forEach", "rawInjections", "expression", "injectionScopeNames", "injectionScopeName", "injectionGrammar", "injectionSelector", "i1", "i2", "getInjections", "log", "registerRule", "id", "getRule", "patternId", "rawIncludedGrammar", "$base", "tokenizeLine", "lineText", "prevState", "timeLimit", "r", "_tokenize", "tokens", "lineTokens", "getResult", "ruleStack", "lineLength", "stoppedEarly", "tokenizeLine2", "getBinaryResult", "emitBinaryTokens", "isFirstLine", "$self", "NULL", "reset", "rawDefaultMetadata", "defaultTheme", "defaultMetadata", "fontStyle", "foreground", "background", "rootScopeName", "getName", "rawRootMetadata", "rootMetadata", "mergeMetadata", "scopeList", "onigLineText", "content", "LineTokens", "_tokenizeString", "disposeOnigString", "stack", "str", "base", "clone", "$vscodeTextmateLocation", "name", "handleCaptures", "captures", "captureIndices", "lineTextContent", "Math", "min", "localStack", "maxEnd", "end", "captureRule", "captureIndex", "start", "endPos", "produceFromScopes", "pop", "produce", "retokenizeCapturedWithRuleId", "nameScopesList", "contentNameScopesList", "contentName", "getContentName", "stackClone", "onigSubStr", "captureRuleScopeName", "captureRuleScopesList", "debugCompiledRuleToString", "ruleScanner", "rules", "debugRegExps", "getFindOptions", "allowA", "allowG", "options", "prepareRuleSearch", "endRegexSource", "compile", "findOptions", "compileAG", "prepareRuleWhileSearch", "compileWhile", "compileWhileAG", "TokenizeStringResult", "linePos", "checkWhileConditions", "STOP", "anchorPosition", "whileCheckResult", "beginRuleCapturedEOL", "whileRules", "node", "nodeRule", "BeginWhileRule", "whileRule", "endRule", "scanner", "findNextMatchSync", "debugName", "debugWhileRegExp", "index", "whileCaptures", "startTime", "scanNext", "matchResult", "perfStart", "elapsedMillis", "matchedRuleId", "injectionResult", "bestMatchRuleId", "bestMatchRating", "Number", "MAX_VALUE", "bestMatchCaptureIndices", "bestMatchResultPriority", "generateScopes", "matchRating", "priorityMatch", "matchResultScore", "injectionResultScore", "hasAdvanced", "poppedRule", "debugEndRegExp", "setContentNameScopesList", "endCaptures", "popped", "getAnchorPos", "getEnterPos", "error", "_rule", "beforePush", "BeginEndRule", "pushedRule", "debugBeginRegExp", "beginCaptures", "endHasBackReferences", "setEndRule", "getEndWithResolvedBackReferences", "hasSameRuleAs", "whileHasBackReferences", "getWhileWithResolvedBackReferences", "matchingRule", "debugMatchRegExp", "safePop", "toBinaryStr", "metadata", "toString", "printMetadata", "getLanguageId", "getTokenType", "getFontStyle", "getForeground", "getBackground", "_languageId", "_tokenType", "_fontStyle", "_foreground", "_background", "parent", "_equals", "a", "b", "equals", "other", "_matchesScope", "selectorWithDot", "_matches", "target", "parentScopes", "scopesList", "source", "_push", "rawMetadata", "split", "_generateScopes", "resultLen", "enterPos", "anchorPos", "_stackElementBrand", "depth", "_enterPos", "_anchorPos", "_structuralEquals", "_reset", "el", "_writeString", "res", "outIndex", "tokenTypeOverrides", "_emitBinaryTokens", "_tokenTypeOverrides", "_lineText", "_tokens", "_binaryTokens", "_lastTokenEndIndex", "endIndex", "scopes_1", "toTemporaryType", "scopes_2", "k", "startIndex", "Uint32Array", "standardType", "parseRawGrammar", "plist", "json_1", "filePath", "test", "contents", "filename", "parse", "JSON", "parseWithLocation", "doFail", "streamState", "msg", "pos", "withMetadata", "JSONStreamState", "token", "JSONToken", "state", "cur", "stateStack", "objStack", "pushState", "popState", "fail", "nextJSONToken", "toLocation", "keyValue", "parseFloat", "newArr", "newDict", "line", "char", "offset", "_state", "_out", "chCode", "charCodeAt", "_", "m0", "String", "fromCodePoint", "parseInt", "__createBinding", "o", "k2", "enumerable", "__exportStar", "p", "hasOwnProperty", "call", "__awaiter", "thisArg", "_arguments", "P", "generator", "Promise", "resolve", "reject", "fulfilled", "step", "next", "rejected", "done", "then", "apply", "__generator", "body", "f", "y", "g", "label", "sent", "trys", "ops", "verb", "Symbol", "iterator", "n", "v", "op", "TypeError", "INITIAL", "Registry", "registry_1", "grammarReader", "theme_1", "grammar_1", "_options", "_syncRegistry", "SyncRegistry", "Theme", "createFromRawTheme", "theme", "colorMap", "_ensureGrammarCache", "setTheme", "getColorMap", "loadGrammarWithEmbeddedLanguages", "loadGrammarWithConfiguration", "configuration", "_loadGrammar", "loadGrammar", "_doLoadSingleGrammar", "addGrammar", "_loadSingleGrammar", "all", "request", "grammarForScopeName", "rawGrammar", "isIdentifier", "matchesName", "input", "regex", "results", "tokenizer", "exec", "parseConjunction", "parseOperand", "expressionToNegate_1", "matcherInput", "expressionInParents", "some", "parseInnerExpression", "identifiers_1", "_parse", "locationKeyName", "advancePosBy", "by", "advancePosTo", "to", "skipWhitespace", "advanceIfStartsWith", "advanceUntil", "nextOccurence", "captureUntil", "curKey", "newState", "newCur", "val", "isClosed", "dictState", "leaveDict", "leaveArray", "acceptString", "acceptReal", "isNaN", "acceptInteger", "acceptDate", "acceptData", "acceptBool", "parseTagValue", "tag", "peekChCode", "trim", "onigLibPromise", "_theme", "_grammars", "_rawGrammars", "_injectionGrammars", "_onigLibPromise", "targetScope", "_e", "concat", "extendStatics", "__extends", "d", "setPrototypeOf", "__proto__", "__", "constructor", "IncludeOnlyRule", "MatchRule", "RegExpSourceList", "RegExpSource", "CaptureRule", "Rule", "CompiledRule", "HAS_BACK_REFERENCES", "BACK_REFERENCING_END", "regExps", "$location", "_name", "_nameIsCapturing", "RegexSource", "hasCaptures", "_contentName", "_contentNameIsCapturing", "location", "basename", "configurable", "replaceCaptures", "_super", "collectPatternsRecursive", "out", "isFirst", "regExpSource", "handleAnchors", "lastPushedPos", "output", "hasAnchor", "nextCh", "_anchorCache", "_buildAnchorCache", "hasBackReferences", "setSource", "newSource", "resolveBackReferences", "capturedValues", "capture", "g1", "ch", "A0_G0_result", "A0_G1_result", "A1_G0_result", "A1_G1_result", "A0_G0", "A0_G1", "A1_G0", "A1_G1", "resolveAnchors", "_items", "_hasAnchors", "_cached", "_disposeCaches", "item", "unshift", "_resolveAnchors", "_match", "_cachedCompiledPatterns", "_getCachedCompiledPatterns", "hasMissingPatterns", "begin", "applyEndPatternLast", "_begin", "_end", "_while", "_cachedCompiledWhilePatterns", "_getCachedCompiledWhilePatterns", "createCaptureRule", "helper", "desc", "_compileCaptures", "_compilePatterns", "while", "maximumCaptureId", "captureId", "numericCaptureId", "localIncludedRule", "externalGrammarName", "externalGrammarInclude", "externalGrammar", "externalIncludedRule", "skipRule", "ThemeTrieElement", "ThemeTrieElementRule", "strArrCmp", "strcmp", "ColorMap", "parseTheme", "ParsedThemeRule", "isValidHexColor", "hex", "settings", "entry", "j", "lenJ", "segments", "slice", "resolveParsedThemeRules", "parsedThemeRules", "_colorMap", "defaultFontStyle", "defaultForeground", "defaultBackground", "incomingDefaults", "shift", "defaults", "getId", "insert", "_lastColorId", "_id2color", "_color2id", "_isFrozen", "color", "toUpperCase", "_root", "_defaults", "createFromParsedTheme", "len1", "len2", "scopeDepth", "cloneArr", "arr", "acceptOverwrite", "mainRule", "rulesWithParentScopes", "children", "_mainRule", "_rulesWithParentScopes", "_children", "_sortBySpecificity", "_cmpBySpecificity", "aParentScopes", "bParentScopes", "aParentScopesLen", "bParentScopesLen", "aLen", "bLen", "head", "tail", "dotIndex", "child", "_doInsertHere", "doClone", "something", "obj", "key", "arguments", "path", "idx", "lastIndexOf", "CAPTURING_REGEX_SOURCE", "regexSource", "captureSource", "commandIndex", "command", "toLowerCase", "__webpack_module_cache__", "__webpack_require__", "moduleId", "cachedModule", "__webpack_modules__", "require_dist", "join", "value", "ParseOptions", "onError", "path", "fs", "_a", "__defProp", "__defProps", "__getOwnPropDescs", "__getOwnPropSymbols", "__hasOwnProp", "__propIsEnum", "__defNormalProp", "__spreadValues", "__spreadProps", "_a2", "themes", "require_ms", "module", "require_debug", "module", "debug", "self", "require_browser", "module", "useColors", "require_node", "module", "util", "stream", "useColors", "fd", "fs", "debug", "require_src", "module", "require_utils", "noop", "extend", "logger", "debug", "module", "fs", "path", "debug", "dir", "filter", "platform", "arch", "runtime", "abi", "require_node_gyp_build", "module", "module", "mask", "module", "module", "module", "Buffer", "EventEmitter", "self", "last", "require_fallback", "module", "module", "module", "util", "EventEmitter", "extensions", "self", "key", "module", "util", "url", "EventEmitter", "self", "extensions", "index", "array", "obj", "i", "module", "extend", "util", "debug", "EventEmitter", "WebSocketServer", "self", "module", "extend", "util", "EventEmitter", "http", "https", "url", "self", "i", "module", "util", "EventEmitter", "module", "extend", "util", "EventEmitter", "path", "module", "isTypedArray", "toString", "module", "isTypedArray", "module", "module", "module", "module", "url", "self", "module", "module", "module", "module", "require_websocket", "module", "module", "_self", "encode", "lang", "toArray", "Prism", "vscode", "import_promise_deferred", "path", "filter", "commands", "commands2", "trim", "__export", "all", "append2", "debug", "logger", "url", "merge", "__commonJS", "module", "__toCommonJS", "vscode", "vscode", "prototype", "forEach", "descriptors", "filter", "hasOwnProperty", "define", "filter", "FormData", "path", "prototype", "append", "toString", "encode", "url", "url", "path", "path", "parser", "isFormData", "isFileList", "transitional", "parser", "filter", "self", "parser", "first", "prototype", "validateStatus", "url", "import_util", "url", "import_stream", "stream", "self", "import_stream", "import_stream", "stream", "zlib", "followRedirects", "EventEmitter", "resolve", "reject", "stream", "util", "path", "https", "http", "transitional", "path", "read", "remove", "standardBrowserEnv", "url", "nonStandardBrowserEnv", "transitional", "merge", "validators", "transitional", "forEachMethodNoData", "url", "forEachMethodWithData", "Axios", "AxiosError", "CanceledError", "isCancel", "CancelToken", "VERSION", "all", "isAxiosError", "spread", "toFormData", "AxiosHeaders", "HttpStatusCode", "mergeConfig", "res", "logger", "exp", "vscode", "logger", "fs", "path", "md", "getNonce", "vscode", "import_vscode", "logger", "getNonce", "vscode", "import_vscode", "logger", "getNonce", "vscode", "path", "document", "fs", "e", "getNonce", "path", "logger", "debug", "fs"]
}
